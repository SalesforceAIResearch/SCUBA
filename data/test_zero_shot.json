[
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_001_001",
        "query_templated": "Create a report with Leads type with name MyLeadRPT. If you don\u2019t see any data in the preview area, click the All Time link to apply a standard filter that shows results for all time. Add a standard filter to select records whose Lead Status field equals to Open - Not Contacted. If the Lead Status field is not visible in the table, add it first.",
        "query": "Create a report using the Leads type and name it MyLeadRPT.\r\nIf no data shows up in the preview, click All Time so it includes results from all time.\r\nNext, add a filter so it only shows records where Lead Status is set to Open \u2013 Not Contacted.\r\nIf you don\u2019t see the Lead Status field in the table, make sure to add it first.",
        "human_review_comment": "rejected since it is the same. Rewriten",
        "ground_truth_dict": {
            "object_name": "Leads",
            "report_name": "MyLeadRPT",
            "filter_type": "standard filter",
            "filters": [
                [
                    "STATUS",
                    "equals",
                    "Open - Not Contacted"
                ]
            ],
            "field_name": "STATUS"
        },
        "difficulty": "medium",
        "query_template_name": "create_report",
        "query_template_metadata": {
            "template_id": "admin_001",
            "template_string": "Create a report with {object_name} type with name {report_name}. If you don\u2019t see any data in the preview area, click the All Time link to apply a standard filter that shows results for all time. Add a {filter_type} to select records whose {filters}. If the {field_name} field is not visible in the table, add it first.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Leads",
            "report_name": "MyLeadRPT",
            "filter_type": "standard filter",
            "filters": "Lead Status field equals to Open - Not Contacted",
            "field_name": "Lead Status"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_001_002",
        "query_templated": "Create a report with Opportunities type with name HighValueDealsRPT. If you don\u2019t see any data in the preview area, click the All Time link to apply a standard filter that shows results for all time. Add a standard filter to select records whose Amount greater than 100000. If the Amount field is not visible in the table, add it first.",
        "query": "Now I need to create a report using the Opportunities type and name it HighValueDealsRPT.\r\nIf nothing shows up in the preview, click All Time to include results from all time.\r\nThen add a filter so it only shows records where the Amount is greater than 100,000.\r\nIf you don\u2019t see the Amount field in the table, make sure to add it first.",
        "human_review_comment": "rejected since it is the same. Rewriten",
        "ground_truth_dict": {
            "object_name": "Opportunities",
            "report_name": "HighValueDealsRPT",
            "filter_type": "standard filter",
            "filters": [
                [
                    "AMOUNT",
                    "greaterThan",
                    "\"100,000\""
                ]
            ],
            "field_name": "Amount"
        },
        "difficulty": "medium",
        "query_template_name": "create_report",
        "query_template_metadata": {
            "template_id": "admin_001",
            "template_string": "Create a report with {object_name} type with name {report_name}. If you don\u2019t see any data in the preview area, click the All Time link to apply a standard filter that shows results for all time. Add a {filter_type} to select records whose {filters}. If the {field_name} field is not visible in the table, add it first.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Opportunities",
            "report_name": "HighValueDealsRPT",
            "filter_type": "standard filter",
            "filters": "Amount greater than 100000",
            "field_name": "Amount"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_001_003",
        "query_templated": "Create a report with Accounts type with name MyAccountsRPT. If you don\u2019t see any data in the preview area, click the All Time link to apply a standard filter that shows results for all time. Add a standard filter to select records whose Industry equals Technology and Annual revenue is greater than 1000000. If the Industry or Annual revenue field is not visible in the table, add it first.",
        "query": "I want to create a report using the Accounts type and name it MyAccountsRPT.\r\nIf no data shows up in the preview, click All Time so it includes results from all time.\r\nThen add filters so it only shows records where Industry is Technology and Annual Revenue is greater than 1,000,000.\r\nIf you don\u2019t see the Industry or Annual Revenue fields in the table, add them first.",
        "human_review_comment": "rejected since it is the same. Rewriten",
        "ground_truth_dict": {
            "object_name": "Accounts",
            "report_name": "ActiveAccountsRPT",
            "filter_type": "standard filter",
            "filters": [
                [
                    "INDUSTRY",
                    "equals",
                    "Technology"
                ],
                [
                    "SALES",
                    "greaterThan",
                    "\"1,000,000\""
                ]
            ],
            "field_name": "INDUSTRY, SALES"
        },
        "difficulty": "medium",
        "query_template_name": "create_report",
        "query_template_metadata": {
            "template_id": "admin_001",
            "template_string": "Create a report with {object_name} type with name {report_name}. If you don\u2019t see any data in the preview area, click the All Time link to apply a standard filter that shows results for all time. Add a {filter_type} to select records whose {filters}. If the {field_name} field is not visible in the table, add it first.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Accounts",
            "report_name": "MyAccountsRPT",
            "filter_type": "standard filter",
            "filters": "Industry equals Technology and Annual revenue is greater than 1000000",
            "field_name": "Industry or Annual revenue"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_001_004",
        "query_templated": "Create a report with Tasks type with name MyTasksRPT. If you don\u2019t see any data in the preview area, click the All Time link to apply a standard filter that shows results for all time. Add a standard filter to select records whose Status equals Completed and Priority equals High. If the Status or Priority field is not visible in the table, add it first.",
        "query": "You need to create a report using the Tasks type and name it MyTasksRPT.\r\nIf no data shows up in the preview, click All Time so it includes results from all time.\r\nThen add filters so it only shows records where Status is Completed and Priority is High.\r\nIf you don\u2019t see the Status or Priority fields in the table, add them first.",
        "human_review_comment": "rejected since it is the same. Rewriten",
        "ground_truth_dict": {
            "object_name": "Tasks and Events",
            "report_name": "MyTasksRPT",
            "filter_type": "standard filter",
            "filters": [
                [
                    "STATUS",
                    "equals",
                    "Completed"
                ],
                [
                    "PRIORITY",
                    "equals",
                    "High"
                ]
            ],
            "field_name": "STATUS, PRIORITY"
        },
        "difficulty": "medium",
        "query_template_name": "create_report",
        "query_template_metadata": {
            "template_id": "admin_001",
            "template_string": "Create a report with {object_name} type with name {report_name}. If you don\u2019t see any data in the preview area, click the All Time link to apply a standard filter that shows results for all time. Add a {filter_type} to select records whose {filters}. If the {field_name} field is not visible in the table, add it first.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Tasks",
            "report_name": "MyTasksRPT",
            "filter_type": "standard filter",
            "filters": "Status equals Completed and Priority equals High",
            "field_name": "Status or Priority"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_001_005",
        "query_templated": "Create a report with Cases type with name OpenCasesRPT. If you don\u2019t see any data in the preview area, click the All Time link to apply a standard filter that shows results for all time. Add a standard filter to select records whose Status equals New and Origin equals Phone. If the Status or Origin field is not visible in the table, add it first.",
        "query": "Please create a report using the Cases type and name it OpenCasesRPT.\r\nIf no data shows up in the preview, click All Time so it includes results from all time.\r\nThen add filters so it only shows records where Status is New and Origin is Phone.\r\nIf you don\u2019t see the Status or Origin fields in the table, add them first.",
        "human_review_comment": "rejected since it is the same. Rewriten",
        "ground_truth_dict": {
            "object_name": "Cases",
            "report_name": "OpenCasesRPT",
            "filter_type": "standard filter",
            "filters": [
                [
                    "STATUS",
                    "equals",
                    "New"
                ],
                [
                    "ORIGIN",
                    "equals",
                    "Phone"
                ]
            ],
            "field_name": "STATUS, ORIGIN"
        },
        "difficulty": "medium",
        "query_template_name": "create_report",
        "query_template_metadata": {
            "template_id": "admin_001",
            "template_string": "Create a report with {object_name} type with name {report_name}. If you don\u2019t see any data in the preview area, click the All Time link to apply a standard filter that shows results for all time. Add a {filter_type} to select records whose {filters}. If the {field_name} field is not visible in the table, add it first.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Cases",
            "report_name": "OpenCasesRPT",
            "filter_type": "standard filter",
            "filters": "Status equals New and Origin equals Phone",
            "field_name": "Status or Origin"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_002_001",
        "query_templated": "Create a report with the Accounts type with name MyAccountRPT. Add a cross filter with the Opportunities object. Add a subfilter on stage field of the Opportunities object, which is set to equal to Prospecting and Need Analysis..",
        "query": "Let\u2019s go ahead and build a report using the Accounts type and call it MyAccountRPT.\r\nNext, add a cross filter that brings in the Opportunities object.\r\nFrom there, apply a subfilter so it only shows opportunities where the Stage is Prospecting and Need Analysis.",
        "human_review_comment": "rejected since it is the same. Rewriten",
        "ground_truth_dict": {
            "object_name": "Accounts",
            "report_name": "MyAccountRPT",
            "cross_object_name": "Opportunity",
            "filters": [
                [
                    "StageName",
                    "equals",
                    "Prospecting,Needs Analysis"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_report_with_cross_filter",
        "query_template_metadata": {
            "template_id": "admin_002",
            "template_string": "Create a report with the {object_name} type with name {report_name}. Add a cross filter with the {cross_object_name} object. {filters}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Accounts",
            "report_name": "MyAccountRPT",
            "cross_object_name": "Opportunities",
            "filters": "Add a subfilter on stage field of the Opportunities object, which is set to equal to Prospecting and Need Analysis."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_002_002",
        "query_templated": "Create a report with the Leads type with name QualifiedLeadsRPT. Add a cross filter with the Activities object. Add subfilters on the Status field of the Activities object set to equals Completed, and on the Subject field set to contains Demo..",
        "query": "Start by creating a report using the Leads type and name it QualifiedLeadsRPT.\r\nAfter that, add a cross filter that pulls in the Activities object.\r\nThen, set up two subfilters: one where Status is Completed, and another where Subject contains the word Demo.",
        "human_review_comment": "rejected since it is the same. Rewriten",
        "ground_truth_dict": {
            "object_name": "Leads",
            "report_name": "QualifiedLeadsRPT",
            "cross_object_name": "Activity",
            "filters": [
                [
                    "Status",
                    "equals",
                    "Completed"
                ],
                [
                    "Subject",
                    "contains",
                    "Demo"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_report_with_cross_filter",
        "query_template_metadata": {
            "template_id": "admin_002",
            "template_string": "Create a report with the {object_name} type with name {report_name}. Add a cross filter with the {cross_object_name} object. {filters}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Leads",
            "report_name": "QualifiedLeadsRPT",
            "cross_object_name": "Activities",
            "filters": "Add subfilters on the Status field of the Activities object set to equals Completed, and on the Subject field set to contains Demo."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_002_003",
        "query_templated": "Create a report with the Cases type with name CasesWithAnimalCommentsRPT. Add a cross filter with the Case Comments object. Add subfilters on the Created Date field of the Case Comments object set to less than or equal to today, and on the body field set to contains \u201canimal\u201d..",
        "query": "Go ahead and create a report using the Cases type and call it CasesWithAnimalCommentsRPT.\r\nOnce that\u2019s set up, add a cross filter that brings in the Case Comments object.\r\nFor the subfilters, make sure Created Date is set to less than or equal to today, and that the Body field includes the word \u201canimal\u201d.",
        "human_review_comment": "rejected since it is the same. Rewriten",
        "ground_truth_dict": {
            "object_name": "Cases",
            "report_name": "CasesWithAnimalCommentsRPT",
            "cross_object_name": "CaseComment",
            "filters": [
                [
                    "CreatedDate",
                    "lessOrEqual",
                    "TODAY"
                ],
                [
                    "CommentBody",
                    "contains",
                    "animal"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_report_with_cross_filter",
        "query_template_metadata": {
            "template_id": "admin_002",
            "template_string": "Create a report with the {object_name} type with name {report_name}. Add a cross filter with the {cross_object_name} object. {filters}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Cases",
            "report_name": "CasesWithAnimalCommentsRPT",
            "cross_object_name": "Case Comments",
            "filters": "Add subfilters on the Created Date field of the Case Comments object set to less than or equal to today, and on the body field set to contains \u201canimal\u201d."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_002_004",
        "query_templated": "Create a report with the Leads type with name LeadTerritoriesEngagementRPT. Add a cross filter with the Territories object. Add subfilters on the Method field of the Territory object set to not equal to Territory Manual.",
        "query": "Could you please create a report using the Leads type and name it LeadTerritoriesEngagementRPT?\r\nAfter that, add a cross filter that includes the Territories object.\r\nFinally, add a subfilter so that the Method field of the territory is set to not equal to Territory Manual.",
        "human_review_comment": "rejected since it is the same. Rewriten",
        "ground_truth_dict": {
            "object_name": "Leads",
            "report_name": "LeadTerritoriesEngagementRPT",
            "cross_object_name": "ObjectTerritory2Association-Territory2",
            "filters": [
                [
                    "AssociationCause",
                    "notEqual",
                    "Territory Manual"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_report_with_cross_filter",
        "query_template_metadata": {
            "template_id": "admin_002",
            "template_string": "Create a report with the {object_name} type with name {report_name}. Add a cross filter with the {cross_object_name} object. {filters}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Leads",
            "report_name": "LeadTerritoriesEngagementRPT",
            "cross_object_name": "Territories",
            "filters": "Add subfilters on the Method field of the Territory object set to not equal to Territory Manual"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_002_005",
        "query_templated": "Create a report with the Opportunities type with name Competitors. Add a cross filter with the Products object. Add subfilters on the Name field of the Competitor object that contains CRM.",
        "query": "1. Create a report using the Opportunities type and give it the name Competitors.\r\n\r\n2. Add a cross filter that includes the Products object.\r\n\r\n3. Then, add a subfilter so that within the Competitor object, the Name field contains CRM.",
        "human_review_comment": "rejected since it is the same. Rewriten",
        "ground_truth_dict": {
            "object_name": "Opportunities",
            "report_name": "Competitors",
            "cross_object_name": "OpportunityCompetitor",
            "filters": [
                [
                    "CompetitorName",
                    "contains",
                    "CRM"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_report_with_cross_filter",
        "query_template_metadata": {
            "template_id": "admin_002",
            "template_string": "Create a report with the {object_name} type with name {report_name}. Add a cross filter with the {cross_object_name} object. {filters}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Opportunities",
            "report_name": "Competitors",
            "cross_object_name": "Products",
            "filters": "Add subfilters on the Name field of the Competitor object that contains CRM"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_003_001",
        "query_templated": "Create a report with the Cases type with name UnimportantCasesRPT. Add following standard filters: [1. set Status field equals  New 2. Set Date/Time Opened field greater than Last Week 3. Set Priority field equals Low 4. set Escalated field equals true.] Chain the filters with the logic filter with the formula [(1 OR 2) AND 3 NOT 4]. Save it to the public report.",
        "query": "Please spin up a Cases report named UnimportantCasesRPT. Add these standard filters, numbered as follows: 1) Status equals New 2) Date/Time Opened is greater than Last Week 3) Priority equals Low 4) Escalated equals true. Then apply this filter logic: (1 OR 2) AND 3 AND NOT 4. Save the report in the Public Reports.",
        "human_review_comment": "delete folder",
        "ground_truth_dict": {
            "object_name": "Cases",
            "report_name": "UnimportantCasesRPT",
            "field1": "STATUS",
            "operator1": "equals",
            "value1": "New",
            "field2": "CREATED_DATE",
            "operator2": "greaterThan",
            "value2": "LAST WEEK",
            "field3": "PRIORITY",
            "operator3": "equals",
            "value3": "Low",
            "field4": "ESCALATION_STATE",
            "operator4": "equals",
            "value4": "True"
        },
        "difficulty": "hard",
        "query_template_name": "create_report_chain_filters",
        "query_template_metadata": {
            "template_id": "admin_003",
            "template_string": "Create a report with the {object_name} type with name {report_name}. Add following standard filters: [1. set {field1} field {operator1}  {value1} 2. Set {field2} field {operator2} {value2} 3. Set {field3} field {operator3} {value3} 4. set {field4} field {operator4} {value4}.] Chain the filters with the logic filter with the formula [(1 OR 2) AND 3 NOT 4]. Save it to the public report.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Cases",
            "report_name": "UnimportantCasesRPT",
            "field1": "Status",
            "operator1": "equals",
            "value1": "New",
            "field2": "Date/Time Opened",
            "operator2": "greater than",
            "value2": "Last Week",
            "field3": "Priority",
            "operator3": "equals",
            "value3": "Low",
            "field4": "Escalated",
            "operator4": "equals",
            "value4": "true"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_003_002",
        "query_templated": "Create a report with the Opportunities type with name ClosedOldBusinessOpportunitiesRPT. Add following standard filters: [1. set Stage field equals  Closed Won 2. Set Stage field equals Closed Lost 3. Set Amount field Greater Than or Equal to 5000 4. set Type field equals New Customer.] Chain the filters with the logic filter with the formula [(1 OR 2) AND 3 NOT 4]. Save it to the public report.",
        "query": "I need an Opportunities report called ClosedOldBusinessOpportunitiesRPT. Use standard filters with this numbering: 1. Stage = Closed Won 2. Stage = Closed Lost 3. Amount >= 5000 4. Type = New Customer. Combine them using filter logic: (1 OR 2) AND 3 AND NOT 4. Save it to the Public Reports.",
        "human_review_comment": "rejected since it is the same. Rewriten",
        "ground_truth_dict": {
            "object_name": "Opportunities",
            "report_name": "ClosedOldBusinessOpportunitiesRPT",
            "field1": "STAGE_NAME",
            "operator1": "equals",
            "value1": "Closed Won",
            "field2": "STAGE_NAME",
            "operator2": "equals",
            "value2": "Closed Lost",
            "field3": "AMOUNT",
            "operator3": "greaterThan",
            "value3": "\"5,000\"",
            "field4": "TYPE",
            "operator4": "equals",
            "value4": "New Customer"
        },
        "difficulty": "hard",
        "query_template_name": "create_report_chain_filters",
        "query_template_metadata": {
            "template_id": "admin_003",
            "template_string": "Create a report with the {object_name} type with name {report_name}. Add following standard filters: [1. set {field1} field {operator1}  {value1} 2. Set {field2} field {operator2} {value2} 3. Set {field3} field {operator3} {value3} 4. set {field4} field {operator4} {value4}.] Chain the filters with the logic filter with the formula [(1 OR 2) AND 3 NOT 4]. Save it to the public report.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Opportunities",
            "report_name": "ClosedOldBusinessOpportunitiesRPT",
            "field1": "Stage",
            "operator1": "equals",
            "value1": "Closed Won",
            "field2": "Stage",
            "operator2": "equals",
            "value2": "Closed Lost",
            "field3": "Amount",
            "operator3": "Greater Than or Equal to",
            "value3": 5000,
            "field4": "Type",
            "operator4": "equals",
            "value4": "New Customer"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_003_003",
        "query_templated": "Create a report with the Accounts type with name UnimportantAccountsRPT. Add following standard filters: [1. set Rating field not equals  Hot 2. Set Annual Revenue field less than 10000 3. Set Industry field notequals Technology 4. set Industry field equals Other.] Chain the filters with the logic filter with the formula [(1 OR 2) AND 3 NOT 4]. Save it to the public report.",
        "query": "Build an Accounts report titled UnimportantAccountsRPT and wire up these standard filters (keep the numbering): 1) Rating not equals Hot 2) Annual Revenue less than 10000 3) Industry not equals Technology 4) Industry equals Other Now set the filter logic to: (1 OR 2) AND 3 AND NOT 4. Please save it under Public Reports.",
        "human_review_comment": "Accept",
        "ground_truth_dict": {
            "object_name": "Accounts",
            "report_name": "UnimportantAccountsRPT",
            "field1": "RATING",
            "operator1": "notEqual",
            "value1": "Hot",
            "field2": "SALES",
            "operator2": "lessThan",
            "value2": "\"10,000\"",
            "field3": "INDUSTRY",
            "operator3": "notEqual",
            "value3": "Technology",
            "field4": "INDUSTRY",
            "operator4": "equals",
            "value4": "Other"
        },
        "difficulty": "hard",
        "query_template_name": "create_report_chain_filters",
        "query_template_metadata": {
            "template_id": "admin_003",
            "template_string": "Create a report with the {object_name} type with name {report_name}. Add following standard filters: [1. set {field1} field {operator1}  {value1} 2. Set {field2} field {operator2} {value2} 3. Set {field3} field {operator3} {value3} 4. set {field4} field {operator4} {value4}.] Chain the filters with the logic filter with the formula [(1 OR 2) AND 3 NOT 4]. Save it to the public report.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Accounts",
            "report_name": "UnimportantAccountsRPT",
            "field1": "Rating",
            "operator1": "not equals",
            "value1": "Hot",
            "field2": "Annual Revenue",
            "operator2": "less than",
            "value2": 10000,
            "field3": "Industry",
            "operator3": "notequals",
            "value3": "Technology",
            "field4": "Industry",
            "operator4": "equals",
            "value4": "Other"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_003_004",
        "query_templated": "Create a report with the Products type with name ActiveStaleProductsRPT. Add following standard filters: [1. set LastModified Date field less than  last year 2. Set Description field contains old 3. Set Active field equals true 4. set Product Family field equals empty value.] Chain the filters with the logic filter with the formula [(1 OR 2) AND 3 NOT 4]. Save it to the public report.",
        "query": "Create a Products report named ActiveStaleProductsRPT. Add the following standard filters, labeled 1 through 4: 1) LastModified Date less than last year 2) Description contains old 3) Active equals true 4) Product Family equals empty value. Use this filter logic: (1 OR 2) AND 3 AND NOT 4. Store it in the Public Reports folder.",
        "human_review_comment": "Accept",
        "ground_truth_dict": {
            "object_name": "Products",
            "report_name": "ActiveStaleProductsRPT",
            "field1": "LAST_UPDATE",
            "operator1": "lessThan",
            "value1": "LAST YEAR",
            "field2": "DESCRIPTION",
            "operator2": "contains",
            "value2": "old",
            "field3": "ACTIVE",
            "operator3": "equals",
            "value3": "True",
            "field4": "FAMILY",
            "operator4": "equals",
            "value4": ""
        },
        "difficulty": "hard",
        "query_template_name": "create_report_chain_filters",
        "query_template_metadata": {
            "template_id": "admin_003",
            "template_string": "Create a report with the {object_name} type with name {report_name}. Add following standard filters: [1. set {field1} field {operator1}  {value1} 2. Set {field2} field {operator2} {value2} 3. Set {field3} field {operator3} {value3} 4. set {field4} field {operator4} {value4}.] Chain the filters with the logic filter with the formula [(1 OR 2) AND 3 NOT 4]. Save it to the public report.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Products",
            "report_name": "ActiveStaleProductsRPT",
            "field1": "LastModified Date",
            "operator1": "less than",
            "value1": "last year",
            "field2": "Description",
            "operator2": "contains",
            "value2": "old",
            "field3": "Active",
            "operator3": "equals",
            "value3": "true",
            "field4": "Product Family",
            "operator4": "equals",
            "value4": "empty value"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_003_005",
        "query_templated": "Create a report with the Leads type with name QualifiedOnlineLeadsRPT. Add following standard filters: [1. set Lead Source field equals  Web 2. Set Lead Source field equals Other 3. Set Lead Status field equals Working - Contacted 4. set Company / Account field equals empty value.] Chain the filters with the logic filter with the formula [(1 OR 2) AND 3 NOT 4]. Save it to the public report.",
        "query": "Could you set up a Leads report called QualifiedOnlineLeadsRPT? Add these standard filters and keep the numbering: 1) Lead Source equals Web 2) Lead Source equals Other 3) Lead Status equals Working - Contacted 4) Company / Account equals empty value. Apply filter logic: (1 OR 2) AND 3 AND NOT 4. Save the finished report to Public Reports.",
        "human_review_comment": "Accept",
        "ground_truth_dict": {
            "object_name": "Leads",
            "report_name": "QualifiedOnlineLeadsRPT",
            "field1": "LEAD_SOURCE",
            "operator1": "equals",
            "value1": "Web",
            "field2": "LEAD_SOURCE",
            "operator2": "equals",
            "value2": "Other",
            "field3": "STATUS",
            "operator3": "equals",
            "value3": "Working - Contacted",
            "field4": "COMPANY",
            "operator4": "equals",
            "value4": ""
        },
        "difficulty": "hard",
        "query_template_name": "create_report_chain_filters",
        "query_template_metadata": {
            "template_id": "admin_003",
            "template_string": "Create a report with the {object_name} type with name {report_name}. Add following standard filters: [1. set {field1} field {operator1}  {value1} 2. Set {field2} field {operator2} {value2} 3. Set {field3} field {operator3} {value3} 4. set {field4} field {operator4} {value4}.] Chain the filters with the logic filter with the formula [(1 OR 2) AND 3 NOT 4]. Save it to the public report.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Leads",
            "report_name": "QualifiedOnlineLeadsRPT",
            "field1": "Lead Source",
            "operator1": "equals",
            "value1": "Web",
            "field2": "Lead Source",
            "operator2": "equals",
            "value2": "Other",
            "field3": "Lead Status",
            "operator3": "equals",
            "value3": "Working - Contacted",
            "field4": "Company / Account",
            "operator4": "equals",
            "value4": "empty value"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_004_001",
        "query_templated": "Create a summary report with the Opportunities type with name SalesByStageRPT on the Stage field. Then create a Bar chart with chart title Opportunity Counts by Stage and check the box for [Show Values].",
        "query": "Could you spin up a summary report on Opportunities named SalesByStageRPT, grouped by the Stage field? Then add a Bar chart titled \"Opportunity Counts by Stage\" and turn on Show Values.",
        "human_review_comment": "Accept",
        "ground_truth_dict": {
            "object_name": "Opportunities",
            "report_name": "SalesByStageRPT",
            "grouping_field": "STAGE_NAME",
            "chart_type": "Horizontal Bar",
            "chart_title": "Opportunity Counts by Stage"
        },
        "difficulty": "medium",
        "query_template_name": "create_summary_report_with_chart",
        "query_template_metadata": {
            "template_id": "admin_004",
            "template_string": "Create a summary report with the {object_name} type with name {report_name} on the {grouping_field} field. Then create a {chart_type} chart with chart title {chart_title} {additional_comments}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Opportunities",
            "report_name": "SalesByStageRPT",
            "grouping_field": "Stage",
            "chart_type": "Bar",
            "chart_title": "Opportunity Counts by Stage",
            "additional_comments": "and check the box for [Show Values]."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_004_002",
        "query_templated": "Create a summary report with the Accounts type with name MyAccountRPT-1 on the Rating field. Then create a Donut chart with chart title record counts by rating and put the legend on [bottom].",
        "query": "In Reports, build a summary report for Accounts and save it as MyAccountRPT-1, grouped by Rating. Attach a Donut chart titled \"record counts by rating\" with the legend positioned on the bottom.",
        "human_review_comment": "Accept",
        "ground_truth_dict": {
            "object_name": "Accounts",
            "report_name": "MyAccountRPT-1",
            "grouping_field": "RATING",
            "chart_type": "Donut",
            "chart_title": "record counts by rating"
        },
        "difficulty": "medium",
        "query_template_name": "create_summary_report_with_chart",
        "query_template_metadata": {
            "template_id": "admin_004",
            "template_string": "Create a summary report with the {object_name} type with name {report_name} on the {grouping_field} field. Then create a {chart_type} chart with chart title {chart_title} {additional_comments}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Accounts",
            "report_name": "MyAccountRPT-1",
            "grouping_field": "Rating",
            "chart_type": "Donut",
            "chart_title": "record counts by rating",
            "additional_comments": "and put the legend on [bottom]."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_004_003",
        "query_templated": "Create a summary report with the Leads type with name LeadSourceSummaryRPT on the Lead Source field. Then create a Funnel chart with chart title Leads by Source put the legend on [bottom], and check the boxes for [Show Values] and [Show Percentages].",
        "query": "Step 1: Create a Leads summary report called LeadSourceSummaryRPT and group it by the Lead Source field. Step 2: Insert a Funnel chart titled \"Leads by Source,\" set the legend on the bottom, and enable both Show Values and Show Percentages.",
        "human_review_comment": "Accept",
        "ground_truth_dict": {
            "object_name": "Leads",
            "report_name": "LeadSourceSummaryRPT",
            "grouping_field": "LEAD_SOURCE",
            "chart_type": "Funnel",
            "chart_title": "Leads by Source"
        },
        "difficulty": "medium",
        "query_template_name": "create_summary_report_with_chart",
        "query_template_metadata": {
            "template_id": "admin_004",
            "template_string": "Create a summary report with the {object_name} type with name {report_name} on the {grouping_field} field. Then create a {chart_type} chart with chart title {chart_title} {additional_comments}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Leads",
            "report_name": "LeadSourceSummaryRPT",
            "grouping_field": "Lead Source",
            "chart_type": "Funnel",
            "chart_title": "Leads by Source",
            "additional_comments": "put the legend on [bottom], and check the boxes for [Show Values] and [Show Percentages]."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_004_004",
        "query_templated": "Create a summary report with the Cases type with name CasePrioritySummaryRPT on the Priority field. Then create a Column chart with chart title Cases by Priority and check the box for [Show Values].",
        "query": "Please create a summary report for Cases named CasePrioritySummaryRPT, grouped on Priority. After that, add a Column chart titled \"Cases by Priority\" and make sure Show Values is enabled.",
        "human_review_comment": "Accept",
        "ground_truth_dict": {
            "object_name": "Cases",
            "report_name": "CasePrioritySummaryRPT",
            "grouping_field": "PRIORITY",
            "chart_type": "Vertical Bar",
            "chart_title": "Cases by Priority"
        },
        "difficulty": "medium",
        "query_template_name": "create_summary_report_with_chart",
        "query_template_metadata": {
            "template_id": "admin_004",
            "template_string": "Create a summary report with the {object_name} type with name {report_name} on the {grouping_field} field. Then create a {chart_type} chart with chart title {chart_title} {additional_comments}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Cases",
            "report_name": "CasePrioritySummaryRPT",
            "grouping_field": "Priority",
            "chart_type": "Column",
            "chart_title": "Cases by Priority",
            "additional_comments": "and check the box for [Show Values]."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_004_005",
        "query_templated": "Create a summary report with the Contacts type with name ContactSourceRPT on the Source field. Then create a Scatter Plot chart with chart title Contacts by Source and put the legend on [bottom].",
        "query": "Set up a Contacts summary report named ContactSourceRPT on the Source field. Then add a Scatter Plot chart with the title \"Contacts by Source,\" and place the legend on the bottom.",
        "human_review_comment": "change source field",
        "ground_truth_dict": {
            "object_name": "Contacts & Accounts",
            "report_name": "ContactSourceRPT",
            "grouping_field": "CONTACT_SOURCE",
            "chart_type": "Scatter",
            "chart_title": "Contacts by Source"
        },
        "difficulty": "medium",
        "query_template_name": "create_summary_report_with_chart",
        "query_template_metadata": {
            "template_id": "admin_004",
            "template_string": "Create a summary report with the {object_name} type with name {report_name} on the {grouping_field} field. Then create a {chart_type} chart with chart title {chart_title} {additional_comments}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Contacts",
            "report_name": "ContactSourceRPT",
            "grouping_field": "Source",
            "chart_type": "Scatter Plot",
            "chart_title": "Contacts by Source",
            "additional_comments": "and put the legend on [bottom]."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_005_001",
        "query_templated": "Build a matrix report of the Opportunities type with name OpptyMatrixByMonthType. Summarize on the Amount column with the SUM operation. Group row on the Close Month field and group column on the Type field. Save it to the public report.",
        "query": "Please create a matrix report based on Opportunities and name it \u201cOpptyMatrixByMonthType.\u201d Use a SUM aggregation on the Amount field. Group the rows by Close Month and the columns by Type. Save it in the Public Reports.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Opportunities",
            "report_name": "OpptyMatrixByMonthType",
            "field_name": "s!AMOUNT",
            "operation": "Sum",
            "row_group_field": "CLOSE_MONTH",
            "column_group_field": "TYPE"
        },
        "difficulty": "medium",
        "query_template_name": "create_matrix_report",
        "query_template_metadata": {
            "template_id": "admin_005",
            "template_string": "Build a matrix report of the {object_name} type with name {report_name}. Summarize on the {field_name} column with the {operation} operation. Group row on the {row_group_field} field and group column on the {column_group_field} field. Save it to the public report.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Opportunities",
            "report_name": "OpptyMatrixByMonthType",
            "field_name": "Amount",
            "operation": "SUM",
            "row_group_field": "Close Month",
            "column_group_field": "Type"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_005_002",
        "query_templated": "Build a matrix report of the Accounts type with name AccountMatrixOwnerSite. Summarize on the Annual Revenue column with the Average operation. Group row on the Account Owner field and group column on the Account Site field. Save it to the public report.",
        "query": "Build me a matrix report from Accounts called \u201cAccountMatrixOwnerSite.\u201d I want the Annual Revenue field summarized using Average. Group rows by Account Owner and columns by Account Site, then store it under Public Reports.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Accounts",
            "report_name": "AccountMatrixOwnerSite",
            "field_name": "a!SALES",
            "operation": "Average",
            "row_group_field": "USERS.NAME",
            "column_group_field": "SITE"
        },
        "difficulty": "medium",
        "query_template_name": "create_matrix_report",
        "query_template_metadata": {
            "template_id": "admin_005",
            "template_string": "Build a matrix report of the {object_name} type with name {report_name}. Summarize on the {field_name} column with the {operation} operation. Group row on the {row_group_field} field and group column on the {column_group_field} field. Save it to the public report.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Accounts",
            "report_name": "AccountMatrixOwnerSite",
            "field_name": "Annual Revenue",
            "operation": "Average",
            "row_group_field": "Account Owner",
            "column_group_field": "Account Site"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_005_003",
        "query_templated": "Build a matrix report of the Cases type with name CaseMatrixSubjectPriority. Summarize on the Age column with the Maximum operation. Group row on the Subject field and group column on the Priority field. Save it to the public report.",
        "query": "I need a matrix report on Cases titled \u201cCaseMatrixSubjectPriority.\u201d Roll up the Age field using the Maximum value. Set the row grouping to Subject and the column grouping to Priority, and save the report to Public Reports.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Cases",
            "report_name": "CaseMatrixSubjectPriority",
            "field_name": "mx!AGE",
            "operation": "Largest",
            "row_group_field": "SUBJECT",
            "column_group_field": "PRIORITY"
        },
        "difficulty": "medium",
        "query_template_name": "create_matrix_report",
        "query_template_metadata": {
            "template_id": "admin_005",
            "template_string": "Build a matrix report of the {object_name} type with name {report_name}. Summarize on the {field_name} column with the {operation} operation. Group row on the {row_group_field} field and group column on the {column_group_field} field. Save it to the public report.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Cases",
            "report_name": "CaseMatrixSubjectPriority",
            "field_name": "Age",
            "operation": "Maximum",
            "row_group_field": "Subject",
            "column_group_field": "Priority"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_005_004",
        "query_templated": "Build a matrix report of the Products type with name ProductMatrixFamilyDate. Summarize on the Active column with the Sum operation. Group row on the Product Family field and group column on the Created Date field. Save it to the public report.",
        "query": "Set up a matrix report for Products with the name \u201cProductMatrixFamilyDate.\u201d Aggregate the Active field using Sum. Organize rows by Product Family and columns by Created Date. Save this to the Public Reports folder.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Products",
            "report_name": "ProductMatrixFamilyDate",
            "field_name": "s!ACTIVE",
            "operation": "Sum",
            "row_group_field": "FAMILY",
            "column_group_field": "CREATED_DATE"
        },
        "difficulty": "medium",
        "query_template_name": "create_matrix_report",
        "query_template_metadata": {
            "template_id": "admin_005",
            "template_string": "Build a matrix report of the {object_name} type with name {report_name}. Summarize on the {field_name} column with the {operation} operation. Group row on the {row_group_field} field and group column on the {column_group_field} field. Save it to the public report.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Products",
            "report_name": "ProductMatrixFamilyDate",
            "field_name": "Active",
            "operation": "Sum",
            "row_group_field": "Product Family",
            "column_group_field": "Created Date"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_005_005",
        "query_templated": "Build a matrix report of the Campaigns type with name CampaignMatrixStatusType. Summarize on the Budgeted Cost column with the Min operation. Group row on the Status field and group column on the Type field. Save it to the public report.",
        "query": "Create a matrix report for Campaigns named \u201cCampaignMatrixStatusType.\u201d Summarize Budgeted Cost with the Min operation. Group rows by Status and columns by Type, and place it in Public Reports.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Campaigns",
            "report_name": "CampaignMatrixStatusType",
            "field_name": "m!BUDGETED_COST",
            "operation": "Smallest",
            "row_group_field": "CAMPAIGN_STATUS",
            "column_group_field": "CAMPAIGN_TYPE"
        },
        "difficulty": "medium",
        "query_template_name": "create_matrix_report",
        "query_template_metadata": {
            "template_id": "admin_005",
            "template_string": "Build a matrix report of the {object_name} type with name {report_name}. Summarize on the {field_name} column with the {operation} operation. Group row on the {row_group_field} field and group column on the {column_group_field} field. Save it to the public report.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Report"
            ]
        },
        "instance_dict": {
            "object_name": "Campaigns",
            "report_name": "CampaignMatrixStatusType",
            "field_name": "Budgeted Cost",
            "operation": "Min",
            "row_group_field": "Status",
            "column_group_field": "Type"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_006_001",
        "query_templated": "Create a dashboard with name Big Deals. Add a chart widget using the Required_Opportunities_Report report. The chart type should be Table and set the chart title to Opportunities in Stages. Note that if the Required_Opportunities_Report report does not exist, create it first by following the instructions below. Create a report with the Opportunities type with the name Required_Opportunities_Report. Group by Stage field.",
        "query": "Could you spin up a dashboard called Big Deals? Drop in a chart widget that uses the Required_Opportunities_Report report. Make the type a Table and title the chart Opportunities in Stages. If Required_Opportunities_Report isn\u2019t available, create it first: report type Opportunities, name Required_Opportunities_Report, grouped by the Stage field.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "dashboard_name": "Big Deals",
            "object_name": "Opportunities",
            "report_name": "Required_Opportunities_Report",
            "group_field": "STAGE_NAME",
            "chart_type": "FlexTable",
            "chart_title": "Opportunities in Stages"
        },
        "difficulty": "medium",
        "query_template_name": "create_dashboard",
        "query_template_metadata": {
            "template_id": "admin_006",
            "template_string": "Create a dashboard with name {dashboard_name}. Add a chart widget using the {report_name} report. The chart type should be {chart_type} and set the chart title to {chart_title}. Note that if the {report_name} report does not exist, create it first by following the instructions below. Create a report with the {object_name} type with the name {report_name}. Group by {group_field} field.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Report": [
                            "unfiled$public/Required_Active_Accounts_dV2",
                            "unfiled$public/Required_Cases_by_Priority_7OT",
                            "unfiled$public/Required_Leads_by_Source_hJ7",
                            "unfiled$public/Required_Opportunities_Report_TjH3",
                            "unfiled$public/Required_Products_dHv"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "Dashboard"
            ]
        },
        "instance_dict": {
            "dashboard_name": "Big Deals",
            "object_name": "Opportunities",
            "report_name": "Required_Opportunities_Report",
            "group_field": "Stage",
            "chart_type": "Table",
            "chart_title": "Opportunities in Stages"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_006_002",
        "query_templated": "Create a dashboard with name Sales Performance. Add a chart widget using the Required_Leads_by_Source report. The chart type should be Donut and set the chart title to Leads by Source. Note that if the Required_Leads_by_Source report does not exist, create it first by following the instructions below. Create a report with the Leads type with the name Required_Leads_by_Source. Group by Lead Source field.",
        "query": "Please create a dashboard named Sales Performance. Add a chart widget sourced from the Required_Leads_by_Source report, set the chart type to Donut, and name it Leads by Source. If the Required_Leads_by_Source report isn\u2019t already there, build it first as a Leads report named Required_Leads_by_Source, grouped by Lead Source.",
        "human_review_comment": "Change label to name",
        "ground_truth_dict": {
            "dashboard_name": "Sales Performance",
            "object_name": "Leads",
            "report_name": "Required_Leads_by_Source",
            "group_field": "LEAD_SOURCE",
            "chart_type": "Donut",
            "chart_title": "Leads by Source"
        },
        "difficulty": "medium",
        "query_template_name": "create_dashboard",
        "query_template_metadata": {
            "template_id": "admin_006",
            "template_string": "Create a dashboard with name {dashboard_name}. Add a chart widget using the {report_name} report. The chart type should be {chart_type} and set the chart title to {chart_title}. Note that if the {report_name} report does not exist, create it first by following the instructions below. Create a report with the {object_name} type with the name {report_name}. Group by {group_field} field.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Report": [
                            "unfiled$public/Required_Active_Accounts_dV2",
                            "unfiled$public/Required_Cases_by_Priority_7OT",
                            "unfiled$public/Required_Leads_by_Source_hJ7",
                            "unfiled$public/Required_Opportunities_Report_TjH3",
                            "unfiled$public/Required_Products_dHv"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "Dashboard"
            ]
        },
        "instance_dict": {
            "dashboard_name": "Sales Performance",
            "object_name": "Leads",
            "report_name": "Required_Leads_by_Source",
            "group_field": "Lead Source",
            "chart_type": "Donut",
            "chart_title": "Leads by Source"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_006_003",
        "query_templated": "Create a dashboard with name Case Overview. Add a chart widget using the Required_Cases_by_Priority report. The chart type should be Stacked Bar and set the chart title to Cases by Priority. Note that if the Required_Cases_by_Priority report does not exist, create it first by following the instructions below. Create a report with the Cases type with the name Required_Cases_by_Priority. Group by Priority field.",
        "query": "First, create a new dashboard and give it the name Case Overview.\r\nOn that dashboard, add a chart widget that uses the Required_Cases_by_Priority report.\r\nSet the chart type to Stacked Bar and update the title to Cases by Priority. If the Required_Cases_by_Priority report isn\u2019t already there, you\u2019ll need to make it first:\r\n\r\n1. Create a report with the Cases type.\r\n\r\n2. Name it Required_Cases_by_Priority.\r\n\r\n3. Group the report by the Priority field.",
        "human_review_comment": "rewrite due to semantic issue",
        "ground_truth_dict": {
            "dashboard_name": "Case Overview",
            "object_name": "Cases",
            "report_name": "Required_Cases_by_Priority",
            "group_field": "PRIORITY",
            "chart_type": "Bar",
            "chart_title": "Cases by Priority"
        },
        "difficulty": "medium",
        "query_template_name": "create_dashboard",
        "query_template_metadata": {
            "template_id": "admin_006",
            "template_string": "Create a dashboard with name {dashboard_name}. Add a chart widget using the {report_name} report. The chart type should be {chart_type} and set the chart title to {chart_title}. Note that if the {report_name} report does not exist, create it first by following the instructions below. Create a report with the {object_name} type with the name {report_name}. Group by {group_field} field.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Report": [
                            "unfiled$public/Required_Active_Accounts_dV2",
                            "unfiled$public/Required_Cases_by_Priority_7OT",
                            "unfiled$public/Required_Leads_by_Source_hJ7",
                            "unfiled$public/Required_Opportunities_Report_TjH3",
                            "unfiled$public/Required_Products_dHv"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "Dashboard"
            ]
        },
        "instance_dict": {
            "dashboard_name": "Case Overview",
            "object_name": "Cases",
            "report_name": "Required_Cases_by_Priority",
            "group_field": "Priority",
            "chart_type": "Stacked Bar",
            "chart_title": "Cases by Priority"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_006_004",
        "query_templated": "Create a dashboard with name Account Health. Add a chart widget using the Required Active Accounts report. The chart type should be Column and set the chart title to Active Accounts by Industry. Note that if the Required Active Accounts report does not exist, create it first by following the instructions below. Create a report with the Accounts type with the name Required Active Accounts. Group by Industry field.",
        "query": "Hey, could you please set up a new dashboard called Account Health?\r\nOn it, add a chart widget that pulls from the Required Active Accounts report.\r\nSwitch the chart type to Column, and give it the title Active Accounts by Industry. If the Required Active Accounts report isn\u2019t there yet, no worries \u2014 just create it first:\r\n\r\nBuild a new report with the Accounts type.\r\n\r\nName it Required Active Accounts.\r\n\r\nGroup the data by the Industry field.",
        "human_review_comment": "rewrite due to semantic issue",
        "ground_truth_dict": {
            "dashboard_name": "Account Health",
            "object_name": "Accounts",
            "report_name": "Required Active Accounts",
            "group_field": "INDUSTRY",
            "chart_type": "Column",
            "chart_title": "Active Accounts by Industry"
        },
        "difficulty": "medium",
        "query_template_name": "create_dashboard",
        "query_template_metadata": {
            "template_id": "admin_006",
            "template_string": "Create a dashboard with name {dashboard_name}. Add a chart widget using the {report_name} report. The chart type should be {chart_type} and set the chart title to {chart_title}. Note that if the {report_name} report does not exist, create it first by following the instructions below. Create a report with the {object_name} type with the name {report_name}. Group by {group_field} field.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Report": [
                            "unfiled$public/Required_Active_Accounts_dV2",
                            "unfiled$public/Required_Cases_by_Priority_7OT",
                            "unfiled$public/Required_Leads_by_Source_hJ7",
                            "unfiled$public/Required_Opportunities_Report_TjH3",
                            "unfiled$public/Required_Products_dHv"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "Dashboard"
            ]
        },
        "instance_dict": {
            "dashboard_name": "Account Health",
            "object_name": "Accounts",
            "report_name": "Required Active Accounts",
            "group_field": "Industry",
            "chart_type": "Column",
            "chart_title": "Active Accounts by Industry"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Report / Dashboard",
        "task_id": "admin_006_005",
        "query_templated": "Create a dashboard with name Active Products. Add a chart widget using the Required Products report. The chart type should be Line and set the chart title to Active Products. Note that if the Required Products report does not exist, create it first by following the instructions below. Create a report with the Product2 type with the name Required Products. Group by Active field.",
        "query": "Build a dashboard titled Active Products. Add a chart widget using the Required Products report, set the title to Active Products, and connect it to the Required Products report. If Required Products isn\u2019t present, create it beforehand: report type Product2, name Required Products, grouped by the Active field.",
        "human_review_comment": "Change the semantic order",
        "ground_truth_dict": {
            "dashboard_name": "Active Products",
            "object_name": "Product2",
            "report_name": "Required Products",
            "group_field": "ACTIVE",
            "chart_type": "Line",
            "chart_title": "Active Products"
        },
        "difficulty": "medium",
        "query_template_name": "create_dashboard",
        "query_template_metadata": {
            "template_id": "admin_006",
            "template_string": "Create a dashboard with name {dashboard_name}. Add a chart widget using the {report_name} report. The chart type should be {chart_type} and set the chart title to {chart_title}. Note that if the {report_name} report does not exist, create it first by following the instructions below. Create a report with the {object_name} type with the name {report_name}. Group by {group_field} field.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Report": [
                            "unfiled$public/Required_Active_Accounts_dV2",
                            "unfiled$public/Required_Cases_by_Priority_7OT",
                            "unfiled$public/Required_Leads_by_Source_hJ7",
                            "unfiled$public/Required_Opportunities_Report_TjH3",
                            "unfiled$public/Required_Products_dHv"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "Dashboard"
            ]
        },
        "instance_dict": {
            "dashboard_name": "Active Products",
            "object_name": "Product2",
            "report_name": "Required Products",
            "group_field": "Active",
            "chart_type": "Line",
            "chart_title": "Active Products"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Dynamic Forms",
        "task_id": "admin_007_001",
        "query_templated": "Create a dynamic form on the Account object. The field AnnualRevenue should be visible only when Active's value equals Yes.",
        "query": "On the Account object, set up a dynamic form and AnnualRevenue only shows up when the Active field is set to Yes; otherwise keep it hidden.",
        "human_review_comment": "Change the logic",
        "ground_truth_dict": {
            "object_name": "Account",
            "field_name": "Record.AnnualRevenue",
            "field_2": "{!Record.Active__c}",
            "operator": "EQUAL",
            "value": "Yes"
        },
        "difficulty": "medium",
        "query_template_name": "create_dynamic_forms",
        "query_template_metadata": {
            "template_id": "admin_007",
            "template_string": "Create a dynamic form on the {object_name} object. The field {field_name} should be visible only when {field_2}'s value {operator} {value}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "FlexiPage"
            ]
        },
        "instance_dict": {
            "object_name": "Account",
            "field_name": "AnnualRevenue",
            "field_2": "Active",
            "operator": "equals",
            "value": "Yes"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Dynamic Forms",
        "task_id": "admin_007_002",
        "query_templated": "Create a dynamic form on the Contact object. The field MobilePhone should be visible only when DoNotCall's value equals false.",
        "query": "Could you please set up a dynamic form on the Contact object?\r\nMake sure the MobilePhone field only shows up when DoNotCall is set to false.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "object_name": "Contact",
            "field_name": "Record.MobilePhone",
            "field_2": "{!Record.DoNotCall}",
            "operator": "EQUAL",
            "value": "false"
        },
        "difficulty": "medium",
        "query_template_name": "create_dynamic_forms",
        "query_template_metadata": {
            "template_id": "admin_007",
            "template_string": "Create a dynamic form on the {object_name} object. The field {field_name} should be visible only when {field_2}'s value {operator} {value}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "FlexiPage"
            ]
        },
        "instance_dict": {
            "object_name": "Contact",
            "field_name": "MobilePhone",
            "field_2": "DoNotCall",
            "operator": "equals",
            "value": "false"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Dynamic Forms",
        "task_id": "admin_007_003",
        "query_templated": "Create a dynamic form on the Lead object. The field NumberOfEmployees should be visible only when NumberOfEmployees's value greater_than 5000.",
        "query": "Please set up a dynamic form on the Lead object.\r\nKeep the NumberOfEmployees field hidden by default, and only make it visible if its value is greater than 5,000.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "object_name": "Lead",
            "field_name": "Record.NumberOfEmployees",
            "field_2": "{!Record.NumberOfEmployees}",
            "operator": "GT",
            "value": "5000"
        },
        "difficulty": "medium",
        "query_template_name": "create_dynamic_forms",
        "query_template_metadata": {
            "template_id": "admin_007",
            "template_string": "Create a dynamic form on the {object_name} object. The field {field_name} should be visible only when {field_2}'s value {operator} {value}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "FlexiPage"
            ]
        },
        "instance_dict": {
            "object_name": "Lead",
            "field_name": "NumberOfEmployees",
            "field_2": "NumberOfEmployees",
            "operator": "greater_than",
            "value": 5000
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Dynamic Forms",
        "task_id": "admin_007_004",
        "query_templated": "Create a dynamic form on the Opportunity object. The field ExpectedRevenue should be visible only when Amount's value less than 500.",
        "query": "Configure the Opportunity dynamic form so ExpectedRevenue appears only when Amount is less than 500; hide it for 500 and above.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Opportunity",
            "field_name": "Record.ExpectedRevenue",
            "field_2": "{!Record.Amount}",
            "operator": "LT",
            "value": "500"
        },
        "difficulty": "medium",
        "query_template_name": "create_dynamic_forms",
        "query_template_metadata": {
            "template_id": "admin_007",
            "template_string": "Create a dynamic form on the {object_name} object. The field {field_name} should be visible only when {field_2}'s value {operator} {value}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "FlexiPage"
            ]
        },
        "instance_dict": {
            "object_name": "Opportunity",
            "field_name": "ExpectedRevenue",
            "field_2": "Amount",
            "operator": "less than",
            "value": 500
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Dynamic Forms",
        "task_id": "admin_007_005",
        "query_templated": "Create a dynamic form on the Case object. The field Priority should be visible only when Subject's value contains Important.",
        "query": "Create a dynamic form on the Case object where the Priority field is only visible if the Subject contains \u201cImportant\u201d.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "object_name": "Case",
            "field_name": "Record.Priority",
            "field_2": "{!Record.Subject}",
            "operator": "CONTAINS",
            "value": "Important"
        },
        "difficulty": "medium",
        "query_template_name": "create_dynamic_forms",
        "query_template_metadata": {
            "template_id": "admin_007",
            "template_string": "Create a dynamic form on the {object_name} object. The field {field_name} should be visible only when {field_2}'s value {operator} {value}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "FlexiPage"
            ]
        },
        "instance_dict": {
            "object_name": "Case",
            "field_name": "Priority",
            "field_2": "Subject",
            "operator": "contains",
            "value": "Important"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_008_001",
        "query_templated": "Create a list view of records of the Opportunity object. The list is named as High Probability Opportunities. Select records whose Stage is equals Proposal/Price Quote and whose Probability (%) is greater or equal 50.  All Users should be able to see the list view.",
        "query": "Create a list view on the Opportunity object named High Probability Opportunities that shows records where Stage = Proposal/Price Quote and Probability (%) \u2265 50, and make it visible to All Users.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "object_name": "Opportunity",
            "list_name": "High Probability Opportunities",
            "key1": "OPPORTUNITY.STAGE_NAME",
            "key2": "OPPORTUNITY.PROBABILITY",
            "operator1": "equals",
            "operator2": "greaterOrEqual",
            "value1": "Proposal/Price Quote",
            "value2": "50.0"
        },
        "difficulty": "easy",
        "query_template_name": "create_list_view",
        "query_template_metadata": {
            "template_id": "admin_008",
            "template_string": "Create a list view of records of the {object_name} object. The list is named as {list_name}. Select records whose {key1} is {operator1} {value1} and whose {key2} is {operator2} {value2}.  All Users should be able to see the list view.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ListView"
            ]
        },
        "instance_dict": {
            "object_name": "Opportunity",
            "list_name": "High Probability Opportunities",
            "key1": "Stage",
            "key2": "Probability (%)",
            "operator1": "equals",
            "operator2": "greater or equal",
            "value1": "Proposal/Price Quote",
            "value2": 50
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_008_002",
        "query_templated": "Create a list view of records of the Contact object. The list is named as Executive Decision Makers. Select records whose Title is equals CEO and whose Lead Source is equals Web.  All Users should be able to see the list view.",
        "query": "On the Contact object, set up a public list view named Executive Decision Makers that shows only records with Title exactly CEO and Lead Source set to Web.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Contact",
            "list_name": "Executive Decision Makers",
            "key1": "TITLE",
            "key2": "LEAD_SOURCE",
            "operator1": "equals",
            "value1": "CEO",
            "operator2": "equals",
            "value2": "Web"
        },
        "difficulty": "easy",
        "query_template_name": "create_list_view",
        "query_template_metadata": {
            "template_id": "admin_008",
            "template_string": "Create a list view of records of the {object_name} object. The list is named as {list_name}. Select records whose {key1} is {operator1} {value1} and whose {key2} is {operator2} {value2}.  All Users should be able to see the list view.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ListView"
            ]
        },
        "instance_dict": {
            "object_name": "Contact",
            "list_name": "Executive Decision Makers",
            "key1": "Title",
            "key2": "Lead Source",
            "operator1": "equals",
            "value1": "CEO",
            "operator2": "equals",
            "value2": "Web"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_008_003",
        "query_templated": "Create a list view of records of the Task object. The list is named as Overdue Follow-Ups. Select records whose Status is equals Not Started and whose Due Date is less than today.  All Users should be able to see the list view.",
        "query": "Create a list view on the Task object named Overdue Follow-Ups that shows records where Status = Not Started and Due Date < Today, and make it visible to All Users.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "object_name": "Task",
            "list_name": "Overdue Follow-Ups",
            "key1": "Status",
            "operator1": "equals",
            "value1": "Not Started",
            "key2": "Due Date",
            "operator2": "less than",
            "value2": "today"
        },
        "difficulty": "easy",
        "query_template_name": "create_list_view",
        "query_template_metadata": {
            "template_id": "admin_008",
            "template_string": "Create a list view of records of the {object_name} object. The list is named as {list_name}. Select records whose {key1} is {operator1} {value1} and whose {key2} is {operator2} {value2}.  All Users should be able to see the list view.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ListView"
            ]
        },
        "instance_dict": {
            "object_name": "Task",
            "list_name": "Overdue Follow-Ups",
            "key1": "Status",
            "operator1": "equals",
            "value1": "Not Started",
            "key2": "Due Date",
            "operator2": "less than",
            "value2": "today"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_008_004",
        "query_templated": "Create a list view of records of the Case object. The list is named as Escalated Support Cases. Select records whose Priority is equals High and whose Status is equals Escalated.  All Users should be able to see the list view.",
        "query": "I need a Case list view called Escalated Support Cases that filters strictly to Priority = High and Status = Escalated. Make sure the view is available to all users.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Case",
            "list_name": "Escalated Support Cases",
            "key1": "CASES.PRIORITY",
            "operator1": "equals",
            "value1": "High",
            "key2": "CASES.STATUS",
            "operator2": "equals",
            "value2": "Escalated"
        },
        "difficulty": "easy",
        "query_template_name": "create_list_view",
        "query_template_metadata": {
            "template_id": "admin_008",
            "template_string": "Create a list view of records of the {object_name} object. The list is named as {list_name}. Select records whose {key1} is {operator1} {value1} and whose {key2} is {operator2} {value2}.  All Users should be able to see the list view.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ListView"
            ]
        },
        "instance_dict": {
            "object_name": "Case",
            "list_name": "Escalated Support Cases",
            "key1": "Priority",
            "operator1": "equals",
            "value1": "High",
            "key2": "Status",
            "operator2": "equals",
            "value2": "Escalated"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_008_005",
        "query_templated": "Create a list view of records of the Account object. The list is named as Filtered Accounts. Select records whose Billing State/Province is equals New York and whose Type is not equal to Prospect.  All Users should be able to see the list view.",
        "query": "Create an Account list view named Filtered Accounts. Apply filters for Billing State/Province equals New York and Type not equal to Prospect, and share the view with all users.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Account",
            "list_name": "Filtered Accounts",
            "key1": "ACCOUNT.ADDRESS1_STATE_CODE",
            "operator1": "equals",
            "value1": "NY",
            "key2": "ACCOUNT.TYPE",
            "operator2": "notEqual",
            "value2": "Prospect"
        },
        "difficulty": "easy",
        "query_template_name": "create_list_view",
        "query_template_metadata": {
            "template_id": "admin_008",
            "template_string": "Create a list view of records of the {object_name} object. The list is named as {list_name}. Select records whose {key1} is {operator1} {value1} and whose {key2} is {operator2} {value2}.  All Users should be able to see the list view.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ListView"
            ]
        },
        "instance_dict": {
            "object_name": "Account",
            "list_name": "Filtered Accounts",
            "key1": "Billing State/Province",
            "operator1": "equals",
            "value1": "New York",
            "key2": "Type",
            "operator2": "not equal to",
            "value2": "Prospect"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_008_006",
        "query_templated": "Create a list view of records of the Lead object. The list is named as Marketing Qualified Leads. Select records whose Lead Status is equals Open - Not Contacted and whose Rating is equals Hot.  All Users should be able to see the list view.",
        "query": "Let\u2019s add a Lead list view named Marketing Qualified Leads that only returns records where Lead Status is Open - Not Contacted and Rating is Hot. Set the visibility to all users.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Lead",
            "list_name": "Marketing Qualified Leads",
            "key1": "LEAD.STATUS",
            "operator1": "equals",
            "value1": "Open - Not Contacted",
            "key2": "LEAD.RATING",
            "operator2": "equals",
            "value2": "Hot"
        },
        "difficulty": "easy",
        "query_template_name": "create_list_view",
        "query_template_metadata": {
            "template_id": "admin_008",
            "template_string": "Create a list view of records of the {object_name} object. The list is named as {list_name}. Select records whose {key1} is {operator1} {value1} and whose {key2} is {operator2} {value2}.  All Users should be able to see the list view.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ListView"
            ]
        },
        "instance_dict": {
            "object_name": "Lead",
            "list_name": "Marketing Qualified Leads",
            "key1": "Lead Status",
            "operator1": "equals",
            "value1": "Open - Not Contacted",
            "key2": "Rating",
            "operator2": "equals",
            "value2": "Hot"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_009_001",
        "query_templated": "Create a list view of records of the Opportunity object. The list is named as ByAmount. Include only Account Name and Amount field.  The list view should only be accessible to 'CFO' and 'Channel Sales Team'.",
        "query": "Please create a new list view on the Opportunity object named ByAmount. Show only two columns\u2014Account Name and Amount\u2014and make it visible exclusively to the \"CFO\" and the \"Channel Sales Team\".",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Opportunity",
            "list_view_name": "ByAmount",
            "field1": "ACCOUNT.NAME",
            "field2": "OPPORTUNITY.AMOUNT",
            "users": [
                "CFO",
                "ChannelSalesTeam"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_list_view_share",
        "query_template_metadata": {
            "template_id": "admin_009",
            "template_string": "Create a list view of records of the {object_name} object. The list is named as {list_view_name}. Include only {field1} and {field2} field.  The list view should only be accessible to {users}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Group"
                    ]
                }
            },
            "objects": [],
            "metadata_types": [
                "ListView"
            ]
        },
        "instance_dict": {
            "object_name": "Opportunity",
            "list_view_name": "ByAmount",
            "field1": "Account Name",
            "field2": "Amount",
            "users": "'CFO' and 'Channel Sales Team'"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_009_002",
        "query_templated": "Create a list view of records of the Case object. The list is named as AllCasesByPriority. Include only Case Number and Priority field.  The list view should only be accessible to 'Customer Support, International', 'Project Lead' and 'Customer Support, North America'.",
        "query": "Please create a list view for the Case object called AllCasesByPriority with exactly these columns: Case Number and Priority. Limit access so only \"Customer Support, International\", \"Project Lead\", and \"Customer Support, North America\" can see it.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Case",
            "list_view_name": "AllCasesByPriority",
            "field1": "CASES.CASE_NUMBER",
            "field2": "CASES.PRIORITY",
            "users": [
                "CustomerSupportInternational",
                "Project_Lead",
                "CustomerSupportNorthAmerica"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_list_view_share",
        "query_template_metadata": {
            "template_id": "admin_009",
            "template_string": "Create a list view of records of the {object_name} object. The list is named as {list_view_name}. Include only {field1} and {field2} field.  The list view should only be accessible to {users}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Group"
                    ]
                }
            },
            "objects": [],
            "metadata_types": [
                "ListView"
            ]
        },
        "instance_dict": {
            "object_name": "Case",
            "list_view_name": "AllCasesByPriority",
            "field1": "Case Number",
            "field2": "Priority",
            "users": "'Customer Support, International', 'Project Lead' and 'Customer Support, North America'"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_009_003",
        "query_templated": "Create a list view of records of the Account object. The list is named as Sales Accounts. Include only Name and Industry field.  The list view should only be accessible to 'Account Avengers' and 'Lead Legends'.",
        "query": "Could you set up an Account list view named Sales Accounts that displays only the Name and Industry fields, and restrict its visibility to just the \"Account Avengers\" and the \"Lead Legends\"?",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Account",
            "list_view_name": "Sales Accounts",
            "field1": "ACCOUNT.NAME",
            "field2": "ACCOUNT.INDUSTRY",
            "users": [
                "Account_Avengers",
                "Lead_Legends"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_list_view_share",
        "query_template_metadata": {
            "template_id": "admin_009",
            "template_string": "Create a list view of records of the {object_name} object. The list is named as {list_view_name}. Include only {field1} and {field2} field.  The list view should only be accessible to {users}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Group"
                    ]
                }
            },
            "objects": [],
            "metadata_types": [
                "ListView"
            ]
        },
        "instance_dict": {
            "object_name": "Account",
            "list_view_name": "Sales Accounts",
            "field1": "Name",
            "field2": "Industry",
            "users": "'Account Avengers' and 'Lead Legends'"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_009_004",
        "query_templated": "Create a list view of records of the Contact object. The list is named as Support Contacts. Include only FirstName and Email field.  The list view should only be accessible to 'Contact Crusaders' and 'Case Commandos'.",
        "query": "On the Contact object, build a list view titled Support Contacts. The columns should be strictly FirstName and Email\u2014no others. Share it only with \"Contact Crusaders\" and \"Case Commandos\".",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Contact",
            "list_view_name": "Support Contacts",
            "field1": "CONTACT.FIRST_NAME",
            "field2": "CONTACT.EMAIL",
            "users": [
                "Contact_Crusaders",
                "Case_Commandos"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_list_view_share",
        "query_template_metadata": {
            "template_id": "admin_009",
            "template_string": "Create a list view of records of the {object_name} object. The list is named as {list_view_name}. Include only {field1} and {field2} field.  The list view should only be accessible to {users}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Group"
                    ]
                }
            },
            "objects": [],
            "metadata_types": [
                "ListView"
            ]
        },
        "instance_dict": {
            "object_name": "Contact",
            "list_view_name": "Support Contacts",
            "field1": "FirstName",
            "field2": "Email",
            "users": "'Contact Crusaders' and 'Case Commandos'"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_009_005",
        "query_templated": "Create a list view of records of the Lead object. The list is named as Qualified Leads. Include only Company and Phone field.  The list view should only be accessible to 'Lead Legends' and 'Opportunity Oracles'.",
        "query": "For the Lead object, I need a minimal list view called Qualified Leads that includes just Company and Phone. Lock it down so only \"Lead Legends\" and \"Opportunity Oracles\" have access.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Lead",
            "list_view_name": "Qualified Leads",
            "field1": "LEAD.COMPANY",
            "field2": "LEAD.PHONE",
            "users": [
                "Lead_Legends",
                "Opportunity_Oracles"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_list_view_share",
        "query_template_metadata": {
            "template_id": "admin_009",
            "template_string": "Create a list view of records of the {object_name} object. The list is named as {list_view_name}. Include only {field1} and {field2} field.  The list view should only be accessible to {users}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Group"
                    ]
                }
            },
            "objects": [],
            "metadata_types": [
                "ListView"
            ]
        },
        "instance_dict": {
            "object_name": "Lead",
            "list_view_name": "Qualified Leads",
            "field1": "Company",
            "field2": "Phone",
            "users": "'Lead Legends' and 'Opportunity Oracles'"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_010_001",
        "query_templated": "Create a Donut chart named By Amount for the Opportunity object, under the All Opportunities list view. Aggregated on the Amount field by Sum. The grouping field should be Account.Name.",
        "query": "Build a donut chart titled \"By Amount\" on the Opportunity object\u2019s All Opportunities list view. Sum the Amount field and group the slices by Account.Name.",
        "human_review_comment": "Change spin up",
        "ground_truth_dict": {
            "object_name": "Opportunity",
            "chart_name": "By Amount",
            "list_name": "All Opportunities",
            "aggregate_field": "Opportunity.Amount",
            "aggregate_type": "Sum",
            "grouping_field": "Opportunity.AccountId",
            "chart_type": "pie"
        },
        "difficulty": "hard",
        "query_template_name": "create_chart_for_list_view",
        "query_template_metadata": {
            "template_id": "admin_010",
            "template_string": "Create a {chart_type} chart named {chart_name} for the {object_name} object, under the {list_name} list view. Aggregated on the {aggregate_field} field by {aggregate_type}. The grouping field should be {grouping_field}.",
            "prerequisites": {},
            "objects": [
                "ListViewChart"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "object_name": "Opportunity",
            "chart_name": "By Amount",
            "list_name": "All Opportunities",
            "aggregate_field": "Amount",
            "aggregate_type": "Sum",
            "grouping_field": "Account.Name",
            "chart_type": "Donut"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_010_002",
        "query_templated": "Create a Vertical Bar chart named Accounts by Revenue for the Accounts object, under the All Accounts list view. Aggregated on the Annual Revenue field by Sum. The grouping field should be Account Name.",
        "query": "Create a Vertical Bar chart named Accounts by Revenue on the Accounts object under the All Accounts list view, aggregated on Annual Revenue (Sum) and grouped by Account Name.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "object_name": "Account",
            "chart_name": "Accounts by Revenue",
            "list_name": "All Accounts",
            "aggregate_field": "Account.AnnualRevenue",
            "aggregate_type": "Sum",
            "grouping_field": "Account.Name",
            "chart_type": "vbar"
        },
        "difficulty": "hard",
        "query_template_name": "create_chart_for_list_view",
        "query_template_metadata": {
            "template_id": "admin_010",
            "template_string": "Create a {chart_type} chart named {chart_name} for the {object_name} object, under the {list_name} list view. Aggregated on the {aggregate_field} field by {aggregate_type}. The grouping field should be {grouping_field}.",
            "prerequisites": {},
            "objects": [
                "ListViewChart"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "object_name": "Accounts",
            "chart_name": "Accounts by Revenue",
            "list_name": "All Accounts",
            "aggregate_field": "Annual Revenue",
            "aggregate_type": "Sum",
            "grouping_field": "Account Name",
            "chart_type": "Vertical Bar"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_010_003",
        "query_templated": "Create a Vertical Bar chart named Number of Sources for converted opportunities for the Leads object, under the All Open Leads list view. Aggregated on the Lead Source field by Count. The grouping field should be Converted Opportunity.",
        "query": "I want to visualize how many lead sources are tied to converted opportunities. Build a Vertical Bar chart called \"Number of Sources for converted opportunities\" on the Leads object under the All Open Leads list view. Use Count on the Lead Source field and group the results by Converted Opportunity.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Lead",
            "chart_name": "Number of Sources for converted opportunities",
            "list_name": "All Open Leads",
            "aggregate_field": "Lead.LeadSource",
            "aggregate_type": "Count",
            "grouping_field": "Lead.ConvertedOpportunityId",
            "chart_type": "vbar"
        },
        "difficulty": "hard",
        "query_template_name": "create_chart_for_list_view",
        "query_template_metadata": {
            "template_id": "admin_010",
            "template_string": "Create a {chart_type} chart named {chart_name} for the {object_name} object, under the {list_name} list view. Aggregated on the {aggregate_field} field by {aggregate_type}. The grouping field should be {grouping_field}.",
            "prerequisites": {},
            "objects": [
                "ListViewChart"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "object_name": "Leads",
            "chart_name": "Number of Sources for converted opportunities",
            "list_name": "All Open Leads",
            "aggregate_field": "Lead Source",
            "aggregate_type": "Count",
            "grouping_field": "Converted Opportunity",
            "chart_type": "Vertical Bar"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_010_004",
        "query_templated": "Create a Horizontal Bar chart named Accounts by Reason for the Cases object, under the All Open Cases list view. Aggregated on the Account Name field by Count. The grouping field should be Case Reason.",
        "query": "For Cases \u2192 All Open Cases, add a Horizontal Bar chart named \"Accounts by Reason.\" Count using the Account Name field as the aggregate, and group the chart by Case Reason.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Case",
            "chart_name": "Accounts by Reason",
            "list_name": "All Open Cases",
            "aggregate_field": "Case.AccountId",
            "aggregate_type": "Count",
            "grouping_field": "Case.Reason",
            "chart_type": "hbar"
        },
        "difficulty": "hard",
        "query_template_name": "create_chart_for_list_view",
        "query_template_metadata": {
            "template_id": "admin_010",
            "template_string": "Create a {chart_type} chart named {chart_name} for the {object_name} object, under the {list_name} list view. Aggregated on the {aggregate_field} field by {aggregate_type}. The grouping field should be {grouping_field}.",
            "prerequisites": {},
            "objects": [
                "ListViewChart"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "object_name": "Cases",
            "chart_name": "Accounts by Reason",
            "list_name": "All Open Cases",
            "aggregate_field": "Account Name",
            "aggregate_type": "Count",
            "grouping_field": "Case Reason",
            "chart_type": "Horizontal Bar"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "List view",
        "task_id": "admin_010_005",
        "query_templated": "Create a Horizontal Bar chart chart named Average orders by Type for the Order object, under the All Orders list view. Aggregated on the Order Amount field by Average. The grouping field should be Order Type.",
        "query": "Create a Horizontal Bar chart called \"Average orders by Type\" on the Order object under the All Orders list view. Calculate the Average of Order Amount and group by Order Type.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Order",
            "chart_name": "Average orders by Type",
            "list_name": "All Orders",
            "aggregate_field": "Order.TotalAmount",
            "aggregate_type": "Avg",
            "grouping_field": "Order.Type",
            "chart_type": "hbar"
        },
        "difficulty": "hard",
        "query_template_name": "create_chart_for_list_view",
        "query_template_metadata": {
            "template_id": "admin_010",
            "template_string": "Create a {chart_type} chart named {chart_name} for the {object_name} object, under the {list_name} list view. Aggregated on the {aggregate_field} field by {aggregate_type}. The grouping field should be {grouping_field}.",
            "prerequisites": {},
            "objects": [
                "ListViewChart"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "object_name": "Order",
            "chart_name": "Average orders by Type",
            "list_name": "All Orders",
            "aggregate_field": "Order Amount",
            "aggregate_type": "Average",
            "grouping_field": "Order Type",
            "chart_type": "Horizontal Bar chart"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Lightning App",
        "task_id": "admin_011_001",
        "query_templated": "Create an app with name Energy Consultations. Choose Task, Contact objects from available items as the navigation items. For User Profiles, choose the System Administrator, Custom: Sales Profile from the available profiles. Leave the rest required fields as the default.",
        "query": "Spin up a new app named Energy Consultations. Add Task and Contact to the navigation bar from the available items list. In User Profiles, select System Administrator, Custom: Sales Profile from the available profiles. Keep all other required fields at their default values.",
        "human_review_comment": "Change signal",
        "ground_truth_dict": {
            "app_name": "Energy Consultations",
            "comma_separated_objects_list": "Task, Contact",
            "comma_separated_user_profiles": "Admin, Custom%3A Sales Profile"
        },
        "difficulty": "hard",
        "query_template_name": "create_app",
        "query_template_metadata": {
            "template_id": "admin_011",
            "template_string": "Create an app with name {app_name}. Choose {comma_separated_objects_list} objects from available items as the navigation items. For User Profiles, choose the {comma_separated_user_profiles} from the available profiles. Leave the rest required fields as the default.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomApplication"
            ]
        },
        "instance_dict": {
            "app_name": "Energy Consultations",
            "comma_separated_objects_list": "Task, Contact",
            "comma_separated_user_profiles": "System Administrator, Custom: Sales Profile"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Lightning App",
        "task_id": "admin_011_002",
        "query_templated": "Create an app with name Customer Service. Choose Customers, Analytics objects from available items as the navigation items. For User Profiles, choose the Customer Portal Manager (Standard), Standard User, Custom: Support Profile from the available profiles. Leave the rest required fields as the default.",
        "query": "Create an app named Customer Service with navigation items Customers and Analytics, assign User Profile as Customer Portal Manager (Standard), Standard User, and Custom: Support Profile profiles, and leave all other required fields as default.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "app_name": "Customer Service",
            "comma_separated_objects_list": "Customer, WaveHomeLightning",
            "comma_separated_user_profiles": "Customer Portal Manager Standard, Standard, Custom%3A Support Profile"
        },
        "difficulty": "hard",
        "query_template_name": "create_app",
        "query_template_metadata": {
            "template_id": "admin_011",
            "template_string": "Create an app with name {app_name}. Choose {comma_separated_objects_list} objects from available items as the navigation items. For User Profiles, choose the {comma_separated_user_profiles} from the available profiles. Leave the rest required fields as the default.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomApplication"
            ]
        },
        "instance_dict": {
            "app_name": "Customer Service",
            "comma_separated_objects_list": "Customers, Analytics",
            "comma_separated_user_profiles": "Customer Portal Manager (Standard), Standard User, Support User"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Lightning App",
        "task_id": "admin_011_003",
        "query_templated": "Create an app with name Administration. Choose Case, Report objects from available items as the navigation items. For User Profiles, choose the Partner Community User, Analytics Cloud Integration User from the available profiles. Leave the rest required fields as the default.",
        "query": "First, create an app named Administration. Next, add Case and Report to its navigation from the available items. Then, under User Profiles, choose Partner Community User and Analytics Cloud Integration User from the available profiles. Finally, leave all remaining required fields at their default settings.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "app_name": "Administration",
            "comma_separated_objects_list": "Case, report",
            "comma_separated_user_profiles": "Partner Community User, Analytics Cloud Integration User"
        },
        "difficulty": "hard",
        "query_template_name": "create_app",
        "query_template_metadata": {
            "template_id": "admin_011",
            "template_string": "Create an app with name {app_name}. Choose {comma_separated_objects_list} objects from available items as the navigation items. For User Profiles, choose the {comma_separated_user_profiles} from the available profiles. Leave the rest required fields as the default.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomApplication"
            ]
        },
        "instance_dict": {
            "app_name": "Administration",
            "comma_separated_objects_list": "Case, Report",
            "comma_separated_user_profiles": "Partner Community User, Analytics Cloud Integration User"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Lightning App",
        "task_id": "admin_011_004",
        "query_templated": "Create an app with name Sales Customized App. Choose Lead, Product objects from available items as the navigation items. For User Profiles, choose the Standard User, Contract Manager from the available profiles. Leave the rest required fields as the default.",
        "query": "Please provision a new app titled Sales Customized App. For the nav items, include only Lead and Product from the available items. From the available profiles, assign Standard User and Contract Manager. Everything else should stay on the default required values.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "app_name": "Sales Customized App",
            "comma_separated_objects_list": "Lead, Product2",
            "comma_separated_user_profiles": "Standard, ContractManager"
        },
        "difficulty": "hard",
        "query_template_name": "create_app",
        "query_template_metadata": {
            "template_id": "admin_011",
            "template_string": "Create an app with name {app_name}. Choose {comma_separated_objects_list} objects from available items as the navigation items. For User Profiles, choose the {comma_separated_user_profiles} from the available profiles. Leave the rest required fields as the default.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomApplication"
            ]
        },
        "instance_dict": {
            "app_name": "Sales Customized App",
            "comma_separated_objects_list": "Lead, Product",
            "comma_separated_user_profiles": "Standard User, Contract Manager"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Lightning App",
        "task_id": "admin_011_005",
        "query_templated": "Create an app with name Highly Customized Service App. Choose Case, Incident objects from available items as the navigation items. For User Profiles, choose the Solution Manager, Minimum Access - Salesforce from the available profiles. Leave the rest required fields as the default.",
        "query": "I\u2019d like to roll out an app called Highly Customized Service App. Put Case and Incident on the navigation menu, picking them from the available items list. In User Profiles, select Solution Manager and Minimum Access - Salesforce from the available profiles. Leave the rest of the required fields untouched\u2014use the defaults.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "app_name": "Highly Customized Service App",
            "comma_separated_objects_list": "Case, Incident",
            "comma_separated_user_profiles": "SolutionManager, Minimum Access - Salesforce"
        },
        "difficulty": "hard",
        "query_template_name": "create_app",
        "query_template_metadata": {
            "template_id": "admin_011",
            "template_string": "Create an app with name {app_name}. Choose {comma_separated_objects_list} objects from available items as the navigation items. For User Profiles, choose the {comma_separated_user_profiles} from the available profiles. Leave the rest required fields as the default.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomApplication"
            ]
        },
        "instance_dict": {
            "app_name": "Highly Customized Service App",
            "comma_separated_objects_list": "Case, Incident",
            "comma_separated_user_profiles": "Solution Manager, Minimum Access - Salesforce"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Tab",
        "task_id": "admin_012_001",
        "query_templated": "Create a custom tab for a custom object MyAnimal. Choose the Sun tab style. Make the tab visible  to only System Administrator profile and can only be accssed through the Sales App.",
        "query": "Create a custom tab for the MyAnimal object, use the Sun tab style, restrict visibility to the System Administrator profile only, and make it available exclusively inside the Sales App.",
        "human_review_comment": "change spin up",
        "ground_truth_dict": {
            "object_name": "MyAnimal",
            "tab_style": "Custom3: Sun",
            "profile_name": "Admin",
            "app_name": "standard__Sales"
        },
        "difficulty": "hard",
        "query_template_name": "create_custom_tab",
        "query_template_metadata": {
            "template_id": "admin_012",
            "template_string": "Create a custom tab for a custom object {object_name}. Choose the {tab_style} tab style. Make the tab visible  to only {profile_name} profile and can only be accssed through the {app_name} App.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomField": [
                            "MyAnimal__c.Breed__c",
                            "Environment__c.Age__c",
                            "MyBike__c.Brand__c",
                            "MyVehicle__c.NumWheels__c",
                            "MyInventory__c.StockLevel__c"
                        ],
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyVehicle__c",
                            "MyInventory__c"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomTab"
            ]
        },
        "instance_dict": {
            "object_name": "MyAnimal",
            "tab_style": "Sun",
            "profile_name": "System Administrator",
            "app_name": "Sales"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Tab",
        "task_id": "admin_012_002",
        "query_templated": "Create a custom tab for a custom object MyBike. Choose the Books tab style. Make the tab visible  to only External Apps User profile and can only be accssed through the Platform App.",
        "query": "I need a MyBike custom tab using the Books style; hide it from everyone except the External Apps User profile, and surface it only in the Platform App.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "MyBike",
            "tab_style": "Custom55: Books",
            "profile_name": "External Apps Login User",
            "app_name": "standard__Platform"
        },
        "difficulty": "hard",
        "query_template_name": "create_custom_tab",
        "query_template_metadata": {
            "template_id": "admin_012",
            "template_string": "Create a custom tab for a custom object {object_name}. Choose the {tab_style} tab style. Make the tab visible  to only {profile_name} profile and can only be accssed through the {app_name} App.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomField": [
                            "MyAnimal__c.Breed__c",
                            "Environment__c.Age__c",
                            "MyBike__c.Brand__c",
                            "MyVehicle__c.NumWheels__c",
                            "MyInventory__c.StockLevel__c"
                        ],
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyVehicle__c",
                            "MyInventory__c"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomTab"
            ]
        },
        "instance_dict": {
            "object_name": "MyBike",
            "tab_style": "Books",
            "profile_name": "External Apps User",
            "app_name": "Platform"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Tab",
        "task_id": "admin_012_003",
        "query_templated": "Create a custom tab for a custom object MyVehicle. Choose the Truck tab style. Make the tab visible  to only Marketing User profile and can only be accssed through the Marketing CRM Classsic App.",
        "query": "Add a custom tab for MyVehicle, pick the Truck tab style, and lock it so it\u2019s visible to the Marketing User profile only\u2014accessible solely via the Marketing CRM Classsic App.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "MyVehicle",
            "tab_style": "Custom98: Truck",
            "profile_name": "MarketingProfile",
            "app_name": "standard__Marketing"
        },
        "difficulty": "hard",
        "query_template_name": "create_custom_tab",
        "query_template_metadata": {
            "template_id": "admin_012",
            "template_string": "Create a custom tab for a custom object {object_name}. Choose the {tab_style} tab style. Make the tab visible  to only {profile_name} profile and can only be accssed through the {app_name} App.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomField": [
                            "MyAnimal__c.Breed__c",
                            "Environment__c.Age__c",
                            "MyBike__c.Brand__c",
                            "MyVehicle__c.NumWheels__c",
                            "MyInventory__c.StockLevel__c"
                        ],
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyVehicle__c",
                            "MyInventory__c"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomTab"
            ]
        },
        "instance_dict": {
            "object_name": "MyVehicle",
            "tab_style": "Truck",
            "profile_name": "Marketing User",
            "app_name": "Marketing CRM Classsic"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Tab",
        "task_id": "admin_012_004",
        "query_templated": "Create a custom tab for a custom object Environment. Choose the Books tab style. Make the tab visible  to only Solution Manager profile and can only be accssed through the Service App.",
        "query": "Do this for Environment: create a custom tab, style it with Books, grant visibility solely to the Solution Manager profile, and constrain it to the Service App.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Environment",
            "tab_style": "Custom55: Books",
            "profile_name": "SolutionManager",
            "app_name": "standard__Service"
        },
        "difficulty": "hard",
        "query_template_name": "create_custom_tab",
        "query_template_metadata": {
            "template_id": "admin_012",
            "template_string": "Create a custom tab for a custom object {object_name}. Choose the {tab_style} tab style. Make the tab visible  to only {profile_name} profile and can only be accssed through the {app_name} App.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomField": [
                            "MyAnimal__c.Breed__c",
                            "Environment__c.Age__c",
                            "MyBike__c.Brand__c",
                            "MyVehicle__c.NumWheels__c",
                            "MyInventory__c.StockLevel__c"
                        ],
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyVehicle__c",
                            "MyInventory__c"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomTab"
            ]
        },
        "instance_dict": {
            "object_name": "Environment",
            "tab_style": "Books",
            "profile_name": "Solution Manager",
            "app_name": "Service"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Tab",
        "task_id": "admin_012_005",
        "query_templated": "Create a custom tab for a custom object MyInventory. Choose the Box tab style. Make the tab visible  to only Contract Manager profile and can only be accssed through the Approvals App.",
        "query": "Please provision a custom tab for MyInventory with the Box look, visible only to the Contract Manager profile and available exclusively in the Approvals App.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "MyInventory",
            "tab_style": "Custom13: Box",
            "profile_name": "ContractManager",
            "app_name": "standard__Approvals"
        },
        "difficulty": "hard",
        "query_template_name": "create_custom_tab",
        "query_template_metadata": {
            "template_id": "admin_012",
            "template_string": "Create a custom tab for a custom object {object_name}. Choose the {tab_style} tab style. Make the tab visible  to only {profile_name} profile and can only be accssed through the {app_name} App.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomField": [
                            "MyAnimal__c.Breed__c",
                            "Environment__c.Age__c",
                            "MyBike__c.Brand__c",
                            "MyVehicle__c.NumWheels__c",
                            "MyInventory__c.StockLevel__c"
                        ],
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyVehicle__c",
                            "MyInventory__c"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomTab"
            ]
        },
        "instance_dict": {
            "object_name": "MyInventory",
            "tab_style": "Box",
            "profile_name": "Contract Manager",
            "app_name": "Approvals"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Deduplication",
        "task_id": "admin_014_001",
        "query_templated": "Create a matching rule named Contact with Fuzzy Logic on the Contact. Use Exact matching method for the Email field and leave its Match Blank Field box unchecked.",
        "query": "Please set up a rule on the Contact object called \"Contact with Fuzzy Logic.\" For the Email field, require an Exact match, and make sure the Match Blank Field option stays off.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "rule_name": "Contact with Fuzzy Logic",
            "object_name": "Contact",
            "match_method": "Exact",
            "field_name": "Email"
        },
        "difficulty": "medium",
        "query_template_name": "create_matching_rule",
        "query_template_metadata": {
            "template_id": "admin_014",
            "template_string": "Create a matching rule named {rule_name} on the {object_name}. Use {match_method} method for the {field_name} field and leave its Match Blank Field box unchecked.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "MatchingRule"
            ]
        },
        "instance_dict": {
            "rule_name": "Contact with Fuzzy Logic",
            "object_name": "Contact",
            "match_method": "Exact matching",
            "field_name": "Email"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Deduplication",
        "task_id": "admin_014_002",
        "query_templated": "Create a matching rule named Lead Phone Match on the Lead. Use Fuzzy matching method for the Phone field and leave its Match Blank Field box unchecked.",
        "query": "Build a Lead matching rule named \"Lead Phone Match\" where the Phone field uses the Fuzzy method. Also, don\u2019t count empty values\u2014leave the Match Blank Field box unchecked.",
        "human_review_comment": "delete ending things",
        "ground_truth_dict": {
            "rule_name": "Lead Phone Match",
            "object_name": "Lead",
            "match_method": "Phone",
            "field_name": "Phone"
        },
        "difficulty": "medium",
        "query_template_name": "create_matching_rule",
        "query_template_metadata": {
            "template_id": "admin_014",
            "template_string": "Create a matching rule named {rule_name} on the {object_name}. Use {match_method} method for the {field_name} field and leave its Match Blank Field box unchecked.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "MatchingRule"
            ]
        },
        "instance_dict": {
            "rule_name": "Lead Phone Match",
            "object_name": "Lead",
            "match_method": "Fuzzy matching",
            "field_name": "Phone"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Deduplication",
        "task_id": "admin_014_003",
        "query_templated": "Create a matching rule named Account Website Match on the Account. Use Exact matching method for the Website field and leave its Match Blank Field box unchecked.",
        "query": "Could you add an Account matching rule titled \"Account Website Match\"? Configure Website to match exactly, and keep the Match Blank Field checkbox unselected.",
        "human_review_comment": "adding matching",
        "ground_truth_dict": {
            "rule_name": "Account Website Match",
            "object_name": "Account",
            "match_method": "Exact",
            "field_name": "Website"
        },
        "difficulty": "medium",
        "query_template_name": "create_matching_rule",
        "query_template_metadata": {
            "template_id": "admin_014",
            "template_string": "Create a matching rule named {rule_name} on the {object_name}. Use {match_method} method for the {field_name} field and leave its Match Blank Field box unchecked.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "MatchingRule"
            ]
        },
        "instance_dict": {
            "rule_name": "Account Website Match",
            "object_name": "Account",
            "match_method": "Exact matching",
            "field_name": "Website"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Deduplication",
        "task_id": "admin_014_004",
        "query_templated": "Create a matching rule named Address matching on the Address. Use Fuzzy matching method for the Address field and leave its Match Blank Field box unchecked.",
        "query": "Create a rule called \"Address matching\" on the Address object: set the Address field to use Fuzzy matching, and do not tick the Match Blank Field box.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "rule_name": "Address matching",
            "object_name": "Address",
            "match_method": "Street",
            "field_name": "Street"
        },
        "difficulty": "medium",
        "query_template_name": "create_matching_rule",
        "query_template_metadata": {
            "template_id": "admin_014",
            "template_string": "Create a matching rule named {rule_name} on the {object_name}. Use {match_method} method for the {field_name} field and leave its Match Blank Field box unchecked.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "MatchingRule"
            ]
        },
        "instance_dict": {
            "rule_name": "Address matching",
            "object_name": "Address",
            "match_method": "Fuzzy matching",
            "field_name": "Address"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Deduplication",
        "task_id": "admin_014_005",
        "query_templated": "Create a matching rule named Individual Last Name Match on the Individual. Use Fuzzy matching method for the Last Name field and leave its Match Blank Field box unchecked.",
        "query": "For Individuals, add a matching rule named \"Individual Last Name Match.\" Use Fuzzy matching on the Last Name field, and ensure the Match Blank Field setting remains unchecked.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "rule_name": "Individual Last Name Match",
            "object_name": "Individual",
            "match_method": "LastName",
            "field_name": "LastName"
        },
        "difficulty": "medium",
        "query_template_name": "create_matching_rule",
        "query_template_metadata": {
            "template_id": "admin_014",
            "template_string": "Create a matching rule named {rule_name} on the {object_name}. Use {match_method} method for the {field_name} field and leave its Match Blank Field box unchecked.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "MatchingRule"
            ]
        },
        "instance_dict": {
            "rule_name": "Individual Last Name Match",
            "object_name": "Individual",
            "match_method": "Fuzzy matching",
            "field_name": "Last Name"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_016_001",
        "query_templated": "Create a custom object with label MyHouse. Check \"Launch New Custom Tab Wizard after saving this custom object\" box to select the tab style of your choice. Use the default values for the remaining.",
        "query": "Please build a new custom object labeled MyHouse. Make sure the \u201cLaunch New Custom Tab Wizard after saving this custom object\u201d box is enabled so you can choose any tab style you like, and leave everything else at the default settings.",
        "human_review_comment": "change spin up",
        "ground_truth_dict": {
            "custom_obj_name": "MyHouse"
        },
        "difficulty": "easy",
        "query_template_name": "custom_obj_with_tab",
        "query_template_metadata": {
            "template_id": "admin_016",
            "template_string": "Create a custom object with label {custom_obj_name}. Check \"Launch New Custom Tab Wizard after saving this custom object\" box to select the tab style of your choice. Use the default values for the remaining.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "custom_obj_name": "MyHouse"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_016_002",
        "query_templated": "Create a custom object with label WildBird. Check \"Launch New Custom Tab Wizard after saving this custom object\" box to select the tab style of your choice. Use the default values for the remaining.",
        "query": "Set up a custom object called WildBird. When you save it, tick the \u201cLaunch New Custom Tab Wizard after saving this custom object\u201d option to pick whatever tab style you prefer. Don\u2019t change any other fields\u2014stick with the defaults.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "custom_obj_name": "WildBird"
        },
        "difficulty": "easy",
        "query_template_name": "custom_obj_with_tab",
        "query_template_metadata": {
            "template_id": "admin_016",
            "template_string": "Create a custom object with label {custom_obj_name}. Check \"Launch New Custom Tab Wizard after saving this custom object\" box to select the tab style of your choice. Use the default values for the remaining.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "custom_obj_name": "WildBird"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_016_003",
        "query_templated": "Create a custom object with label StormTracker. Check \"Launch New Custom Tab Wizard after saving this custom object\" box to select the tab style of your choice. Use the default values for the remaining.",
        "query": "Create a custom object with the label StormTracker. Turn on the \u201cLaunch New Custom Tab Wizard after saving this custom object\u201d checkbox so a tab style can be selected, and keep all remaining settings at their default values.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "custom_obj_name": "StormTracker"
        },
        "difficulty": "easy",
        "query_template_name": "custom_obj_with_tab",
        "query_template_metadata": {
            "template_id": "admin_016",
            "template_string": "Create a custom object with label {custom_obj_name}. Check \"Launch New Custom Tab Wizard after saving this custom object\" box to select the tab style of your choice. Use the default values for the remaining.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "custom_obj_name": "StormTracker"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_016_004",
        "query_templated": "Create a custom object with label Bike. Check \"Launch New Custom Tab Wizard after saving this custom object\" box to select the tab style of your choice. Use the default values for the remaining.",
        "query": "Build a custom object named Bike, and have the New Custom Tab Wizard auto-launch on save by checking the \u201cLaunch New Custom Tab Wizard after saving this custom object\u201d option. Choose any tab style you want and leave the rest as-is (defaults only).",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "custom_obj_name": "Bike"
        },
        "difficulty": "easy",
        "query_template_name": "custom_obj_with_tab",
        "query_template_metadata": {
            "template_id": "admin_016",
            "template_string": "Create a custom object with label {custom_obj_name}. Check \"Launch New Custom Tab Wizard after saving this custom object\" box to select the tab style of your choice. Use the default values for the remaining.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "custom_obj_name": "Bike"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_016_005",
        "query_templated": "Create a custom object with label MyEnvironment. Check \"Launch New Custom Tab Wizard after saving this custom object\" box to select the tab style of your choice. Use the default values for the remaining.",
        "query": "I need a custom object labeled MyEnvironment. Ensure the \u201cLaunch New Custom Tab Wizard after saving this custom object\u201d box is checked so I can pick any tab style, and use default values for everything else.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "custom_obj_name": "MyEnvironment"
        },
        "difficulty": "easy",
        "query_template_name": "custom_obj_with_tab",
        "query_template_metadata": {
            "template_id": "admin_016",
            "template_string": "Create a custom object with label {custom_obj_name}. Check \"Launch New Custom Tab Wizard after saving this custom object\" box to select the tab style of your choice. Use the default values for the remaining.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "custom_obj_name": "MyEnvironment"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_017_001",
        "query_templated": "Update the description of MyAnimal object with the text Updated Description. And update the help text of the Breed field to Updated Help text for breed.",
        "query": "Could you hop into the MyAnimal object and change its description to \"Updated Description\"? Also, update the Breed field\u2019s help text so it says \"Updated Help text for breed\".",
        "human_review_comment": "delete .",
        "ground_truth_dict": {
            "object_name": "MyAnimal",
            "description_text": "Updated Description",
            "help_text": "Updated Help text for breed",
            "field_name": "Breed"
        },
        "difficulty": "hard",
        "query_template_name": "update_custom_object_description_and_help_text",
        "query_template_metadata": {
            "template_id": "admin_017",
            "template_string": "Update the description of {object_name} object with the text {description_text}. And update the help text of the {field_name} field to {help_text}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomField": [
                            "MyAnimal__c.Breed__c",
                            "Environment__c.Age__c",
                            "MyBike__c.Brand__c",
                            "MyVehicle__c.NumWheels__c",
                            "MyInventory__c.StockLevel__c"
                        ],
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyVehicle__c",
                            "MyInventory__c"
                        ]
                    }
                }
            },
            "objects": [
                "PermissionSetAssignment",
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "object_name": "MyAnimal",
            "description_text": "Updated Description",
            "help_text": "Updated Help text for breed",
            "field_name": "Breed"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_017_002",
        "query_templated": "Update the description of MyBike object with the text This is the name of the Bike. And update the help text of the Brand field to This is the brand name of the Bike.",
        "query": "For MyBike, make two edits: - Set the object description to \"This is the name of the Bike\" - For the Brand field, set the help text to \"This is the brand name of the Bike\".",
        "human_review_comment": "delete .",
        "ground_truth_dict": {
            "object_name": "MyBike",
            "description_text": "This is the name of the Bike",
            "help_text": "This is the brand name of the Bike",
            "field_name": "Brand"
        },
        "difficulty": "hard",
        "query_template_name": "update_custom_object_description_and_help_text",
        "query_template_metadata": {
            "template_id": "admin_017",
            "template_string": "Update the description of {object_name} object with the text {description_text}. And update the help text of the {field_name} field to {help_text}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomField": [
                            "MyAnimal__c.Breed__c",
                            "Environment__c.Age__c",
                            "MyBike__c.Brand__c",
                            "MyVehicle__c.NumWheels__c",
                            "MyInventory__c.StockLevel__c"
                        ],
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyVehicle__c",
                            "MyInventory__c"
                        ]
                    }
                }
            },
            "objects": [
                "PermissionSetAssignment",
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "object_name": "MyBike",
            "description_text": "This is the name of the Bike",
            "help_text": "This is the brand name of the Bike",
            "field_name": "Brand"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_017_003",
        "query_templated": "Update the description of Environment object with the text This describes a new Salesforce Environment. And update the help text of the Age field to Enter the number of days this env is live.",
        "query": "I\u2019m tidying up metadata\u2014please replace the Environment object\u2019s description with \"This describes a new Salesforce Environment\" and update the Age field help text to \"Enter the number of days this env is live\"",
        "human_review_comment": "delete .",
        "ground_truth_dict": {
            "object_name": "Environment",
            "description_text": "This describes a new Salesforce Environment",
            "help_text": "Enter the number of days this env is live",
            "field_name": "Age"
        },
        "difficulty": "hard",
        "query_template_name": "update_custom_object_description_and_help_text",
        "query_template_metadata": {
            "template_id": "admin_017",
            "template_string": "Update the description of {object_name} object with the text {description_text}. And update the help text of the {field_name} field to {help_text}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomField": [
                            "MyAnimal__c.Breed__c",
                            "Environment__c.Age__c",
                            "MyBike__c.Brand__c",
                            "MyVehicle__c.NumWheels__c",
                            "MyInventory__c.StockLevel__c"
                        ],
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyVehicle__c",
                            "MyInventory__c"
                        ]
                    }
                }
            },
            "objects": [
                "PermissionSetAssignment",
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "object_name": "Environment",
            "description_text": "This describes a new Salesforce Environment",
            "help_text": "Enter the number of days this env is live",
            "field_name": "Age"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_017_004",
        "query_templated": "Update the description of MyVehicle object with the text Contains details about vehicle, like number of wheels, engine type, etc.. And update the help text of the NumWheels field to Describes the number of wheels in the vehicle.",
        "query": "Do the following on MyVehicle: 1) Set the description to \"Contains details about vehicle, like number of wheels, engine type, etc.\" 2) Update the NumWheels field help text to \"Describes the number of wheels in the vehicle\".",
        "human_review_comment": "delete .",
        "ground_truth_dict": {
            "object_name": "MyVehicle",
            "description_text": "Contains details about vehicle, like number of wheels, engine type, etc.",
            "field_name": "NumWheels",
            "help_text": "Describes the number of wheels in the vehicle"
        },
        "difficulty": "hard",
        "query_template_name": "update_custom_object_description_and_help_text",
        "query_template_metadata": {
            "template_id": "admin_017",
            "template_string": "Update the description of {object_name} object with the text {description_text}. And update the help text of the {field_name} field to {help_text}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomField": [
                            "MyAnimal__c.Breed__c",
                            "Environment__c.Age__c",
                            "MyBike__c.Brand__c",
                            "MyVehicle__c.NumWheels__c",
                            "MyInventory__c.StockLevel__c"
                        ],
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyVehicle__c",
                            "MyInventory__c"
                        ]
                    }
                }
            },
            "objects": [
                "PermissionSetAssignment",
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "object_name": "MyVehicle",
            "description_text": "Contains details about vehicle, like number of wheels, engine type, etc.",
            "field_name": "NumWheels",
            "help_text": "Describes the number of wheels in the vehicle"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_017_005",
        "query_templated": "Update the description of MyInventory object with the text Manages current inventory items, quantities, and stock levels.. And update the help text of the StockLevel field to Specify how many units are currently available in stock..",
        "query": "While you\u2019re at it, adjust MyInventory as follows: change the object description to \"Manages current inventory items, quantities, and stock levels.\" and set the StockLevel field\u2019s help text to \"Specify how many units are currently available in stock.\"",
        "human_review_comment": "delete .",
        "ground_truth_dict": {
            "object_name": "MyInventory",
            "description_text": "Manages current inventory items, quantities, and stock levels.",
            "field_name": "StockLevel",
            "help_text": "Specify how many units are currently available in stock."
        },
        "difficulty": "hard",
        "query_template_name": "update_custom_object_description_and_help_text",
        "query_template_metadata": {
            "template_id": "admin_017",
            "template_string": "Update the description of {object_name} object with the text {description_text}. And update the help text of the {field_name} field to {help_text}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomField": [
                            "MyAnimal__c.Breed__c",
                            "Environment__c.Age__c",
                            "MyBike__c.Brand__c",
                            "MyVehicle__c.NumWheels__c",
                            "MyInventory__c.StockLevel__c"
                        ],
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyVehicle__c",
                            "MyInventory__c"
                        ]
                    }
                }
            },
            "objects": [
                "PermissionSetAssignment",
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "object_name": "MyInventory",
            "description_text": "Manages current inventory items, quantities, and stock levels.",
            "field_name": "StockLevel",
            "help_text": "Specify how many units are currently available in stock."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_018_001",
        "query_templated": "Create a custom object named Favorite. Then create a Lookup Relationship with Contact object. It should only be visible to System Administrator, Solution Manager profiles.",
        "query": "Go ahead and create a custom object called Favorite, hook it to Contact object with a Lookup Relationship, and lock down access so only the System Administrator and Solution Manager profiles can see it.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "object_name": "Favorite",
            "related_object": "Contact",
            "comma_separated_profile_list": "Admin, SolutionManager"
        },
        "difficulty": "hard",
        "query_template_name": "create_custom_object_with_lookup",
        "query_template_metadata": {
            "template_id": "admin_018",
            "template_string": "Create a custom object named {object_name}. Then create a Lookup Relationship with {related_object} object. It should only be visible to {comma_separated_profile_list} profiles.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Profile"
                    ]
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "object_name": "Favorite",
            "related_object": "Contact",
            "comma_separated_profile_list": "System Administrator, Solution Manager"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_018_002",
        "query_templated": "Create a custom object named ToughToClose. Then create a Lookup Relationship with Opportunity object. It should only be visible to Customer Portal User, Standard User profiles.",
        "query": "Build a custom object named ToughToClose. Add a Lookup relationship pointing to Opportunity. Limit object visibility to just the Customer Portal User and Standard User profiles.",
        "human_review_comment": "rewrite lookup",
        "ground_truth_dict": {
            "object_name": "ToughToClose",
            "related_object": "Opportunity",
            "comma_separated_profile_list": "Customer Portal User, Standard"
        },
        "difficulty": "hard",
        "query_template_name": "create_custom_object_with_lookup",
        "query_template_metadata": {
            "template_id": "admin_018",
            "template_string": "Create a custom object named {object_name}. Then create a Lookup Relationship with {related_object} object. It should only be visible to {comma_separated_profile_list} profiles.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Profile"
                    ]
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "object_name": "ToughToClose",
            "related_object": "Opportunity",
            "comma_separated_profile_list": "Customer Portal User, Standard User"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_018_003",
        "query_templated": "Create a custom object named ToughToClose. Then create a Lookup Relationship with Opportunity object. It should only be visible to Customer Portal User, Standard User profiles.",
        "query": "We\u2019re tracking hard-to-win deals\u2014please create a custom object called ToughToClose, relate it to Opportunity using a Lookup, and make it viewable exclusively by the Customer Portal User and Standard User profiles.",
        "human_review_comment": "rewrite lookup",
        "ground_truth_dict": {
            "object_name": "ToughToClose",
            "related_object": "Opportunity",
            "comma_separated_profile_list": "Customer Portal User, Standard"
        },
        "difficulty": "hard",
        "query_template_name": "create_custom_object_with_lookup",
        "query_template_metadata": {
            "template_id": "admin_018",
            "template_string": "Create a custom object named {object_name}. Then create a Lookup Relationship with {related_object} object. It should only be visible to {comma_separated_profile_list} profiles.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Profile"
                    ]
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "object_name": "ToughToClose",
            "related_object": "Opportunity",
            "comma_separated_profile_list": "Customer Portal User, Standard User"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_018_004",
        "query_templated": "Create a custom object named Attention. Then create a Lookup Relationship with Case object. It should only be visible to Einstein Agent User, Standard Platform User profiles.",
        "query": "Please provision a custom object titled Attention, attach a lookup relationship to Case object, and restrict availability so that only the Einstein Agent User and Standard Platform User profiles have access.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Attention",
            "related_object": "Case",
            "comma_separated_profile_list": "Einstein Agent User, StandardAul"
        },
        "difficulty": "hard",
        "query_template_name": "create_custom_object_with_lookup",
        "query_template_metadata": {
            "template_id": "admin_018",
            "template_string": "Create a custom object named {object_name}. Then create a Lookup Relationship with {related_object} object. It should only be visible to {comma_separated_profile_list} profiles.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Profile"
                    ]
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "object_name": "Attention",
            "related_object": "Case",
            "comma_separated_profile_list": "Einstein Agent User, Standard Platform User"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Data Model",
        "task_id": "admin_018_005",
        "query_templated": "Create a custom object named Throughput. Then create a Lookup Relationship with Lead object. It should only be visible to Identity User, Contract Manager profiles.",
        "query": "I\u2019d like a custom object named Throughput; tie it to Lead with a Lookup Relationship, and ensure it\u2019s only visible to the Identity User and Contract Manager profiles.",
        "human_review_comment": "rewrite lookup",
        "ground_truth_dict": {
            "object_name": "Throughput",
            "related_object": "Lead",
            "comma_separated_profile_list": "Identity User, ContractManager"
        },
        "difficulty": "hard",
        "query_template_name": "create_custom_object_with_lookup",
        "query_template_metadata": {
            "template_id": "admin_018",
            "template_string": "Create a custom object named {object_name}. Then create a Lookup Relationship with {related_object} object. It should only be visible to {comma_separated_profile_list} profiles.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Profile"
                    ]
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "object_name": "Throughput",
            "related_object": "Lead",
            "comma_separated_profile_list": "Identity User, Contract Manager"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_019_001",
        "query_templated": "Create a Permission set by setting the label as Account Access. The license is set to None. Enable Account Object Permissions: Read, Create. Enable Read and Edit Access for all fields.",
        "query": "Please set up a new Permission Set named \u201cAccount Access.\u201d Leave the license as None. On the Account object, grant object permissions for Read and Create. Also give Read and Edit access to all fields.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "label_name": "Account Access",
            "object_name": "Account",
            "permissions": "allowRead, allowCreate"
        },
        "difficulty": "medium",
        "query_template_name": "create_permission_set_medium",
        "query_template_metadata": {
            "template_id": "admin_019",
            "template_string": "Create a Permission set by setting the label as {label_name}. The license is set to None. Enable {object_name} Object Permissions: {permission1}, {permission2}. Enable Read and Edit Access for all fields.",
            "prerequisites": {},
            "objects": [
                "PermissionSet"
            ],
            "metadata_types": [
                "PermissionSet"
            ]
        },
        "instance_dict": {
            "label_name": "Account Access",
            "object_name": "Account",
            "permission1": "Read",
            "permission2": "Create"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_019_002",
        "query_templated": "Create a Permission set by setting the label as Opportunity Access. The license is set to None. Enable Opportunity Object Permissions: Read, Edit. Enable Read and Edit Access for all fields.",
        "query": "I need a Permission Set with these specs: - Label: Opportunity Access - License: None - Opportunity Object Permissions: Read, Edit. Read and Edit for every field",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "label_name": "Opportunity Access",
            "object_name": "Opportunity",
            "permissions": "allowRead, allowEdit"
        },
        "difficulty": "medium",
        "query_template_name": "create_permission_set_medium",
        "query_template_metadata": {
            "template_id": "admin_019",
            "template_string": "Create a Permission set by setting the label as {label_name}. The license is set to None. Enable {object_name} Object Permissions: {permission1}, {permission2}. Enable Read and Edit Access for all fields.",
            "prerequisites": {},
            "objects": [
                "PermissionSet"
            ],
            "metadata_types": [
                "PermissionSet"
            ]
        },
        "instance_dict": {
            "label_name": "Opportunity Access",
            "object_name": "Opportunity",
            "permission1": "Read",
            "permission2": "Edit"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_019_003",
        "query_templated": "Create a Permission set by setting the label as Address Access. The license is set to None. Enable Address Object Permissions: Read, Edit, Delete, View All Records. Enable Read and Edit Access for all fields.",
        "query": "Create a Permission Set and call it \u201cAddress Access\u201d (license should be None). For the Address object, turn on Read, Edit, Delete, and View All Records. Then make sure every field is set to Read and Edit.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "label_name": "Address Access",
            "object_name": "Address",
            "permissions": "allowRead, allowEdit, allowDelete, viewAllRecords"
        },
        "difficulty": "medium",
        "query_template_name": "create_permission_set_medium",
        "query_template_metadata": {
            "template_id": "admin_019",
            "template_string": "Create a Permission set by setting the label as {label_name}. The license is set to None. Enable {object_name} Object Permissions: {permission1}, {permission2}. Enable Read and Edit Access for all fields.",
            "prerequisites": {},
            "objects": [
                "PermissionSet"
            ],
            "metadata_types": [
                "PermissionSet"
            ]
        },
        "instance_dict": {
            "label_name": "Address Access",
            "object_name": "Address",
            "permission1": "Read, Edit, Delete",
            "permission2": "View All Records"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_019_004",
        "query_templated": "Create a Permission set by setting the label as Actions Access. The license is set to None. Enable Shipment Object Permissions: Read, Edit, Delete. Enable Read and Edit Access for all fields.",
        "query": "Set up a Permission Set labeled \u201cActions Access,\u201d with the license left as None. Configure the Shipment object so it has Read, Edit, and Delete object permissions. Ensure all fields have both Read and Edit enabled.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "label_name": "Actions Access",
            "object_name": "Shipment",
            "permissions": "allowRead, allowEdit, allowDelete"
        },
        "difficulty": "medium",
        "query_template_name": "create_permission_set_medium",
        "query_template_metadata": {
            "template_id": "admin_019",
            "template_string": "Create a Permission set by setting the label as {label_name}. The license is set to None. Enable {object_name} Object Permissions: {permission1}, {permission2}. Enable Read and Edit Access for all fields.",
            "prerequisites": {},
            "objects": [
                "PermissionSet"
            ],
            "metadata_types": [
                "PermissionSet"
            ]
        },
        "instance_dict": {
            "label_name": "Actions Access",
            "object_name": "Shipment",
            "permission1": "Read, Edit",
            "permission2": "Delete"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_019_005",
        "query_templated": "Create a Permission set by setting the label as Cases Admin. The license is set to None. Enable Case Object Permissions: Read, Delete. Enable Read and Edit Access for all fields.",
        "query": "Please build a Permission Set called \u201cCases Admin.\u201d Keep the license set to None. On the Case object, allow Read and Delete. Grant Read and Edit access across all fields.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "label_name": "Cases Admin",
            "object_name": "Case",
            "permissions": "allowRead, allowDelete, allowEdit"
        },
        "difficulty": "medium",
        "query_template_name": "create_permission_set_medium",
        "query_template_metadata": {
            "template_id": "admin_019",
            "template_string": "Create a Permission set by setting the label as {label_name}. The license is set to None. Enable {object_name} Object Permissions: {permission1}, {permission2}. Enable Read and Edit Access for all fields.",
            "prerequisites": {},
            "objects": [
                "PermissionSet"
            ],
            "metadata_types": [
                "PermissionSet"
            ]
        },
        "instance_dict": {
            "label_name": "Cases Admin",
            "object_name": "Case",
            "permission1": "Read",
            "permission2": "Delete"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_020_001",
        "query_templated": "Create a Permission Set Group with the label name Product Admin. Include the Merchandiser access set.",
        "query": "Create a Permission Set Group, give it the label Product Admin, and add the Merchandiser access set to it.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "label_name": "Product Admin",
            "access_set_name": "Merchandiser"
        },
        "difficulty": "easy",
        "query_template_name": "create_permset_group_access_set",
        "query_template_metadata": {
            "template_id": "admin_020",
            "template_string": "Create a Permission Set Group with the label name {label_name}. Include the {access_set_name} access set.",
            "prerequisites": {},
            "objects": [
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "label_name": "Product Admin",
            "access_set_name": "Merchandiser"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_020_002",
        "query_templated": "Create a Permission Set Group with the label name Agentforce Data Admin1. Include the Data Cloud Admin access set.",
        "query": "When you get a moment, set up a Permission Set Group labeled Agentforce Data Admin1 and include the Data Cloud Admin access set.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "label_name": "Agentforce Data Admin1",
            "access_set_name": "Data Cloud Admin"
        },
        "difficulty": "easy",
        "query_template_name": "create_permset_group_access_set",
        "query_template_metadata": {
            "template_id": "admin_020",
            "template_string": "Create a Permission Set Group with the label name {label_name}. Include the {access_set_name} access set.",
            "prerequisites": {},
            "objects": [
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "label_name": "Agentforce Data Admin1",
            "access_set_name": "Data Cloud Admin"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_020_003",
        "query_templated": "Create a Permission Set Group with the label name New Sales User. Include the Salesforce Pricing Manager access set.",
        "query": "Please provision a new Permission Set Group titled New Sales User and make sure the Salesforce Pricing Manager access set is part of it.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "label_name": "New Sales User",
            "access_set_name": "Salesforce Pricing Manager"
        },
        "difficulty": "easy",
        "query_template_name": "create_permset_group_access_set",
        "query_template_metadata": {
            "template_id": "admin_020",
            "template_string": "Create a Permission Set Group with the label name {label_name}. Include the {access_set_name} access set.",
            "prerequisites": {},
            "objects": [
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "label_name": "New Sales User",
            "access_set_name": "Salesforce Pricing Manager"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_020_004",
        "query_templated": "Create a Permission Set Group with the label name Survey Admin. Include the Manage Assessment Surveys access set.",
        "query": "Set up a Permission Set Group with the label Survey Admin, then attach the Manage Assessment Surveys access set to that group.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "label_name": "Survey Admin",
            "access_set_name": "Manage Assessment Surveys"
        },
        "difficulty": "easy",
        "query_template_name": "create_permset_group_access_set",
        "query_template_metadata": {
            "template_id": "admin_020",
            "template_string": "Create a Permission Set Group with the label name {label_name}. Include the {access_set_name} access set.",
            "prerequisites": {},
            "objects": [
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "label_name": "Survey Admin",
            "access_set_name": "Manage Assessment Surveys"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_020_005",
        "query_templated": "Create a Permission Set Group with the label name Trainee Analyst. Include the Use Enablement Programs access set.",
        "query": "Build a Permission Set Group named Trainee Analyst and include the Use Enablement Programs access set in it.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "label_name": "Trainee Analyst",
            "access_set_name": "Use Enablement Programs"
        },
        "difficulty": "easy",
        "query_template_name": "create_permset_group_access_set",
        "query_template_metadata": {
            "template_id": "admin_020",
            "template_string": "Create a Permission Set Group with the label name {label_name}. Include the {access_set_name} access set.",
            "prerequisites": {},
            "objects": [
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "label_name": "Trainee Analyst",
            "access_set_name": "Use Enablement Programs"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_021_001",
        "query_templated": "In the 'MarketingAnalyticsUser' permission set group, mute 'Accounts' object Permission on 'Delete' and 'Edit'. Mute the 'Edit Access' for the 'Annual Revenue' fields.",
        "query": "Jump into the MarketingAnalyticsUser permission set group and mute the Accounts object permissions for Delete and Edit. Also mute Edit access on the Annual Revenue field(s).",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "permission_set_group": "MarketingAnalyticsUser",
            "object": "Account",
            "object_permissions": "allowEdit, allowDelete, modifyAllRecords",
            "field_permission_type1": "editable",
            "field": "AnnualRevenue"
        },
        "difficulty": "hard",
        "query_template_name": "create_muting_permission_set",
        "query_template_metadata": {
            "template_id": "admin_021",
            "template_string": "In the '{permission_set_group}' permission set group, mute '{object}' object Permission on '{object_permission_type1}' and '{object_permission_type2}'. Mute the '{field_permission_type1}' for the '{field}' fields.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "PermissionSetGroup"
                    ]
                }
            },
            "objects": [
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "permission_set_group": "MarketingAnalyticsUser",
            "object": "Accounts",
            "object_permission_type1": "Delete",
            "object_permission_type2": "Edit",
            "field_permission_type1": "Edit Access",
            "field": "Annual Revenue"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_021_002",
        "query_templated": "In the 'Sales User' permission set group, mute 'Addresses' object Permission on 'Edit' and 'Modify All records'. Mute the 'Read Access' for the 'AddressType' fields.",
        "query": "In the Sales User permission set group, please mute the Addresses object by turning off Edit and Modify All Records, and also mute Read access for the AddressType field(s).",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "permission_set_group": "Sales_User",
            "object": "Address",
            "object_permissions": "allowEdit, modifyAllRecords, allowDelete",
            "field_permission_type1": "readable",
            "field": "AddressType"
        },
        "difficulty": "hard",
        "query_template_name": "create_muting_permission_set",
        "query_template_metadata": {
            "template_id": "admin_021",
            "template_string": "In the '{permission_set_group}' permission set group, mute '{object}' object Permission on '{object_permission_type1}' and '{object_permission_type2}'. Mute the '{field_permission_type1}' for the '{field}' fields.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "PermissionSetGroup"
                    ]
                }
            },
            "objects": [
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "permission_set_group": "Sales User",
            "object": "Addresses",
            "object_permission_type1": "Edit",
            "object_permission_type2": "Modify All records",
            "field_permission_type1": "Read Access",
            "field": "AddressType"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_021_003",
        "query_templated": "In the 'SamplePermsetGroup' permission set group, mute 'Opportunities' object Permission on 'Modify All Records' and 'View All Fields'. Mute the 'Edit Access' for the 'Amount' fields.",
        "query": "Tighten permissions in SamplePermsetGroup: mute Opportunities for Modify All Records and View All Fields, and mute Edit access on the Amount field(s).",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "permission_set_group": "SamplePermsetGroup",
            "object": "Opportunity",
            "object_permissions": "viewAllFields, modifyAllRecords",
            "field_permission_type1": "editable",
            "field": "Amount"
        },
        "difficulty": "hard",
        "query_template_name": "create_muting_permission_set",
        "query_template_metadata": {
            "template_id": "admin_021",
            "template_string": "In the '{permission_set_group}' permission set group, mute '{object}' object Permission on '{object_permission_type1}' and '{object_permission_type2}'. Mute the '{field_permission_type1}' for the '{field}' fields.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "PermissionSetGroup"
                    ]
                }
            },
            "objects": [
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "permission_set_group": "SamplePermsetGroup",
            "object": "Opportunities",
            "object_permission_type1": "Modify All Records",
            "object_permission_type2": "View All Fields",
            "field_permission_type1": "Edit Access",
            "field": "Amount"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_021_004",
        "query_templated": "In the 'MyNewPermissionSetGroup' permission set group, mute 'Cases' object Permission on 'Create' and 'View All Fields'. Mute the 'Read Access' for the 'Priority' fields.",
        "query": "For MyNewPermissionSetGroup, mute Cases permissions for Create and View All Fields, then mute Read access on the Priority field(s).",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "permission_set_group": "MyNewPermissionSetGroup",
            "object": "Case",
            "object_permissions": "viewAllFields, allowCreate",
            "field_permission_type1": "readable, editable",
            "field": "Priority"
        },
        "difficulty": "hard",
        "query_template_name": "create_muting_permission_set",
        "query_template_metadata": {
            "template_id": "admin_021",
            "template_string": "In the '{permission_set_group}' permission set group, mute '{object}' object Permission on '{object_permission_type1}' and '{object_permission_type2}'. Mute the '{field_permission_type1}' for the '{field}' fields.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "PermissionSetGroup"
                    ]
                }
            },
            "objects": [
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "permission_set_group": "MyNewPermissionSetGroup",
            "object": "Cases",
            "object_permission_type1": "Create",
            "object_permission_type2": "View All Fields",
            "field_permission_type1": "Read Access",
            "field": "Priority"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_021_005",
        "query_templated": "In the 'LaLaLandUsers' permission set group, mute 'Shipment' object Permission on 'Create' and 'View All Fields'. Mute the 'Edit Access' for the 'ExpectedDeliveryDate' fields.",
        "query": "In the LaLaLandUsers permission set group, mute the Shipment object permissions for Create and View All Fields, and mute Edit access for the ExpectedDeliveryDate field(s).",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "permission_set_group": "LaLaLandUsers",
            "object": "Shipment",
            "object_permissions": "viewAllFields, allowCreate",
            "field_permission_type1": "editable",
            "field": "ExpectedDeliveryDate"
        },
        "difficulty": "hard",
        "query_template_name": "create_muting_permission_set",
        "query_template_metadata": {
            "template_id": "admin_021",
            "template_string": "In the '{permission_set_group}' permission set group, mute '{object}' object Permission on '{object_permission_type1}' and '{object_permission_type2}'. Mute the '{field_permission_type1}' for the '{field}' fields.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "PermissionSetGroup"
                    ]
                }
            },
            "objects": [
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "permission_set_group": "LaLaLandUsers",
            "object": "Shipment",
            "object_permission_type1": "Create",
            "object_permission_type2": "View All Fields",
            "field_permission_type1": "Edit Access",
            "field": "ExpectedDeliveryDate"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_022_001",
        "query_templated": "Assign the MarketingAnalyticsUser permission set group to user Foo Bar.",
        "query": "Could you go ahead and grant Foo Bar the MarketingAnalyticsUser permission set group?",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "permission_set_group": "MarketingAnalyticsUser",
            "user_name": "Foo Bar"
        },
        "difficulty": "easy",
        "query_template_name": "assign_permset_group_to_user",
        "query_template_metadata": {
            "template_id": "admin_022",
            "template_string": "Assign the {permission_set_group} permission set group to user {user_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User",
                        "PermissionSetGroup"
                    ]
                }
            },
            "objects": [
                "PermissionSetAssignment"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "permission_set_group": "MarketingAnalyticsUser",
            "user_name": "Foo Bar"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_022_002",
        "query_templated": "Assign the Manufacturing Admin permission set group to user Sample User.",
        "query": "I need Sample User added to the Manufacturing Admin permission set group.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "permission_set_group": "Manufacturing Admin",
            "user_name": "Sample User"
        },
        "difficulty": "easy",
        "query_template_name": "assign_permset_group_to_user",
        "query_template_metadata": {
            "template_id": "admin_022",
            "template_string": "Assign the {permission_set_group} permission set group to user {user_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User",
                        "PermissionSetGroup"
                    ]
                }
            },
            "objects": [
                "PermissionSetAssignment"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "permission_set_group": "Manufacturing Admin",
            "user_name": "Sample User"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_022_003",
        "query_templated": "Assign the MarketingAnalyticsUser permission set group to user Foo Bar.",
        "query": "Attach the MarketingAnalyticsUser permission set group to Foo Bar\u2019s user account.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "permission_set_group": "MarketingAnalyticsUser",
            "user_name": "Foo Bar"
        },
        "difficulty": "easy",
        "query_template_name": "assign_permset_group_to_user",
        "query_template_metadata": {
            "template_id": "admin_022",
            "template_string": "Assign the {permission_set_group} permission set group to user {user_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User",
                        "PermissionSetGroup"
                    ]
                }
            },
            "objects": [
                "PermissionSetAssignment"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "permission_set_group": "MarketingAnalyticsUser",
            "user_name": "Foo Bar"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_022_004",
        "query_templated": "Assign the SamplePermsetGroup permission set group to user Sofia Bennett.",
        "query": "Please provision Sofia Bennett with the SamplePermsetGroup permission set group.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "permission_set_group": "SamplePermsetGroup",
            "user_name": "Sofia Bennett"
        },
        "difficulty": "easy",
        "query_template_name": "assign_permset_group_to_user",
        "query_template_metadata": {
            "template_id": "admin_022",
            "template_string": "Assign the {permission_set_group} permission set group to user {user_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User",
                        "PermissionSetGroup"
                    ]
                }
            },
            "objects": [
                "PermissionSetAssignment"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "permission_set_group": "SamplePermsetGroup",
            "user_name": "Sofia Bennett"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_022_005",
        "query_templated": "Assign the LaLaLandUsers permission set group to user John Doe.",
        "query": "Apply the LaLaLandUsers permission set group to John Doe\u2019s account.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "permission_set_group": "LaLaLandUsers",
            "user_name": "John Doe"
        },
        "difficulty": "easy",
        "query_template_name": "assign_permset_group_to_user",
        "query_template_metadata": {
            "template_id": "admin_022",
            "template_string": "Assign the {permission_set_group} permission set group to user {user_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User",
                        "PermissionSetGroup"
                    ]
                }
            },
            "objects": [
                "PermissionSetAssignment"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "permission_set_group": "LaLaLandUsers",
            "user_name": "John Doe"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_023_001",
        "query_templated": "Configure the organization-wide defaults for the MyAnimal__c object with visibility Private for internal users, visibility Private for external users, and allow users higher in the role hierarchy.",
        "query": "For MyAnimal__c, tighten sharing: set the organization-wide defaults to Private for internal users and Private for external users, and make sure Grant Access Using Hierarchies is turned on.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "MyAnimal__c",
            "internal_visibility": "Private",
            "external_visibility": "Private"
        },
        "difficulty": "easy",
        "query_template_name": "create_owd_settings",
        "query_template_metadata": {
            "template_id": "admin_023",
            "template_string": "Configure the organization-wide defaults for the {object_name} object with visibility {internal_visibility} for internal users, visibility {external_visibility} for external users, and allow users higher in the role hierarchy.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyInventory__c",
                            "MyVehicle__c"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "object_name": "MyAnimal__c",
            "internal_visibility": "Private",
            "external_visibility": "Private"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_023_002",
        "query_templated": "Configure the organization-wide defaults for the MyBike__c object with visibility Public Read Only for internal users, visibility Private for external users, and allow users higher in the role hierarchy.",
        "query": "Set the organization-wide defaults for the MyBike__c object to Public Read Only for internal users, Private for external users, and enable access for users higher in the role hierarchy.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "object_name": "MyBike__c",
            "internal_visibility": "Read",
            "external_visibility": "Private"
        },
        "difficulty": "easy",
        "query_template_name": "create_owd_settings",
        "query_template_metadata": {
            "template_id": "admin_023",
            "template_string": "Configure the organization-wide defaults for the {object_name} object with visibility {internal_visibility} for internal users, visibility {external_visibility} for external users, and allow users higher in the role hierarchy.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyInventory__c",
                            "MyVehicle__c"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "object_name": "MyBike__c",
            "internal_visibility": "Public Read Only",
            "external_visibility": "Private"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_023_003",
        "query_templated": "Configure the organization-wide defaults for the Environment__c object with visibility Public Read/Write for internal users, visibility Public Read Only for external users, and allow users higher in the role hierarchy.",
        "query": "Set the organization-wide defaults for the Environment__c object to Public Read/Write for internal users, Public Read Only for external users, and allow access for users higher in the role hierarchy.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "object_name": "Environment__c",
            "internal_visibility": "ReadWrite",
            "external_visibility": "Read"
        },
        "difficulty": "easy",
        "query_template_name": "create_owd_settings",
        "query_template_metadata": {
            "template_id": "admin_023",
            "template_string": "Configure the organization-wide defaults for the {object_name} object with visibility {internal_visibility} for internal users, visibility {external_visibility} for external users, and allow users higher in the role hierarchy.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyInventory__c",
                            "MyVehicle__c"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "object_name": "Environment__c",
            "internal_visibility": "Public Read/Write",
            "external_visibility": "Public Read Only"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_023_004",
        "query_templated": "Configure the organization-wide defaults for the MyInventory__c object with visibility Public Read/Write for internal users, visibility Public Read/Write for external users, and allow users higher in the role hierarchy.",
        "query": "Configure the organization-wide defaults for the MyInventory__c object with visibility Public Read/Write for internal users, visibility Public Read/Write for external users, and allow users higher in the role hierarchy.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "object_name": "MyInventory__c",
            "internal_visibility": "ReadWrite",
            "external_visibility": "ReadWrite"
        },
        "difficulty": "easy",
        "query_template_name": "create_owd_settings",
        "query_template_metadata": {
            "template_id": "admin_023",
            "template_string": "Configure the organization-wide defaults for the {object_name} object with visibility {internal_visibility} for internal users, visibility {external_visibility} for external users, and allow users higher in the role hierarchy.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyInventory__c",
                            "MyVehicle__c"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "object_name": "MyInventory__c",
            "internal_visibility": "Public Read/Write",
            "external_visibility": "Public Read/Write"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_023_005",
        "query_templated": "Configure the organization-wide defaults for the MyVehicle__c object with visibility Public Read/Write for internal users, visibility Public Read Only for external users, and allow users higher in the role hierarchy.",
        "query": "Please configure MyVehicle__c\u2019s organization-wide defaults to Public Read/Write for internal users and Public Read Only for external users, and ensure access is still granted to users higher in the role hierarchy.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "MyVehicle__c",
            "internal_visibility": "ReadWrite",
            "external_visibility": "Read"
        },
        "difficulty": "easy",
        "query_template_name": "create_owd_settings",
        "query_template_metadata": {
            "template_id": "admin_023",
            "template_string": "Configure the organization-wide defaults for the {object_name} object with visibility {internal_visibility} for internal users, visibility {external_visibility} for external users, and allow users higher in the role hierarchy.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "MyAnimal__c",
                            "MyBike__c",
                            "Environment__c",
                            "MyInventory__c",
                            "MyVehicle__c"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "CustomObject"
            ]
        },
        "instance_dict": {
            "object_name": "MyVehicle__c",
            "internal_visibility": "Public Read/Write",
            "external_visibility": "Public Read Only"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Users",
        "task_id": "admin_025_001",
        "query_templated": "Freeze a user with Username Alice Bob",
        "query": "Please freeze the account for the Username \"Alice Bob\" right away.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "username": "Alice Bob"
        },
        "difficulty": "medium",
        "query_template_name": "freeze_user",
        "query_template_metadata": {
            "template_id": "admin_025",
            "template_string": "Freeze a user with Username {username}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User"
                    ]
                }
            },
            "objects": [
                "UserLogin"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "username": "Alice Bob"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Users",
        "task_id": "admin_025_002",
        "query_templated": "Freeze a user with Username Foo Bar",
        "query": "Go ahead and put a freeze on the user with Username Foo Bar, ASAP.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "username": "Foo Bar"
        },
        "difficulty": "medium",
        "query_template_name": "freeze_user",
        "query_template_metadata": {
            "template_id": "admin_025",
            "template_string": "Freeze a user with Username {username}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User"
                    ]
                }
            },
            "objects": [
                "UserLogin"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "username": "Foo Bar"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Users",
        "task_id": "admin_025_003",
        "query_templated": "Freeze a user with Username John Doe",
        "query": "I need the user account whose Username is John Doe to be frozen\u2014thanks.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "username": "John Doe"
        },
        "difficulty": "medium",
        "query_template_name": "freeze_user",
        "query_template_metadata": {
            "template_id": "admin_025",
            "template_string": "Freeze a user with Username {username}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User"
                    ]
                }
            },
            "objects": [
                "UserLogin"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "username": "John Doe"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Users",
        "task_id": "admin_025_004",
        "query_templated": "Freeze a user with Username Sofia Bennett",
        "query": "Lock it down: place a freeze on the profile for the Username Sofia Bennett.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "username": "Sofia Bennett"
        },
        "difficulty": "medium",
        "query_template_name": "freeze_user",
        "query_template_metadata": {
            "template_id": "admin_025",
            "template_string": "Freeze a user with Username {username}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User"
                    ]
                }
            },
            "objects": [
                "UserLogin"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "username": "Sofia Bennett"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Users",
        "task_id": "admin_025_005",
        "query_templated": "Freeze a user with Username Sample User",
        "query": "Initiate a freeze on the user tied to the Username Sample User.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "username": "Sample User"
        },
        "difficulty": "medium",
        "query_template_name": "freeze_user",
        "query_template_metadata": {
            "template_id": "admin_025",
            "template_string": "Freeze a user with Username {username}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User"
                    ]
                }
            },
            "objects": [
                "UserLogin"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "username": "Sample User"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Users",
        "task_id": "admin_026_001",
        "query_templated": "Deactivate a user with Username Sample User",
        "query": "Please disable the account for the user whose username is \"Sample User\"",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "username": "Sample User"
        },
        "difficulty": "easy",
        "query_template_name": "deactivate_user",
        "query_template_metadata": {
            "template_id": "admin_026",
            "template_string": "Deactivate a user with Username {username}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User"
                    ]
                }
            },
            "objects": [
                "User"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "username": "Sample User"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Users",
        "task_id": "admin_026_002",
        "query_templated": "Deactivate a user with Username John Doe",
        "query": "Could you deactivate the user account for John Doe (username: John Doe), please?",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "username": "John Doe"
        },
        "difficulty": "easy",
        "query_template_name": "deactivate_user",
        "query_template_metadata": {
            "template_id": "admin_026",
            "template_string": "Deactivate a user with Username {username}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User"
                    ]
                }
            },
            "objects": [
                "User"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "username": "John Doe"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Users",
        "task_id": "admin_026_003",
        "query_templated": "Deactivate a user with Username Foo Bar",
        "query": "ASAP, mark the user with the username \"Foo Bar\" as inactive\u2014deactivate that account.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "username": "Foo Bar"
        },
        "difficulty": "easy",
        "query_template_name": "deactivate_user",
        "query_template_metadata": {
            "template_id": "admin_026",
            "template_string": "Deactivate a user with Username {username}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User"
                    ]
                }
            },
            "objects": [
                "User"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "username": "Foo Bar"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Users",
        "task_id": "admin_026_004",
        "query_templated": "Deactivate a user with Username Hello World",
        "query": "For the user named Hello World, flip their status to inactive and fully deactivate the account.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "username": "Hello World"
        },
        "difficulty": "easy",
        "query_template_name": "deactivate_user",
        "query_template_metadata": {
            "template_id": "admin_026",
            "template_string": "Deactivate a user with Username {username}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User"
                    ]
                }
            },
            "objects": [
                "User"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "username": "Hello World"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Users",
        "task_id": "admin_026_005",
        "query_templated": "Deactivate a user with Username Alice Bob",
        "query": "Deactivate the account tied to the username \"Alice Bob\" so this user can no longer sign in.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "username": "Alice Bob"
        },
        "difficulty": "easy",
        "query_template_name": "deactivate_user",
        "query_template_metadata": {
            "template_id": "admin_026",
            "template_string": "Deactivate a user with Username {username}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User"
                    ]
                }
            },
            "objects": [
                "User"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "username": "Alice Bob"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_028_001",
        "query_templated": "Create a new permission set group AgentforceReadOnlyAccess and add permissions Read-Only, Analytics View Access to this group, assign this permission set group to user John Doe.",
        "query": "Could you create a permission set group called AgentforceReadOnlyAccess, drop in the Read-Only and Analytics View Access permissions, and then assign that group to John Doe?",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "group_name": "AgentforceReadOnlyAccess",
            "comma_separated_permissions_list": "Read-Only, Analytics View Access",
            "username": "John Doe"
        },
        "difficulty": "medium",
        "query_template_name": "create_permset_group_assign_user",
        "query_template_metadata": {
            "template_id": "admin_028",
            "template_string": "Create a new permission set group {group_name} and add permissions {comma_separated_permissions_list} to this group, assign this permission set group to user {username}.",
            "evaluation_type": "data",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User",
                        "PermissionSet"
                    ]
                }
            },
            "objects": [
                "PermissionSetAssignment",
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "group_name": "AgentforceReadOnlyAccess",
            "comma_separated_permissions_list": "Read-Only, Analytics View Access",
            "username": "John Doe"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_028_002",
        "query_templated": "Create a new permission set group MarketingInsightsUserGroup and add permissions Marketing Manager, Dashboard Viewer to this group, assign this permission set group to user Sample User.",
        "query": "Please create a permission set group named MarketingInsightsUserGroup, include the Marketing Manager and Dashboard Viewer permissions, and assign the group to the user Sample User.",
        "human_review_comment": "change spin up",
        "ground_truth_dict": {
            "group_name": "MarketingInsightsUserGroup",
            "comma_separated_permissions_list": "Marketing Manager, Dashboard Viewer",
            "username": "Sample User"
        },
        "difficulty": "medium",
        "query_template_name": "create_permset_group_assign_user",
        "query_template_metadata": {
            "template_id": "admin_028",
            "template_string": "Create a new permission set group {group_name} and add permissions {comma_separated_permissions_list} to this group, assign this permission set group to user {username}.",
            "evaluation_type": "data",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User",
                        "PermissionSet"
                    ]
                }
            },
            "objects": [
                "PermissionSetAssignment",
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "group_name": "MarketingInsightsUserGroup",
            "comma_separated_permissions_list": "Marketing Manager, Dashboard Viewer",
            "username": "Sample User"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_028_003",
        "query_templated": "Create a new permission set group ServiceOperationsAccess and add permissions CRM User, Service Cloud User to this group, assign this permission set group to user Foo Bar.",
        "query": "I need this ASAP: create the permission set group ServiceOperationsAccess, add the CRM User and Service Cloud User permissions, and attach that group to Foo Bar.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "group_name": "ServiceOperationsAccess",
            "comma_separated_permissions_list": "CRM User, Service Cloud User",
            "username": "Foo Bar"
        },
        "difficulty": "medium",
        "query_template_name": "create_permset_group_assign_user",
        "query_template_metadata": {
            "template_id": "admin_028",
            "template_string": "Create a new permission set group {group_name} and add permissions {comma_separated_permissions_list} to this group, assign this permission set group to user {username}.",
            "evaluation_type": "data",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User",
                        "PermissionSet"
                    ]
                }
            },
            "objects": [
                "PermissionSetAssignment",
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "group_name": "ServiceOperationsAccess",
            "comma_separated_permissions_list": "CRM User, Service Cloud User",
            "username": "Foo Bar"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_028_004",
        "query_templated": "Create a new permission set group FinanceTeamAccess and add permissions Order Management Agent, Buyer to this group, assign this permission set group to user Maria Rodriguez.",
        "query": "First create a new permission set group called FinanceTeamAccess. Next, add the Order Management Agent, and Buyer permissions. Finally, assign this group to Maria Rodriguez.",
        "human_review_comment": "add comma",
        "ground_truth_dict": {
            "group_name": "FinanceTeamAccess",
            "comma_separated_permissions_list": "Order Management Agent, Buyer",
            "username": "Maria Rodriguez"
        },
        "difficulty": "medium",
        "query_template_name": "create_permset_group_assign_user",
        "query_template_metadata": {
            "template_id": "admin_028",
            "template_string": "Create a new permission set group {group_name} and add permissions {comma_separated_permissions_list} to this group, assign this permission set group to user {username}.",
            "evaluation_type": "data",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User",
                        "PermissionSet"
                    ]
                }
            },
            "objects": [
                "PermissionSetAssignment",
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "group_name": "FinanceTeamAccess",
            "comma_separated_permissions_list": "Order Management Agent, Buyer",
            "username": "Maria Rodriguez"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Permission Sets",
        "task_id": "admin_028_005",
        "query_templated": "Create a new permission set group AuditReadOnlyGroup and add permissions Commerce Admin, Commerce Session to this group, assign this permission set group to user Auditor.",
        "query": "After you create the permission set group AuditReadOnlyGroup, populate it with the Commerce Admin, and Commerce Session permissions and then grant that group to the user Auditor.",
        "human_review_comment": "add comma",
        "ground_truth_dict": {
            "group_name": "AuditReadOnlyGroup",
            "comma_separated_permissions_list": "Commerce Admin, Commerce Session",
            "username": "Auditor"
        },
        "difficulty": "medium",
        "query_template_name": "create_permset_group_assign_user",
        "query_template_metadata": {
            "template_id": "admin_028",
            "template_string": "Create a new permission set group {group_name} and add permissions {comma_separated_permissions_list} to this group, assign this permission set group to user {username}.",
            "evaluation_type": "data",
            "prerequisites": {
                "data": {
                    "objects": [
                        "User",
                        "PermissionSet"
                    ]
                }
            },
            "objects": [
                "PermissionSetAssignment",
                "PermissionSetGroup"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "group_name": "AuditReadOnlyGroup",
            "comma_separated_permissions_list": "Commerce Admin, Commerce Session",
            "username": "Auditor"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Formulas and Validations",
        "task_id": "admin_029_001",
        "query_templated": "Add a formula field with the name Days to close to the object Opportunity. It tracks the number of days until an Opportunity Closes. This newly added field should only be visible to Marketing User profiles.",
        "query": "On the Opportunity object, please add a formula field named \u201cDays to close\u201d that shows how many days are left until the Close Date. Lock down field visibility so only the Marketing User profile can see it.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "field_name": "Days_to_close__c",
            "object_name": "Opportunity",
            "formula": "CloseDate - TODAY()",
            "comma_separated_profiles": "MarketingProfile"
        },
        "difficulty": "hard",
        "query_template_name": "add_formula_field_with_visibility",
        "query_template_metadata": {
            "template_id": "admin_029",
            "template_string": "Add a formula field with the name {field_name} to the object {object_name}. {field_purpose}. This newly added field should only be visible to {comma_separated_profiles} profiles.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomField"
            ]
        },
        "instance_dict": {
            "field_name": "Days to close",
            "object_name": "Opportunity",
            "field_purpose": "It tracks the number of days until an Opportunity Closes",
            "comma_separated_profiles": "Marketing User"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Formulas and Validations",
        "task_id": "admin_029_002",
        "query_templated": "Add a formula field with the name Check country to the object Account. It checks if the billing country of the account is the same as the account owner's country. This newly added field should only be visible to Marketing User, Analytics Cloud Security User, and Einstein Agent User profiles.",
        "query": "For Accounts, create a formula field called \u201cCheck country\u201d It should return true when the Billing Country matches the Account Owner\u2019s Country, and false otherwise. Make this field visible only to Marketing User, Analytics Cloud Security User, and Einstein Agent User profiles.",
        "human_review_comment": "delete .",
        "ground_truth_dict": {
            "field_name": "Check_country__c",
            "object_name": "Account",
            "formula": "BillingCountry = Owner.Country",
            "comma_separated_profiles": "MarketingProfile, Analytics Cloud Security User, Einstein Agent User"
        },
        "difficulty": "hard",
        "query_template_name": "add_formula_field_with_visibility",
        "query_template_metadata": {
            "template_id": "admin_029",
            "template_string": "Add a formula field with the name {field_name} to the object {object_name}. {field_purpose}. This newly added field should only be visible to {comma_separated_profiles} profiles.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomField"
            ]
        },
        "instance_dict": {
            "field_name": "Check country",
            "object_name": "Account",
            "field_purpose": "It checks if the billing country of the account is the same as the account owner's country",
            "comma_separated_profiles": "Marketing User, Analytics Cloud Security User, and Einstein Agent User"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Formulas and Validations",
        "task_id": "admin_029_003",
        "query_templated": "Add a formula field with the name Lead to the object Lead. It checks to see if a lead is open, and if so, calculates the number of days it has been open. This newly added field should only be visible to Everyone profiles.",
        "query": "On the Lead object, set up a formula field named \u201cLead\u201d. If the lead is still open, have it display the number of days it\u2019s been open; if not, leave it blank. Limit visibility exclusively to the Everyone profiles.",
        "human_review_comment": "delete .",
        "ground_truth_dict": {
            "field_name": "Lead__c",
            "object_name": "Lead",
            "formula": "IF(ISPICKVAL(Status, \"Open\"), TODAY() - DATEVALUE(CreatedDate), NULL)",
            "comma_separated_profiles": "Admin, Analytics Cloud Integration User, Analytics Cloud Security User, Anypoint Integration, Authenticated Website, B2B Reordering Portal Buyer Profile, ContractManager, Cross Org Data Proxy User, Custom%3A Marketing Profile, Custom%3A Sales Profile, Custom%3A Support Profile, Customer Community Login User, Customer Community Plus Login User, Customer Community Plus User, Customer Community User, Customer Portal Manager Custom, Customer Portal Manager Standard, Einstein Agent User, External Apps Login User, External Identity User, Force%2Ecom - App Subscription User, Force%2Ecom - Free User, Gold Partner User, High Volume Customer Portal User, HighVolumePortal, Identity User, MarketingProfile, Minimum Access - API Only Integrations, Minimum Access - Salesforce, Partner App Subscription User, Partner Community Login User, Partner Community User, PlatformPortal, Read Only, Salesforce API Only System Integrations, Silver Partner User, SolutionManager, Standard, StandardAul, Work%2Ecom Only User"
        },
        "difficulty": "hard",
        "query_template_name": "add_formula_field_with_visibility",
        "query_template_metadata": {
            "template_id": "admin_029",
            "template_string": "Add a formula field with the name {field_name} to the object {object_name}. {field_purpose}. This newly added field should only be visible to {comma_separated_profiles} profiles.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomField"
            ]
        },
        "instance_dict": {
            "field_name": "Lead",
            "object_name": "Lead",
            "field_purpose": "It checks to see if a lead is open, and if so, calculates the number of days it has been open",
            "comma_separated_profiles": "Everyone"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Formulas and Validations",
        "task_id": "admin_029_004",
        "query_templated": "Add a formula field with the name RevenueInK to the object Account. Display the annual revenue divided by 1,000 and add 'K' (for easier reporting). This newly added field should only be visible to System Administrator, Custom: Sales, Marketing User profiles.",
        "query": "Add a formula field \u201cRevenueInK\u201d on Account that takes Annual Revenue, divides it by 1,000, and appends \u201cK\u201d (e.g., 250,000 \u2192 250K) to simplify reporting. Ensure only System Administrator, Custom: Sales, and Marketing User profiles can see it.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "field_name": "RevenueInK__c",
            "object_name": "Account",
            "formula": "TEXT(AnnualRevenue /1000)&\"K\"",
            "comma_separated_profiles": "Admin, Custom%3A Sales Profile, MarketingProfile"
        },
        "difficulty": "hard",
        "query_template_name": "add_formula_field_with_visibility",
        "query_template_metadata": {
            "template_id": "admin_029",
            "template_string": "Add a formula field with the name {field_name} to the object {object_name}. {field_purpose}. This newly added field should only be visible to {comma_separated_profiles} profiles.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomField"
            ]
        },
        "instance_dict": {
            "field_name": "RevenueInK",
            "object_name": "Account",
            "field_purpose": "Display the annual revenue divided by 1,000 and add 'K' (for easier reporting)",
            "comma_separated_profiles": "System Administrator, Custom: Sales, Marketing User"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Formulas and Validations",
        "task_id": "admin_029_005",
        "query_templated": "Add a formula field with the name IsVIP to the object Contact. Is the Annual Revenue of the Account related to the contact greater than 1M?. This newly added field should only be visible to Standard User, Solution Manager profiles.",
        "query": "On Contact object, create a formula field called \u201cIsVIP\u201d that evaluates to true when the related Account\u2019s Annual Revenue exceeds 1,000,000. Restrict field visibility to Standard User and Solution Manager profiles only.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "field_name": "IsVIP__c",
            "object_name": "Contact",
            "formula": "Account.AnnualRevenue > 1000000",
            "comma_separated_profiles": "Standard, SolutionManager"
        },
        "difficulty": "hard",
        "query_template_name": "add_formula_field_with_visibility",
        "query_template_metadata": {
            "template_id": "admin_029",
            "template_string": "Add a formula field with the name {field_name} to the object {object_name}. {field_purpose}. This newly added field should only be visible to {comma_separated_profiles} profiles.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "CustomField"
            ]
        },
        "instance_dict": {
            "field_name": "IsVIP",
            "object_name": "Contact",
            "field_purpose": "Is the Annual Revenue of the Account related to the contact greater than 1M?",
            "comma_separated_profiles": "Standard User, Solution Manager"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Formulas and Validations",
        "task_id": "admin_030_001",
        "query_templated": "Create a validation rule for the Account Object. This rule checks if the Account Number field's characters length is not 8. If the rule is triggered, the error message should be account number must be 8 characters long..",
        "query": "On the Account object, add a validaiton rule: if the Account Number isn\u2019t exactly 8 characters long, block the save and show this message: \"account number must be 8 characters long.\".",
        "human_review_comment": "tweaked",
        "ground_truth_dict": {
            "object_name": "Account",
            "error_condition_formula": "LEN(AccountNumber) <> 8",
            "error_message": "account number must be 8 characters long."
        },
        "difficulty": "hard",
        "query_template_name": "create_validation_rule",
        "query_template_metadata": {
            "template_id": "admin_030",
            "template_string": "Create a validation rule for the {object_name} Object. {error_condition_description}. If the rule is triggered, the error message should be {error_message}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ValidationRule"
            ]
        },
        "instance_dict": {
            "object_name": "Account",
            "error_condition_description": "This rule checks if the Account Number field's characters length is not 8",
            "error_message": "account number must be 8 characters long."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Formulas and Validations",
        "task_id": "admin_030_002",
        "query_templated": "Create a validation rule for the Contact Object. This rule should check if the Email field does not contain \"@company.com\". If the rule is triggered, the error message should be Email must be a company email ending in '@company.com'..",
        "query": "For the Contacts obeject, enforce corporate emails only\u2014create a validation that fails when the Email field does not contain \"@company.com\", and display: \"Email must be a company email ending in '@company.com'.\".",
        "human_review_comment": "tweaked",
        "ground_truth_dict": {
            "object_name": "Contact",
            "error_condition_formula": "NOT(CONTAINS(Email, \"@company.com\"))",
            "error_message": "Email must be a company email ending in '@company.com'."
        },
        "difficulty": "hard",
        "query_template_name": "create_validation_rule",
        "query_template_metadata": {
            "template_id": "admin_030",
            "template_string": "Create a validation rule for the {object_name} Object. {error_condition_description}. If the rule is triggered, the error message should be {error_message}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ValidationRule"
            ]
        },
        "instance_dict": {
            "object_name": "Contact",
            "error_condition_description": "This rule should check if the Email field does not contain \"@company.com\"",
            "error_message": "Email must be a company email ending in '@company.com'."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Formulas and Validations",
        "task_id": "admin_030_003",
        "query_templated": "Create a validation rule for the Opportunity Object. This rule should trigger an error if the Close Date is set to a date in the past. If the rule is triggered, the error message should be Close Date cannot be in the past..",
        "query": "Create a validation rule for the Opportunity Object. This rule should trigger an error if the Close Date is set to a date in the past. If the rule is triggered, the error message should be \"Close Date cannot be in the past.\".",
        "human_review_comment": "rejected; use the original",
        "ground_truth_dict": {
            "object_name": "Opportunity",
            "error_condition_formula": "CloseDate < TODAY()",
            "error_message": "Close Date cannot be in the past."
        },
        "difficulty": "hard",
        "query_template_name": "create_validation_rule",
        "query_template_metadata": {
            "template_id": "admin_030",
            "template_string": "Create a validation rule for the {object_name} Object. {error_condition_description}. If the rule is triggered, the error message should be {error_message}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ValidationRule"
            ]
        },
        "instance_dict": {
            "object_name": "Opportunity",
            "error_condition_description": "This rule should trigger an error if the Close Date is set to a date in the past",
            "error_message": "Close Date cannot be in the past."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Formulas and Validations",
        "task_id": "admin_030_004",
        "query_templated": "Create a validation rule for the Lead Object. The Annual Revenue should be greater than 0. If the rule is triggered, the error message should be Annual Revenue must be greater than 0.",
        "query": "On the Leads, I want to a new validation rule. Disallow zero or negative values for Annual Revenue. If a user enters anything \u2264 0, trigger the error with a message \"Annual Revenue must be greater than 0\".\r\n",
        "human_review_comment": "rewritte",
        "ground_truth_dict": {
            "object_name": "Lead",
            "error_condition_formula": "AnnualRevenue <= 0",
            "error_message": "Annual Revenue must be greater than 0"
        },
        "difficulty": "hard",
        "query_template_name": "create_validation_rule",
        "query_template_metadata": {
            "template_id": "admin_030",
            "template_string": "Create a validation rule for the {object_name} Object. {error_condition_description}. If the rule is triggered, the error message should be {error_message}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ValidationRule"
            ]
        },
        "instance_dict": {
            "object_name": "Lead",
            "error_condition_description": "The Annual Revenue should be greater than 0",
            "error_message": "Annual Revenue must be greater than 0"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Formulas and Validations",
        "task_id": "admin_030_005",
        "query_templated": "Create a validation rule for the Asset Object. The rule is that the Description field must contain at least 20 characters if the Asset Owner's Email field contains 'example.com'. If the rule is triggered, the error message should be Description must be at least 20 characters for example.com users.",
        "query": "For the Assets object, build a validation rule for me. Require the Description field to have a minimum of 20 characters only when the Asset Owner\u2019s Email contains \"example.com\"; if it\u2019s shorter, show: \"Description must be at least 20 characters for example.com users\".",
        "human_review_comment": "rewritte; update GT dict.",
        "ground_truth_dict": {
            "object_name": "Asset",
            "error_condition_formula": "IF(CONTAINS(Owner.Email, \"example.com\"), LEN(Description)<20, false)",
            "error_message": "Description must be at least 20 characters for example.com users"
        },
        "difficulty": "hard",
        "query_template_name": "create_validation_rule",
        "query_template_metadata": {
            "template_id": "admin_030",
            "template_string": "Create a validation rule for the {object_name} Object. {error_condition_description}. If the rule is triggered, the error message should be {error_message}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ValidationRule"
            ]
        },
        "instance_dict": {
            "object_name": "Asset",
            "error_condition_description": "The rule is that the Description field must contain at least 20 characters if the Asset Owner's Email field contains 'example.com'",
            "error_message": "Description must be at least 20 characters for example.com users"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Picklist Administration",
        "task_id": "admin_031_001",
        "query_templated": "Reorder the picklist values of Campaign Object's Status field. by moving the value \"Aborted\" to the top and make it the default value",
        "query": "In the Campaign object, move the Status picklist so that \"Aborted\" sits at the very top and make it the default selection for new Campaigns.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Campaign",
            "field_name": "Status",
            "comma_separated_values": "Aborted, Planned, In Progress, Completed",
            "default_value": "Aborted"
        },
        "difficulty": "medium",
        "query_template_name": "picklist_administration_actions",
        "query_template_metadata": {
            "template_id": "admin_031",
            "template_string": "{action_description} {object_name} Object's {field_name} field. {additional_instructions}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "StandardValueSet"
            ]
        },
        "instance_dict": {
            "action_description": "Reorder the picklist values of",
            "object_name": "Campaign",
            "field_name": "Status",
            "additional_instructions": "by moving the value \"Aborted\" to the top and make it the default value"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Picklist Administration",
        "task_id": "admin_031_002",
        "query_templated": "Create a new picklist value \"Pending\" in the Case Object's Status field. ",
        "query": "On Cases, please add a new Status option called \"Pending\" to the picklist.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Case",
            "field_name": "Status",
            "comma_separated_values": "New, Working, Escalated, Closed, Pending",
            "default_value": "New"
        },
        "difficulty": "medium",
        "query_template_name": "picklist_administration_actions",
        "query_template_metadata": {
            "template_id": "admin_031",
            "template_string": "{action_description} {object_name} Object's {field_name} field. {additional_instructions}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "StandardValueSet"
            ]
        },
        "instance_dict": {
            "action_description": "Create a new picklist value \"Pending\" in the",
            "object_name": "Case",
            "field_name": "Status",
            "additional_instructions": ""
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Picklist Administration",
        "task_id": "admin_031_003",
        "query_templated": "Rename the picklist value from \"Closed - Not Converted\" to \"Closed - Incomplete\" for the Lead Object's Lead Status field. ",
        "query": "Update the Lead Status picklist by renaming the value \"Closed - Not Converted\" to \"Closed - Incomplete.\"",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Lead",
            "field_name": "Status",
            "comma_separated_values": "Open - Not Contacted, Working - Contacted, Closed - Converted, Closed - Incomplete",
            "default_value": "Open - Not Contacted"
        },
        "difficulty": "medium",
        "query_template_name": "picklist_administration_actions",
        "query_template_metadata": {
            "template_id": "admin_031",
            "template_string": "{action_description} {object_name} Object's {field_name} field. {additional_instructions}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "StandardValueSet"
            ]
        },
        "instance_dict": {
            "action_description": "Rename the picklist value from \"Closed - Not Converted\" to \"Closed - Incomplete\" for the",
            "object_name": "Lead",
            "field_name": "Lead Status",
            "additional_instructions": ""
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Picklist Administration",
        "task_id": "admin_031_004",
        "query_templated": "Add a new picklist value \"Social Media\" to the Lead Object's LeadSource field. ",
        "query": "Add \"Social Media\" as a new choice in the LeadSource picklist on the Lead object.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Lead",
            "field_name": "Source",
            "comma_separated_values": "Web, Phone Inquiry, Partner Referral, Purchased List, Other, Social Media",
            "default_value": ""
        },
        "difficulty": "medium",
        "query_template_name": "picklist_administration_actions",
        "query_template_metadata": {
            "template_id": "admin_031",
            "template_string": "{action_description} {object_name} Object's {field_name} field. {additional_instructions}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "StandardValueSet"
            ]
        },
        "instance_dict": {
            "action_description": "Add a new picklist value \"Social Media\" to the",
            "object_name": "Lead",
            "field_name": "LeadSource",
            "additional_instructions": ""
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Picklist Administration",
        "task_id": "admin_031_005",
        "query_templated": "Reorder the picklist values of the Case Object's Priority field. Move 'Low' to the top and make it the default value",
        "query": "For the Case object, rearrange the Priority picklist so \"Low\" is the first item and set it as the default value.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Case",
            "field_name": "Priority",
            "comma_separated_values": "Low, High, Medium",
            "default_value": "Low"
        },
        "difficulty": "medium",
        "query_template_name": "picklist_administration_actions",
        "query_template_metadata": {
            "template_id": "admin_031",
            "template_string": "{action_description} {object_name} Object's {field_name} field. {additional_instructions}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "StandardValueSet"
            ]
        },
        "instance_dict": {
            "action_description": "Reorder the picklist values of the",
            "object_name": "Case",
            "field_name": "Priority",
            "additional_instructions": "Move 'Low' to the top and make it the default value"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Picklist Administration",
        "task_id": "admin_032_001",
        "query_templated": "Create a global value set with the name Ingredients and it should have sugar, butter, milk as the pick list values. Sort the values alphabetically.",
        "query": "Please add a global value set called Ingredients and include these picklist options: sugar, butter, and milk. Make sure the values are displayed A\u2013Z.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "value_set_name": "Ingredients",
            "comma_separated_values": "sugar, butter, milk"
        },
        "difficulty": "easy",
        "query_template_name": "create_global_value_set",
        "query_template_metadata": {
            "template_id": "admin_032",
            "template_string": "Create a global value set with the name {value_set_name} and it should have {comma_separated_values} as the pick list values. Sort the values alphabetically.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "GlobalValueSet"
            ]
        },
        "instance_dict": {
            "value_set_name": "Ingredients",
            "comma_separated_values": "sugar, butter, milk"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Picklist Administration",
        "task_id": "admin_032_002",
        "query_templated": "Create a global value set with the name annotators and it should have michael, fabri, caitlyn as the pick list values. Sort the values alphabetically.",
        "query": "Could you set up a global value set named annotators with the picklist values michael, fabri, and caitlyn, and have them appear in alphabetical order?",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "value_set_name": "annotators",
            "comma_separated_values": "michael, fabri, caitlyn"
        },
        "difficulty": "easy",
        "query_template_name": "create_global_value_set",
        "query_template_metadata": {
            "template_id": "admin_032",
            "template_string": "Create a global value set with the name {value_set_name} and it should have {comma_separated_values} as the pick list values. Sort the values alphabetically.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "GlobalValueSet"
            ]
        },
        "instance_dict": {
            "value_set_name": "annotators",
            "comma_separated_values": "michael, fabri, caitlyn"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Picklist Administration",
        "task_id": "admin_032_003",
        "query_templated": "Create a global value set with the name projects and it should have webagent, mm-rag, human vs. syntheic as the pick list values. Sort the values alphabetically.",
        "query": "Provision a global value set titled projects. Populate it with webagent, mm-rag, and human vs. syntheic, then alphabetize the picklist.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "value_set_name": "projects",
            "comma_separated_values": "webagent, mm-rag, human vs. syntheic"
        },
        "difficulty": "easy",
        "query_template_name": "create_global_value_set",
        "query_template_metadata": {
            "template_id": "admin_032",
            "template_string": "Create a global value set with the name {value_set_name} and it should have {comma_separated_values} as the pick list values. Sort the values alphabetically.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "GlobalValueSet"
            ]
        },
        "instance_dict": {
            "value_set_name": "projects",
            "comma_separated_values": "webagent, mm-rag, human vs. syntheic"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Picklist Administration",
        "task_id": "admin_032_004",
        "query_templated": "Create a global value set with the name RocketLaunchPhases and it should have Pre-Launch Checks, Countdown, Ignition, Lift-Off, Max Q, Stage Separation, Orbit Insertion, Payload Deployment, Re-Entry, Landing as the pick list values. Sort the values alphabetically.",
        "query": "I\u2019m organizing a global value set for RocketLaunchPhases\u2014load it with these entries: Pre-Launch Checks, Countdown, Ignition, Lift-Off, Max Q, Stage Separation, Orbit Insertion, Payload Deployment, Re-Entry, Landing. Sort the values alphabetically.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "value_set_name": "RocketLaunchPhases",
            "comma_separated_values": "Pre-Launch Checks, Countdown, Ignition, Lift-Off, Max Q, Stage Separation, Orbit Insertion, Payload Deployment, Re-Entry, Landing"
        },
        "difficulty": "easy",
        "query_template_name": "create_global_value_set",
        "query_template_metadata": {
            "template_id": "admin_032",
            "template_string": "Create a global value set with the name {value_set_name} and it should have {comma_separated_values} as the pick list values. Sort the values alphabetically.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "GlobalValueSet"
            ]
        },
        "instance_dict": {
            "value_set_name": "RocketLaunchPhases",
            "comma_separated_values": "Pre-Launch Checks, Countdown, Ignition, Lift-Off, Max Q, Stage Separation, Orbit Insertion, Payload Deployment, Re-Entry, Landing"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Picklist Administration",
        "task_id": "admin_032_005",
        "query_templated": "Create a global value set with the name CustomerSatisfactionLevel and it should have Very Satisfied, Satisfied, Neutral, Unsatisfied, Very Unsatisfied, Not Applicable as the pick list values. Sort the values alphabetically.",
        "query": "Create a global value set named CustomerSatisfactionLevel and add the following choices: Very Satisfied, Satisfied, Neutral, Unsatisfied, Very Unsatisfied, Not Applicable. Order them A to Z.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "value_set_name": "CustomerSatisfactionLevel",
            "comma_separated_values": "Very Satisfied, Satisfied, Neutral, Unsatisfied, Very Unsatisfied, Not Applicable"
        },
        "difficulty": "easy",
        "query_template_name": "create_global_value_set",
        "query_template_metadata": {
            "template_id": "admin_032",
            "template_string": "Create a global value set with the name {value_set_name} and it should have {comma_separated_values} as the pick list values. Sort the values alphabetically.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "GlobalValueSet"
            ]
        },
        "instance_dict": {
            "value_set_name": "CustomerSatisfactionLevel",
            "comma_separated_values": "Very Satisfied, Satisfied, Neutral, Unsatisfied, Very Unsatisfied, Not Applicable"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Password Policies",
        "task_id": "admin_033_001",
        "query_templated": "Update the org's password policies as follows: update the password expire days to 180 days and set lockout effective period to forever.",
        "query": "Please tune the org-wide password settings so that passwords expire every 180 days, and make lockouts permanent.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "expiration": "SixMonths",
            "lockoutInterval": "Forever"
        },
        "difficulty": "easy",
        "query_template_name": "update_password_policies",
        "query_template_metadata": {
            "template_id": "admin_033",
            "template_string": "Update the org's password policies as follows: {comma_separated_policy_conditions}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Settings"
            ]
        },
        "instance_dict": {
            "comma_separated_policy_conditions": "update the password expire days to 180 days and set lockout effective period to forever"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Password Policies",
        "task_id": "admin_033_002",
        "query_templated": "Update the org's password policies as follows: update the Password complexity requirements to Must include numbers and uppercase and lowercase letters, and Maximum invalid login attempts to 5.",
        "query": "Tighten our password policy: require passwords to include at least one number plus both uppercase and lowercase letters, and cap failed login attempts at 5 before lockout.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "complexity": "UpperLowerCaseNumeric",
            "maxLoginAttempts": "FiveAttempts"
        },
        "difficulty": "easy",
        "query_template_name": "update_password_policies",
        "query_template_metadata": {
            "template_id": "admin_033",
            "template_string": "Update the org's password policies as follows: {comma_separated_policy_conditions}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Settings"
            ]
        },
        "instance_dict": {
            "comma_separated_policy_conditions": "update the Password complexity requirements to Must include numbers and uppercase and lowercase letters, and Maximum invalid login attempts to 5"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Password Policies",
        "task_id": "admin_033_003",
        "query_templated": "Update the org's password policies as follows: set the minimum password length to 12 characters and must include alpha, numeric, special characters.",
        "query": "Let\u2019s enforce stronger credentials\u2014set the minimum password length to 12 characters and require a mix of letters, numbers, and special symbols.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "minimumPasswordLength": "12",
            "complexity": "SpecialCharacters"
        },
        "difficulty": "easy",
        "query_template_name": "update_password_policies",
        "query_template_metadata": {
            "template_id": "admin_033",
            "template_string": "Update the org's password policies as follows: {comma_separated_policy_conditions}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Settings"
            ]
        },
        "instance_dict": {
            "comma_separated_policy_conditions": "set the minimum password length to 12 characters and must include alpha, numeric, special characters"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Password Policies",
        "task_id": "admin_033_004",
        "query_templated": "Update the org's password policies as follows: Minimum password length should be 15 characters, password should expire in 90 days, password history should remember last 5 passwords.",
        "query": "Policy change request: set minimum password length to 15, force password change every 90 days, and history should keep the last 5 passwords.",
        "human_review_comment": "rewrite",
        "ground_truth_dict": {
            "minimumPasswordLength": "15",
            "expiration": "ThreeMonths",
            "historyRestriction": "5"
        },
        "difficulty": "easy",
        "query_template_name": "update_password_policies",
        "query_template_metadata": {
            "template_id": "admin_033",
            "template_string": "Update the org's password policies as follows: {comma_separated_policy_conditions}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Settings"
            ]
        },
        "instance_dict": {
            "comma_separated_policy_conditions": "Minimum password length should be 15 characters, password should expire in 90 days, password history should remember last 5 passwords"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Password Policies",
        "task_id": "admin_033_005",
        "query_templated": "Update the org's password policies as follows: Minimum password length should be 10 characters, maximum invalid login attempts should be 5, lockout effective period should be 30 minutes.",
        "query": "Update the org's password policies as follows: Minimum password length should be 10 characters, maximum invalid login attempts should be 5, lockout effective period should be 30 minutes.",
        "human_review_comment": "rewrite to use the origin",
        "ground_truth_dict": {
            "minimumPasswordLength": "10",
            "maxLoginAttempts": "FiveAttempts",
            "lockoutInterval": "ThirtyMinutes"
        },
        "difficulty": "easy",
        "query_template_name": "update_password_policies",
        "query_template_metadata": {
            "template_id": "admin_033",
            "template_string": "Update the org's password policies as follows: {comma_separated_policy_conditions}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "Settings"
            ]
        },
        "instance_dict": {
            "comma_separated_policy_conditions": "Minimum password length should be 10 characters, maximum invalid login attempts should be 5, lockout effective period should be 30 minutes"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Public Group",
        "task_id": "admin_034_001",
        "query_templated": "Create a Public group with the name Reviewer. Configure the public group members by adding \"Security\" User and \"CEO\" role.",
        "query": "Create a Public group with the name Reviewer. Configure the public group members by adding \"Security\" User and \"CEO\" role.",
        "human_review_comment": "reject; use original",
        "ground_truth_dict": {
            "group_name": "Reviewer",
            "users": [
                "Security User"
            ],
            "roles": [
                "CEO"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_public_group",
        "query_template_metadata": {
            "template_id": "admin_034",
            "template_string": "Create a Public group with the name {group_name}. Configure the public group members by adding {comma_separated_users_and_roles}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "UserRole"
                    ]
                }
            },
            "objects": [
                "Group"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "group_name": "Reviewer",
            "comma_separated_users_and_roles": "\"Security\" User and \"CEO\" role"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Public Group",
        "task_id": "admin_034_002",
        "query_templated": "Create a Public group with the name Finance Team. Configure the public group members by adding \"Auditor\" User, \"Accountant\" User, \"Controller\" User, \"CFO\" role, and \"Finance Manager\" role.",
        "query": "Please set up a Public Group called \"Finance Team\" and populate it with: - \"Auditor\" (User) - \"Accountant\" (User) - \"Controller\" (User) - \"CFO\" (Role) - \"Finance Manager\" (Role)",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "group_name": "Finance Team",
            "users": [
                "Auditor",
                "Accountant",
                "Controller"
            ],
            "roles": [
                "CFO",
                "Finance Manager"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_public_group",
        "query_template_metadata": {
            "template_id": "admin_034",
            "template_string": "Create a Public group with the name {group_name}. Configure the public group members by adding {comma_separated_users_and_roles}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "UserRole"
                    ]
                }
            },
            "objects": [
                "Group"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "group_name": "Finance Team",
            "comma_separated_users_and_roles": "\"Auditor\" User, \"Accountant\" User, \"Controller\" User, \"CFO\" role, and \"Finance Manager\" role"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Public Group",
        "task_id": "admin_034_003",
        "query_templated": "Create a Public group with the name ProjectReviewers. Configure the public group members by adding \"Project Lead\" role and \"Director, Operations\" role.",
        "query": "Create a Public Group titled \"ProjectReviewers\" and make its members the \"Project Lead\" role and the \"Director, Operations\" role.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "group_name": "ProjectReviewers",
            "users": [],
            "roles": [
                "Project Lead",
                "Director, Operations"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_public_group",
        "query_template_metadata": {
            "template_id": "admin_034",
            "template_string": "Create a Public group with the name {group_name}. Configure the public group members by adding {comma_separated_users_and_roles}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "UserRole"
                    ]
                }
            },
            "objects": [
                "Group"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "group_name": "ProjectReviewers",
            "comma_separated_users_and_roles": "\"Project Lead\" role and \"Director, Operations\" role"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Public Group",
        "task_id": "admin_034_004",
        "query_templated": "Create a Public group with the name Sales Team. Configure the public group members by adding Alice Bob user, SVP, HR role, Channel Sales Team.",
        "query": "Do me a favor and create a Public Group named \"Sales Team\"; include Alice Bob (user), the \"SVP, HR\" role, and \"Channel Sales Team\" as members.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "group_name": "Sales Team",
            "users": [
                "Alice Bob"
            ],
            "roles": [
                "SVP, Human Resources",
                "Channel Sales Team"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_public_group",
        "query_template_metadata": {
            "template_id": "admin_034",
            "template_string": "Create a Public group with the name {group_name}. Configure the public group members by adding {comma_separated_users_and_roles}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "UserRole"
                    ]
                }
            },
            "objects": [
                "Group"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "group_name": "Sales Team",
            "comma_separated_users_and_roles": "Alice Bob user, SVP, HR role, Channel Sales Team"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Public Group",
        "task_id": "admin_034_005",
        "query_templated": "Create a Public group with the name Marketing Team. Configure the public group members by adding Foo Bar user, VP International Sales role, Sample User.",
        "query": "New Public Group creation request: call it \"Marketing Team\" and add the users \"Foo Bar\" and \"Sample User,\" plus the \"VP International Sales\" role.",
        "human_review_comment": "tweak a bit to avoid ambiguity",
        "ground_truth_dict": {
            "group_name": "Marketing Team",
            "users": [
                "Foo Bar"
            ],
            "roles": [
                "VP, International Sales"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_public_group",
        "query_template_metadata": {
            "template_id": "admin_034",
            "template_string": "Create a Public group with the name {group_name}. Configure the public group members by adding {comma_separated_users_and_roles}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "UserRole"
                    ]
                }
            },
            "objects": [
                "Group"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "group_name": "Marketing Team",
            "comma_separated_users_and_roles": "Foo Bar user, VP International Sales role, Sample User"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Role Hierarchy",
        "task_id": "admin_035_001",
        "query_templated": "Create a CTO role which shoule be in the same level as the CEO. Under the CTO, create a new role called VP in R&D..",
        "query": "Add a new CTO role to be a peer of the CEO (same level on the role hierarchy chart). Under the CTO, add a role titled \"VP in R&D\".",
        "human_review_comment": "tweak a bit to avoid ambiguity",
        "ground_truth_dict": {
            "hierarchy": [
                {
                    "role_name": "CEO",
                    "parent_role_name": null,
                    "is_new": false
                },
                {
                    "role_name": "CTO",
                    "parent_role_name": null,
                    "is_new": true
                },
                {
                    "role_name": "VP in R&D",
                    "parent_role_name": "CTO",
                    "is_new": true
                }
            ]
        },
        "difficulty": "easy",
        "query_template_name": "define_role_hierarchy",
        "query_template_metadata": {
            "template_id": "admin_035",
            "template_string": "{org_hierarchy_description}.",
            "prerequisites": {},
            "objects": [
                "UserRole"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "org_hierarchy_description": "Create a CTO role which shoule be in the same level as the CEO. Under the CTO, create a new role called VP in R&D."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Role Hierarchy",
        "task_id": "admin_035_002",
        "query_templated": "Create a Customer Support, New York role which should be under the Customer Support, North America role. Under the Customer Support, New York role, create a new role called Customer Service Agent..",
        "query": "Please create  \"Customer Support, New York\" role nested under the \"Customer Support, North America\" role. Then, beneath \"Customer Support, New York\" role, create a child role called \"Customer Service Agent\".",
        "human_review_comment": "tweak a bit to avoid ambiguity",
        "ground_truth_dict": {
            "hierarchy": [
                {
                    "role_name": "Customer Support, North America",
                    "parent_role_name": null,
                    "is_new": true
                },
                {
                    "role_name": "Customer Support, New York",
                    "parent_role_name": "Customer Support, North America",
                    "is_new": true
                },
                {
                    "role_name": "Customer Service Agent",
                    "parent_role_name": "Customer Support, New York",
                    "is_new": true
                }
            ]
        },
        "difficulty": "easy",
        "query_template_name": "define_role_hierarchy",
        "query_template_metadata": {
            "template_id": "admin_035",
            "template_string": "{org_hierarchy_description}.",
            "prerequisites": {},
            "objects": [
                "UserRole"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "org_hierarchy_description": "Create a Customer Support, New York role which should be under the Customer Support, North America role. Under the Customer Support, New York role, create a new role called Customer Service Agent."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Role Hierarchy",
        "task_id": "admin_035_003",
        "query_templated": "Create a Chief Procurement Officer role which shoule be under the CFO. Under the Chief Procurement Officer, create a new role called Purchasing Manager..",
        "query": "Org chart update: create a \"Chief Procurement Officer\" that reports to the CFO, and under that CPO role add \"Purchasing Manager\".",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "hierarchy": [
                {
                    "role_name": "Chief Procurement Officer",
                    "parent_role_name": "CFO",
                    "is_new": true
                },
                {
                    "role_name": "Purchasing Manager",
                    "parent_role_name": "Chief Procurement Officer",
                    "is_new": true
                }
            ]
        },
        "difficulty": "easy",
        "query_template_name": "define_role_hierarchy",
        "query_template_metadata": {
            "template_id": "admin_035",
            "template_string": "{org_hierarchy_description}.",
            "prerequisites": {},
            "objects": [
                "UserRole"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "org_hierarchy_description": "Create a Chief Procurement Officer role which shoule be under the CFO. Under the Chief Procurement Officer, create a new role called Purchasing Manager."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Role Hierarchy",
        "task_id": "admin_035_004",
        "query_templated": "Change the current role hierarchy such that: CEO > Vice President of Sales > Sales Manager.",
        "query": "Set the role hierarchy chart so the Sales Manager reports to the Vice President of Sales, and the Vice President of Sales reports to the CEO.",
        "human_review_comment": "tweak a bit to avoid ambiguity",
        "ground_truth_dict": {
            "hierarchy": [
                {
                    "role_name": "CEO",
                    "parent_role_name": null,
                    "is_new": false
                },
                {
                    "role_name": "Vice President of Sales",
                    "parent_role_name": "CEO",
                    "is_new": false
                },
                {
                    "role_name": "Sales Manager",
                    "parent_role_name": "Vice President of Sales",
                    "is_new": false
                }
            ]
        },
        "difficulty": "easy",
        "query_template_name": "define_role_hierarchy",
        "query_template_metadata": {
            "template_id": "admin_035",
            "template_string": "{org_hierarchy_description}.",
            "prerequisites": {},
            "objects": [
                "UserRole"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "org_hierarchy_description": "Change the current role hierarchy such that: CEO > Vice President of Sales > Sales Manager"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Role Hierarchy",
        "task_id": "admin_035_005",
        "query_templated": "Create a new role called 'Associate Sales Representative' and make it report to 'SVP, Sales & Marketing'. Additionally, create roles called 'Sales Intern' and 'Sales Trainee', both reporting to 'Associate Sales Representative'..",
        "query": "Create a role named \"Associate Sales Representative\" and have it report to \"SVP, Sales & Marketing\". Also add two direct reports under it: \"Sales Intern\" and \"Sales Trainee\".",
        "human_review_comment": "good! accept",
        "ground_truth_dict": {
            "hierarchy": [
                {
                    "role_name": "Associate Sales Representative",
                    "parent_role_name": "SVP, Sales & Marketing",
                    "is_new": true
                },
                {
                    "role_name": "Sales Intern",
                    "parent_role_name": "Associate Sales Representative",
                    "is_new": true
                },
                {
                    "role_name": "Sales Trainee",
                    "parent_role_name": "Associate Sales Representative",
                    "is_new": true
                }
            ]
        },
        "difficulty": "easy",
        "query_template_name": "define_role_hierarchy",
        "query_template_metadata": {
            "template_id": "admin_035",
            "template_string": "{org_hierarchy_description}.",
            "prerequisites": {},
            "objects": [
                "UserRole"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "org_hierarchy_description": "Create a new role called 'Associate Sales Representative' and make it report to 'SVP, Sales & Marketing'. Additionally, create roles called 'Sales Intern' and 'Sales Trainee', both reporting to 'Associate Sales Representative'."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Approval Process",
        "task_id": "admin_037_001",
        "query_templated": "Build an approval process for the records in the Opportunity Object using the Jump Start Wizard. Name this process as Approve Opportunity Amount. The entry criteria is set to the opportunity amount is greater than 200.",
        "query": "Please set up an approval process on the Opportunity object using the Jump Start Wizard. Name it \"Approve Opportunity Amount\" and have it fire only when the Opportunity Amount is greater than 200.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Opportunity",
            "approval_process_name": "Approve Opportunity Amount",
            "entry_criteria_formula": [
                [
                    "Opportunity.Amount",
                    "greaterThan",
                    "200"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_approval_process_jump_start",
        "query_template_metadata": {
            "template_id": "admin_037",
            "template_string": "Build an approval process for the records in the {object_name} Object using the Jump Start Wizard. Name this process as {approval_process_name}. The entry criteria is set to {entry_criteria_formula}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ApprovalProcess"
            ]
        },
        "instance_dict": {
            "object_name": "Opportunity",
            "approval_process_name": "Approve Opportunity Amount",
            "entry_criteria_formula": "the opportunity amount is greater than 200"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Approval Process",
        "task_id": "admin_037_002",
        "query_templated": "Build an approval process for the records in the Account Object using the Jump Start Wizard. Name this process as Approve Low Earning Account. The entry criteria is set to Account: Billing Country not equal to United States and Account: Annual Revenue is less than 100000.",
        "query": "Can you create an approval process for Account records via the Jump Start Wizard and call it \"Approve Low Earning Account\"? It should only enter approval if the Billing: Country is not \"United States\" and the Annual Revenue is less than 100,000.",
        "human_review_comment": "minor tweak",
        "ground_truth_dict": {
            "object_name": "Account",
            "approval_process_name": "Approve Low Earning Account",
            "entry_criteria_formula": [
                [
                    "Account.BillingCountry",
                    "notEqual",
                    "United States"
                ],
                [
                    "Account.AnnualRevenue",
                    "lessThan",
                    "100000"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_approval_process_jump_start",
        "query_template_metadata": {
            "template_id": "admin_037",
            "template_string": "Build an approval process for the records in the {object_name} Object using the Jump Start Wizard. Name this process as {approval_process_name}. The entry criteria is set to {entry_criteria_formula}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ApprovalProcess"
            ]
        },
        "instance_dict": {
            "object_name": "Account",
            "approval_process_name": "Approve Low Earning Account",
            "entry_criteria_formula": "Account: Billing Country not equal to United States and Account: Annual Revenue is less than 100000"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Approval Process",
        "task_id": "admin_037_003",
        "query_templated": "Build an approval process for the records in the Case Object using the Jump Start Wizard. Name this process as Approve Working Case. The entry criteria is set to Case: Status equals Working, Case: Description contains new, Case: Business Hours starts with Default.",
        "query": "I\u2019d like a Case approval built with the Jump Start Wizard named \"Approve Working Case.\" Configure the entry criteria so it starts when Case: Status equals \"Working,\" the Case: Description contains \"new,\" and Case: Business Hours starts with \"Default.\"",
        "human_review_comment": "modified multiple palces",
        "ground_truth_dict": {
            "object_name": "Case",
            "approval_process_name": "Approve Working Case",
            "entry_criteria_formula": [
                [
                    "Case.Status",
                    "equals",
                    "Working"
                ],
                [
                    "Case.Description",
                    "contains",
                    "new"
                ],
                [
                    "Case.BusinessHours",
                    "startsWith",
                    "Default"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_approval_process_jump_start",
        "query_template_metadata": {
            "template_id": "admin_037",
            "template_string": "Build an approval process for the records in the {object_name} Object using the Jump Start Wizard. Name this process as {approval_process_name}. The entry criteria is set to {entry_criteria_formula}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ApprovalProcess"
            ]
        },
        "instance_dict": {
            "object_name": "Case",
            "approval_process_name": "Approve Working Case",
            "entry_criteria_formula": "Case: Status equals Working, Case: Description contains new, Case: Business Hours starts with Default"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Approval Process",
        "task_id": "admin_037_004",
        "query_templated": "Build an approval process for the records in the Case Object using the Jump Start Wizard. Name this process as case_approval. The entry criteria is set to The approval process should start when the Status is 'Escalated' and the Description has 'APT' in it..",
        "query": "For the Case object, use the Jump Start Wizard to make an approval process called \"case_approval.\" It should kick off when Status is \"Escalated\" and the Description field includes \"APT.\"",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Case",
            "approval_process_name": "case_approval",
            "entry_criteria_formula": [
                [
                    "Case.Status",
                    "equals",
                    "Escalated"
                ],
                [
                    "Case.Description",
                    "contains",
                    "APT"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_approval_process_jump_start",
        "query_template_metadata": {
            "template_id": "admin_037",
            "template_string": "Build an approval process for the records in the {object_name} Object using the Jump Start Wizard. Name this process as {approval_process_name}. The entry criteria is set to {entry_criteria_formula}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ApprovalProcess"
            ]
        },
        "instance_dict": {
            "object_name": "Case",
            "approval_process_name": "case_approval",
            "entry_criteria_formula": "The approval process should start when the Status is 'Escalated' and the Description has 'APT' in it."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Approval Process",
        "task_id": "admin_037_005",
        "query_templated": "Build an approval process for the records in the Account Object using the Jump Start Wizard. Name this process as account_approval. The entry criteria is set to The approval process should start when the Type is 'Customer - Direct' and the Annual Revenue is greater than 500000..",
        "query": "On the Account object, build an approval process through the Jump Start Wizard named \"account_approval.\" Trigger it only when Type is \"Customer - Direct\" and Annual Revenue is greater than 500,000.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "object_name": "Account",
            "approval_process_name": "account_approval",
            "entry_criteria_formula": [
                [
                    "Account.Type",
                    "equals",
                    "Customer - Direct"
                ],
                [
                    "Account.AnnualRevenue",
                    "greaterThan",
                    "500000"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_approval_process_jump_start",
        "query_template_metadata": {
            "template_id": "admin_037",
            "template_string": "Build an approval process for the records in the {object_name} Object using the Jump Start Wizard. Name this process as {approval_process_name}. The entry criteria is set to {entry_criteria_formula}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "ApprovalProcess"
            ]
        },
        "instance_dict": {
            "object_name": "Account",
            "approval_process_name": "account_approval",
            "entry_criteria_formula": "The approval process should start when the Type is 'Customer - Direct' and the Annual Revenue is greater than 500000."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Approval Process",
        "task_id": "admin_038_001",
        "query_templated": "Configure the required_account_action approval process's final approval actions by adding a new action with the name mark_clean, which set the Clean Status field value to In Sync. Similarly, add a new action under the final rejection actions with the name mark_inactive, which set the field value to Inactive.",
        "query": "In the required_account_action approval process, adding new actions like this: under Final Approval Actions, add a field update named mark_clean that sets the Clean Status field to In Sync. Under Final Rejection Actions, add another field update named mark_inactive that sets Clean Status to Inactive.",
        "human_review_comment": "tweak a bit to avoid ambiguity",
        "ground_truth_dict": {
            "approval_process_name": "Account.required_account_action",
            "final_approval_action_name": "mark_clean",
            "final_rejection_action_name": "mark_inactive",
            "approval_status_field": "CleanStatus",
            "approved_value": "Matched",
            "rejected_value": "Inactive"
        },
        "difficulty": "hard",
        "query_template_name": "configure_approval_process_actions",
        "query_template_metadata": {
            "template_id": "admin_038",
            "template_string": "Configure the {approval_process_name} approval process's final approval actions by adding a new action with the name {final_approval_action_name}, which set the {approval_status_field} field value to {approved_value}. Similarly, add a new action under the final rejection actions with the name {final_rejection_action_name}, which set the field value to {rejected_value}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "ApprovalProcess": [
                            "Account.required_account_action",
                            "Campaign.required_campaign_action",
                            "Contact.required_contact_action",
                            "Lead.required_lead_action",
                            "Product2.required_product_action"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "ApprovalProcess"
            ]
        },
        "instance_dict": {
            "approval_process_name": "required_account_action",
            "final_approval_action_name": "mark_clean",
            "final_rejection_action_name": "mark_inactive",
            "approval_status_field": "Clean Status",
            "approved_value": "In Sync",
            "rejected_value": "Inactive"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Approval Process",
        "task_id": "admin_038_002",
        "query_templated": "Configure the required_product_action approval process's final approval actions by adding a new action with the name activate, which set the Active field value to True. Similarly, add a new action under the final rejection actions with the name deserialize, which set the field value to False.",
        "query": "Configure the required_product_action approval process's final approval actions by adding a new action with the name activate, which set the Active field value to True. Similarly, add a new action under the final rejection actions with the name deserialize, which set the field value to False.",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "approval_process_name": "Product2.required_product_action",
            "final_approval_action_name": "activate",
            "final_rejection_action_name": "deserialize",
            "approval_status_field": "Active",
            "approved_value": "True",
            "rejected_value": "False"
        },
        "difficulty": "hard",
        "query_template_name": "configure_approval_process_actions",
        "query_template_metadata": {
            "template_id": "admin_038",
            "template_string": "Configure the {approval_process_name} approval process's final approval actions by adding a new action with the name {final_approval_action_name}, which set the {approval_status_field} field value to {approved_value}. Similarly, add a new action under the final rejection actions with the name {final_rejection_action_name}, which set the field value to {rejected_value}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "ApprovalProcess": [
                            "Account.required_account_action",
                            "Campaign.required_campaign_action",
                            "Contact.required_contact_action",
                            "Lead.required_lead_action",
                            "Product2.required_product_action"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "ApprovalProcess"
            ]
        },
        "instance_dict": {
            "approval_process_name": "required_product_action",
            "final_approval_action_name": "activate",
            "final_rejection_action_name": "deserialize",
            "approval_status_field": "Active",
            "approved_value": true,
            "rejected_value": false
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Approval Process",
        "task_id": "admin_038_003",
        "query_templated": "Configure the Campaign.required_campaign_action approval process's final approval actions by adding a new action with the name Approve Campaign, which set the Status field value to Planned. Similarly, add a new action under the final rejection actions with the name Reject Campaign, which set the field value to Aborted.",
        "query": "In Campaign.required_campaign_action approval process, do the following: 1) Under Final Approval Actions \u2014 add a new action named Approve Campaign to update the Status field to Planned. 2) Under Final Rejection Actions \u2014 add a action named Reject Campaign to update Status to Aborted.",
        "human_review_comment": "modified multiple palces",
        "ground_truth_dict": {
            "approval_process_name": "Campaign.required_campaign_action",
            "final_approval_action_name": "Approve Campaign",
            "final_rejection_action_name": "Reject Campaign",
            "approval_status_field": "Status",
            "approved_value": "Planned",
            "rejected_value": "Aborted"
        },
        "difficulty": "hard",
        "query_template_name": "configure_approval_process_actions",
        "query_template_metadata": {
            "template_id": "admin_038",
            "template_string": "Configure the {approval_process_name} approval process's final approval actions by adding a new action with the name {final_approval_action_name}, which set the {approval_status_field} field value to {approved_value}. Similarly, add a new action under the final rejection actions with the name {final_rejection_action_name}, which set the field value to {rejected_value}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "ApprovalProcess": [
                            "Account.required_account_action",
                            "Campaign.required_campaign_action",
                            "Contact.required_contact_action",
                            "Lead.required_lead_action",
                            "Product2.required_product_action"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "ApprovalProcess"
            ]
        },
        "instance_dict": {
            "approval_process_name": "Campaign.required_campaign_action",
            "final_approval_action_name": "Approve Campaign",
            "final_rejection_action_name": "Reject Campaign",
            "approval_status_field": "Status",
            "approved_value": "Planned",
            "rejected_value": "Aborted"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Approval Process",
        "task_id": "admin_038_004",
        "query_templated": "Configure the Contact.required_contact_action approval process's final approval actions by adding a new action with the name Add to Description, which set the Description field value to Formula of Description + \"This is a valid contact\". Similarly, add a new action under the final rejection actions with the name Empty Description, which set the field value to \"Rejected Contact\".",
        "query": "Configure the Contact.required_contact_action approval process's final approval actions by adding a new action with the name Add to Description, which set the Description field value to Formula of Description + \"This is a valid contact\". Similarly, add a new action under the final rejection actions with the name Empty Description, which set the field value to \"Rejected Contact\".",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "approval_process_name": "Contact.required_contact_action",
            "final_approval_action_name": "Add to Description",
            "final_rejection_action_name": "Empty Description",
            "approval_status_field": "Description",
            "approved_value": "Description + \"This is a valid contact\"",
            "rejected_value": "\"Rejected Contact\""
        },
        "difficulty": "hard",
        "query_template_name": "configure_approval_process_actions",
        "query_template_metadata": {
            "template_id": "admin_038",
            "template_string": "Configure the {approval_process_name} approval process's final approval actions by adding a new action with the name {final_approval_action_name}, which set the {approval_status_field} field value to {approved_value}. Similarly, add a new action under the final rejection actions with the name {final_rejection_action_name}, which set the field value to {rejected_value}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "ApprovalProcess": [
                            "Account.required_account_action",
                            "Campaign.required_campaign_action",
                            "Contact.required_contact_action",
                            "Lead.required_lead_action",
                            "Product2.required_product_action"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "ApprovalProcess"
            ]
        },
        "instance_dict": {
            "approval_process_name": "Contact.required_contact_action",
            "final_approval_action_name": "Add to Description",
            "final_rejection_action_name": "Empty Description",
            "approval_status_field": "Description",
            "approved_value": "Formula of Description + \"This is a valid contact\"",
            "rejected_value": "Rejected Contact"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "Approval Process",
        "task_id": "admin_038_005",
        "query_templated": "Configure the Lead.required_lead_action approval process's final approval actions by adding a new action with the name Update Status, which set the Status field value to Working - Contacted. Similarly, add a new action under the final rejection actions with the name Close Lead, which set the field value to Closed - Not Converted.",
        "query": "For the Lead.required_lead_action approval process, make the end-of-process steps: on final approval, build a new action named Update Status to set the Status field to Working - Contacted; on final rejection, configure a new action named Close Lead to set Status to Closed - Not Converted.",
        "human_review_comment": "modified multiple palces",
        "ground_truth_dict": {
            "approval_process_name": "Lead.required_lead_action",
            "final_approval_action_name": "Update Status",
            "final_rejection_action_name": "Close Lead",
            "approval_status_field": "Status",
            "approved_value": "Working - Contacted",
            "rejected_value": "Closed - Not Converted"
        },
        "difficulty": "hard",
        "query_template_name": "configure_approval_process_actions",
        "query_template_metadata": {
            "template_id": "admin_038",
            "template_string": "Configure the {approval_process_name} approval process's final approval actions by adding a new action with the name {final_approval_action_name}, which set the {approval_status_field} field value to {approved_value}. Similarly, add a new action under the final rejection actions with the name {final_rejection_action_name}, which set the field value to {rejected_value}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "ApprovalProcess": [
                            "Account.required_account_action",
                            "Campaign.required_campaign_action",
                            "Contact.required_contact_action",
                            "Lead.required_lead_action",
                            "Product2.required_product_action"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "ApprovalProcess"
            ]
        },
        "instance_dict": {
            "approval_process_name": "Lead.required_lead_action",
            "final_approval_action_name": "Update Status",
            "final_rejection_action_name": "Close Lead",
            "approval_status_field": "Status",
            "approved_value": "Working - Contacted",
            "rejected_value": "Closed - Not Converted"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "qa",
        "task_id": "admin_039_001",
        "query_templated": "A user is assigned with Account Access permission set. Will the user be able to delet any records under the Account Object?  Grounded on the salesforce org's object settings, Only answer with \"yes\" or \"no\".",
        "query": "Based on the org\u2019s object settings, if a user only has the \u201cAccount Access\u201d permission set, can they delete any Account records? Reply with \u201cyes\u201d or \u201cno\u201d only.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "no"
        },
        "difficulty": "medium",
        "query_template_name": "qa_admin_039",
        "query_template_metadata": {
            "template_id": "admin_039",
            "template_string": "{information}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": []
        },
        "instance_dict": {
            "information": "A user is assigned with Account Access permission set. Will the user be able to delet any records under the Account Object?  Grounded on the salesforce org's object settings, Only answer with \"yes\" or \"no\"."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "qa",
        "task_id": "admin_039_002",
        "query_templated": "The Case Object is associated with multiple permission sets. Among the [Agentforce Service Agent Secure Base, C360 High Scale Flow Integration User, Cases Admin, and ConnectivityServiceCASCPermSet] permission sets, which one does not have the Edit priviledge? Grounded on the salesforce org's object settings, answer the question with the precise name.",
        "query": "The Case Object is associated with multiple permission sets. Among the [Agentforce Service Agent Secure Base, C360 High Scale Flow Integration User, Cases Admin, and ConnectivityServiceCASCPermSet] permission sets, which one does not have the Edit priviledge? Grounded on the salesforce org's object settings, answer the question with the precise name.",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "answer": "Agentforce Service Agent Secure Base"
        },
        "difficulty": "medium",
        "query_template_name": "qa_admin_039",
        "query_template_metadata": {
            "template_id": "admin_039",
            "template_string": "{information}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": []
        },
        "instance_dict": {
            "information": "The Case Object is associated with multiple permission sets. Among the [Agentforce Service Agent Secure Base, C360 High Scale Flow Integration User, Cases Admin, and ConnectivityServiceCASCPermSet] permission sets, which one does not have the Edit priviledge? Grounded on the salesforce org's object settings, answer the question with the precise name."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "qa",
        "task_id": "admin_039_003",
        "query_templated": "Grounded on the salesforce org's Opportunity object, which Profile has the most limited access. Choose one and reply with the exact name from the list [Custom: Sales Profile, Gold Partner User, Analytics Cloud Integration User].",
        "query": "Grounded on the salesforce org's Opportunity object, which Profile has the most limited access. Choose one and reply with the exact name from the list [Custom: Sales Profile, Gold Partner User, Analytics Cloud Integration User].",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "answer": "Analytics Cloud Integration User"
        },
        "difficulty": "medium",
        "query_template_name": "qa_admin_039",
        "query_template_metadata": {
            "template_id": "admin_039",
            "template_string": "{information}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": []
        },
        "instance_dict": {
            "information": "Grounded on the salesforce org's Opportunity object, which Profile has the most limited access. Choose one and reply with the exact name from the list [Custom: Sales Profile, Gold Partner User, Analytics Cloud Integration User]."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "qa",
        "task_id": "admin_039_004",
        "query_templated": "Looking at the existing permission set groups under the Account Object, I would like to pick one that has the Delete priviledge. Could you recommend one out of the [Product Admin, Commerce_Shopper, and Trainee Analyst]? Grounded on the salesforce org's object settings, answer the question with the precise name.",
        "query": "From the existing permission set groups, which one grants Delete on the Account object? Choose only one from Product Admin, Commerce_Shopper, or Trainee Analyst, and answer with the precise name based on the org\u2019s object settings.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "Product Admin"
        },
        "difficulty": "medium",
        "query_template_name": "qa_admin_039",
        "query_template_metadata": {
            "template_id": "admin_039",
            "template_string": "{information}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": []
        },
        "instance_dict": {
            "information": "Looking at the existing permission set groups under the Account Object, I would like to pick one that has the Delete priviledge. Could you recommend one out of the [Product Admin, Commerce_Shopper, and Trainee Analyst]? Grounded on the salesforce org's object settings, answer the question with the precise name."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "admin",
        "subcategory": "qa",
        "task_id": "admin_039_005",
        "query_templated": "Inspect the Buyer permission set and compare its object permissions for the Account and Order Obejcts.Which one has the delete priviledge?  Answer the question with the precise object API Name.",
        "query": "Inspect the Buyer permission set and compare its object permissions for the Account and Order Obejcts.Which one has the delete priviledge?  Answer the question with the precise object API Name.",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "answer": "Order"
        },
        "difficulty": "medium",
        "query_template_name": "qa_admin_039",
        "query_template_metadata": {
            "template_id": "admin_039",
            "template_string": "{information}",
            "prerequisites": {},
            "objects": [],
            "metadata_types": []
        },
        "instance_dict": {
            "information": "Inspect the Buyer permission set and compare its object permissions for the Account and Order Obejcts.Which one has the delete priviledge?  Answer the question with the precise object API Name."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Account & Contacts",
        "task_id": "sales_001_001",
        "query_templated": "I just met the Leo Luis, the VP from the Old Balance and there's a potential to start a business with this company.. Help me to create an account for this company and the point of contact should be Marcus Roth, whose mobile number is 888-333-222 and email is marcus.roth@oldbalance.com",
        "query": "I just met the Leo Luis, the VP from the Old Balance and there's a potential to start a business with this company. Help me to create an account for this company and the point of contact should be Marcus Roth, whose mobile number is 888-333-222 and email is marcus.roth@oldbalance.com",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "company_name": "Old Balance",
            "contact_name": "Marcus Roth",
            "phone_number": "888-333-222",
            "email_address": "marcus.roth@oldbalance.com"
        },
        "difficulty": "medium",
        "query_template_name": "create_account_and_contact",
        "query_template_metadata": {
            "template_id": "sales_001",
            "template_string": "{Sentence that reveals the company name}. Help me to create an account for this company and the point of contact should be {contact_details}",
            "prerequisites": {},
            "objects": [
                "Contact",
                "Account"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "Sentence that reveals the company name": "I just met the Leo Luis, the VP from the Old Balance and there's a potential to start a business with this company.",
            "contact_details": "Marcus Roth, whose mobile number is 888-333-222 and email is marcus.roth@oldbalance.com"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Account & Contacts",
        "task_id": "sales_001_002",
        "query_templated": "I just met Sarah Kim, the Director of Operations from Next Horizon Technologies, and there's a potential to start a business with this company.. Help me to create an account for this company and the point of contact should be Jordan Lee, whose mobile number is 777-444-1111",
        "query": "Quick follow-up from my chat with Sarah Kim (Director of Operations) at Next Horizon Technologies\u2014definite potential here. Please: - Create an account for Next Horizon Technologies - Set Jordan Lee as the point of contact - Mobile: 777-444-1111",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "company_name": "Next Horizon Technologies",
            "contact_name": "Jordan Lee",
            "phone_number": "777-444-1111",
            "email_address": ""
        },
        "difficulty": "medium",
        "query_template_name": "create_account_and_contact",
        "query_template_metadata": {
            "template_id": "sales_001",
            "template_string": "{Sentence that reveals the company name}. Help me to create an account for this company and the point of contact should be {contact_details}",
            "prerequisites": {},
            "objects": [
                "Contact",
                "Account"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "Sentence that reveals the company name": "I just met Sarah Kim, the Director of Operations from Next Horizon Technologies, and there's a potential to start a business with this company.",
            "contact_details": "Jordan Lee, whose mobile number is 777-444-1111"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Account & Contacts",
        "task_id": "sales_001_003",
        "query_templated": "I just met Daniel Ortiz, the SVP of Partnerships from GreenTrail Logistics, and there's a potential to start a business with this company.. Help me to create an account for this company and the point of contact should be Emily Zhao, whose email is emily.zhao@greentrail.com",
        "query": "Could you get GreenTrail Logistics set up in the CRM? I spoke with Daniel Ortiz (SVP of Partnerships) and there\u2019s real upside. Make Emily Zhao the main point of contact and record her email as emily.zhao@greentrail.com.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "company_name": "GreenTrail Logistics",
            "contact_name": "Emily Zhao",
            "phone_number": "",
            "email_address": "emily.zhao@greentrail.com"
        },
        "difficulty": "medium",
        "query_template_name": "create_account_and_contact",
        "query_template_metadata": {
            "template_id": "sales_001",
            "template_string": "{Sentence that reveals the company name}. Help me to create an account for this company and the point of contact should be {contact_details}",
            "prerequisites": {},
            "objects": [
                "Contact",
                "Account"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "Sentence that reveals the company name": "I just met Daniel Ortiz, the SVP of Partnerships from GreenTrail Logistics, and there's a potential to start a business with this company.",
            "contact_details": "Emily Zhao, whose email is emily.zhao@greentrail.com"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Account & Contacts",
        "task_id": "sales_001_004",
        "query_templated": "I just had a productive call with the procurement team at TechFlow Solutions. They're looking to expand their cloud infrastructure services and seem like a great fit for our enterprise package.. Help me to create an account for this company and the point of contact should be Sarah Mitchell, their IT Director, who can be reached at (555) 123-4567 or sarah.mitchell@techflowsolutions.com",
        "query": "Today\u2019s call with TechFlow Solutions\u2019 procurement team went great\u2014they\u2019re planning to scale their cloud infrastructure and line up well with our enterprise package. Please open a company account for TechFlow Solutions and list Sarah Mitchell (IT Director) as the POC. You can reach her at (555) 123-4567 or sarah.mitchell@techflowsolutions.com.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "company_name": "TechFlow Solutions",
            "contact_name": "Sarah Mitchell",
            "phone_number": "(555) 123-4567",
            "email_address": "sarah.mitchell@techflowsolutions.com"
        },
        "difficulty": "medium",
        "query_template_name": "create_account_and_contact",
        "query_template_metadata": {
            "template_id": "sales_001",
            "template_string": "{Sentence that reveals the company name}. Help me to create an account for this company and the point of contact should be {contact_details}",
            "prerequisites": {},
            "objects": [
                "Contact",
                "Account"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "Sentence that reveals the company name": "I just had a productive call with the procurement team at TechFlow Solutions. They're looking to expand their cloud infrastructure services and seem like a great fit for our enterprise package.",
            "contact_details": "Sarah Mitchell, their IT Director, who can be reached at (555) 123-4567 or sarah.mitchell@techflowsolutions.com"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Account & Contacts",
        "task_id": "sales_001_005",
        "query_templated": "After meeting with the leadership team at Global Manufacturing Corp during yesterday's industry conference, I believe they would be an excellent prospect for our supply chain optimization solutions.. Help me to create an account for this company and the point of contact should be Michael Chen, VP of Operations, who mentioned he's available at (555) 987-6543. If not, he should be reached at m.chen@globalmanufacturing.com",
        "query": "After connecting with the leadership team at Global Manufacturing Corp at yesterday\u2019s industry conference, I\u2019m confident they\u2019re a fit for our supply chain optimization solutions. Please create an account for Global Manufacturing Corp and set Michael Chen, VP of Operations, as the point of contact. He prefers calls at (555) 987-6543; if he\u2019s unavailable, use m.chen@globalmanufacturing.com.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "company_name": "Global Manufacturing Corp",
            "contact_name": "Michael Chen",
            "phone_number": "(555) 987-6543",
            "email_address": "m.chen@globalmanufacturing.com"
        },
        "difficulty": "medium",
        "query_template_name": "create_account_and_contact",
        "query_template_metadata": {
            "template_id": "sales_001",
            "template_string": "{Sentence that reveals the company name}. Help me to create an account for this company and the point of contact should be {contact_details}",
            "prerequisites": {},
            "objects": [
                "Contact",
                "Account"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "Sentence that reveals the company name": "After meeting with the leadership team at Global Manufacturing Corp during yesterday's industry conference, I believe they would be an excellent prospect for our supply chain optimization solutions.",
            "contact_details": "Michael Chen, VP of Operations, who mentioned he's available at (555) 987-6543. If not, he should be reached at m.chen@globalmanufacturing.com"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Account & Contacts",
        "task_id": "sales_002_001",
        "query_templated": "The company LyLyApple opens two new sites in Asia (LyLyPear) and Europe (LyLyCherry).. Create an account with the name LyLyApple \u2013 HQ and two subordinate accounts: LyLyPear \u2013 Asia and LyLyCherry \u2013 Europe..",
        "query": "The company LyLyApple opens two new sites in Asia (LyLyPear) and Europe (LyLyCherry). Create an account with the name LyLyApple \u2013 HQ and two subordinate accounts: LyLyPear \u2013 Asia and LyLyCherry \u2013 Europe.",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "hierarchies": {
                "LyLyApple - HQ": [
                    "LyLyPear - Asia",
                    "LyLyCherry - Europe"
                ]
            }
        },
        "difficulty": "easy",
        "query_template_name": "create_account_hierarchy",
        "query_template_metadata": {
            "template_id": "sales_002",
            "template_string": "{company_hierarchy_description}. {setup_instructions}.",
            "prerequisites": {},
            "objects": [
                "Account"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "company_hierarchy_description": "The company LyLyApple opens two new sites in Asia (LyLyPear) and Europe (LyLyCherry).",
            "setup_instructions": "Create an account with the name LyLyApple \u2013 HQ and two subordinate accounts: LyLyPear \u2013 Asia and LyLyCherry \u2013 Europe."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Account & Contacts",
        "task_id": "sales_002_002",
        "query_templated": "Both NovaAxis Corp and TerraLink Systems have recently expanded their global footprint. NovaAxis has launched a new division in South Korea (NovaAxis Seoul), while TerraLink has opened a new site in Kenya (TerraLink Nairobi).. Create two separate parent accounts: NovaAxis Corp \u2013 Global and TerraLink Systems \u2013 HQ, and add one subordinate account under each: NovaAxis Seoul \u2013 South Korea and TerraLink Nairobi \u2013 Kenya..",
        "query": "Both NovaAxis Corp and TerraLink Systems have recently expanded their global footprint. NovaAxis has launched a new division in South Korea (NovaAxis Seoul), while TerraLink has opened a new site in Kenya (TerraLink Nairobi).. Create two separate parent accounts: NovaAxis Corp \u2013 Global and TerraLink Systems \u2013 HQ, and add one subordinate account under each: NovaAxis Seoul \u2013 South Korea and TerraLink Nairobi \u2013 Kenya..",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "hierarchies": {
                "NovaAxis Corp \u2013 Global": [
                    "NovaAxis Seoul \u2013 South Korea"
                ],
                "TerraLink Systems \u2013 HQ": [
                    "TerraLink Nairobi \u2013 Kenya"
                ]
            }
        },
        "difficulty": "easy",
        "query_template_name": "create_account_hierarchy",
        "query_template_metadata": {
            "template_id": "sales_002",
            "template_string": "{company_hierarchy_description}. {setup_instructions}.",
            "prerequisites": {},
            "objects": [
                "Account"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "company_hierarchy_description": "Both NovaAxis Corp and TerraLink Systems have recently expanded their global footprint. NovaAxis has launched a new division in South Korea (NovaAxis Seoul), while TerraLink has opened a new site in Kenya (TerraLink Nairobi).",
            "setup_instructions": "Create two separate parent accounts: NovaAxis Corp \u2013 Global and TerraLink Systems \u2013 HQ, and add one subordinate account under each: NovaAxis Seoul \u2013 South Korea and TerraLink Nairobi \u2013 Kenya."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Account & Contacts",
        "task_id": "sales_002_003",
        "query_templated": "CyberLoom Inc. and Vertex Dynamics are expanding in different ways. CyberLoom has launched a new research center in Germany (CyberLoom Berlin), while Vertex Dynamics has not yet opened any new branches.. Create two parent accounts: CyberLoom Inc. \u2013 HQ and Vertex Dynamics \u2013 Global, and add a subordinate account only under CyberLoom: CyberLoom Berlin \u2013 Germany..",
        "query": "CyberLoom Inc. and Vertex Dynamics are expanding in different ways. CyberLoom has launched a new research center in Germany (CyberLoom Berlin), while Vertex Dynamics has not yet opened any new branches. Create two parent accounts: CyberLoom Inc. \u2013 HQ and Vertex Dynamics \u2013 Global, and add a subordinate account only under CyberLoom: CyberLoom Berlin \u2013 Germany.",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "hierarchies": {
                "CyberLoom Inc. \u2013 HQ": [
                    "CyberLoom Berlin \u2013 Germany"
                ],
                "Vertex Dynamics \u2013 Global": []
            }
        },
        "difficulty": "easy",
        "query_template_name": "create_account_hierarchy",
        "query_template_metadata": {
            "template_id": "sales_002",
            "template_string": "{company_hierarchy_description}. {setup_instructions}.",
            "prerequisites": {},
            "objects": [
                "Account"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "company_hierarchy_description": "CyberLoom Inc. and Vertex Dynamics are expanding in different ways. CyberLoom has launched a new research center in Germany (CyberLoom Berlin), while Vertex Dynamics has not yet opened any new branches.",
            "setup_instructions": "Create two parent accounts: CyberLoom Inc. \u2013 HQ and Vertex Dynamics \u2013 Global, and add a subordinate account only under CyberLoom: CyberLoom Berlin \u2013 Germany."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Account & Contacts",
        "task_id": "sales_002_004",
        "query_templated": "The company CloudWave Solutions opens two new sites in North America (CloudWave NA) and Australia (CloudWave AU).. Create an account with name CloudWave Solutions - HQ and two subordinates account CloudWave NA - North America, CloudWave AU - Australia..",
        "query": "The company CloudWave Solutions opens two new sites in North America (CloudWave NA) and Australia (CloudWave AU).. Create an account with name CloudWave Solutions - HQ and two subordinates account CloudWave NA - North America, CloudWave AU - Australia..",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "hierarchies": {
                "CloudWave Solutions - HQ": [
                    "CloudWave NA - North America",
                    "CloudWave AU - Australia"
                ]
            }
        },
        "difficulty": "easy",
        "query_template_name": "create_account_hierarchy",
        "query_template_metadata": {
            "template_id": "sales_002",
            "template_string": "{company_hierarchy_description}. {setup_instructions}.",
            "prerequisites": {},
            "objects": [
                "Account"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "company_hierarchy_description": "The company CloudWave Solutions opens two new sites in North America (CloudWave NA) and Australia (CloudWave AU).",
            "setup_instructions": "Create an account with name CloudWave Solutions - HQ and two subordinates account CloudWave NA - North America, CloudWave AU - Australia."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Account & Contacts",
        "task_id": "sales_002_005",
        "query_templated": "MegaCorp Financial acquired two specialized firms: DataSecure Solutions (cybersecurity) and GreenTech Innovations (renewable energy consulting). They want to maintain the acquired companies as separate divisions under the MegaCorp umbrella.. Create an account with name MegaCorp Financial - Parent and two subsidiary accounts DataSecure Solutions - Cybersecurity Division, GreenTech Innovations - Renewable Energy Division..",
        "query": "MegaCorp Financial acquired two specialized firms: DataSecure Solutions (cybersecurity) and GreenTech Innovations (renewable energy consulting). They want to maintain the acquired companies as separate divisions under the MegaCorp umbrella.. Create an account with name MegaCorp Financial - Parent and two subsidiary accounts DataSecure Solutions - Cybersecurity Division, GreenTech Innovations - Renewable Energy Division..",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "hierarchies": {
                "MegaCorp Financial - Parent": [
                    "DataSecure Solutions - Cybersecurity Division",
                    "GreenTech Innovations - Renewable Energy Division"
                ]
            }
        },
        "difficulty": "easy",
        "query_template_name": "create_account_hierarchy",
        "query_template_metadata": {
            "template_id": "sales_002",
            "template_string": "{company_hierarchy_description}. {setup_instructions}.",
            "prerequisites": {},
            "objects": [
                "Account"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "company_hierarchy_description": "MegaCorp Financial acquired two specialized firms: DataSecure Solutions (cybersecurity) and GreenTech Innovations (renewable energy consulting). They want to maintain the acquired companies as separate divisions under the MegaCorp umbrella.",
            "setup_instructions": "Create an account with name MegaCorp Financial - Parent and two subsidiary accounts DataSecure Solutions - Cybersecurity Division, GreenTech Innovations - Renewable Energy Division."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_003_001",
        "query_templated": "I get a new lead source from web. The lead name is John Doe from sForce company. I just contacted him and I would rate his attitude as warm. The industry is Technology.",
        "query": "Could you log a web-sourced lead for John Doe at sForce company? I just spoke with him; please set his attitude to warm and the industry to Technology.",
        "human_review_comment": "tweak a bit to avoid ambiguity",
        "ground_truth_dict": {
            "lead_name": "John Doe",
            "lead_source": "Web",
            "rating": "Warm",
            "company_name": "sForce"
        },
        "difficulty": "medium",
        "query_template_name": "create_lead",
        "query_template_metadata": {
            "template_id": "sales_003",
            "template_string": "{free_form_sentence_with_lead_description}",
            "prerequisites": {},
            "objects": [
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "free_form_sentence_with_lead_description": "I get a new lead source from web. The lead name is John Doe from sForce company. I just contacted him and I would rate his attitude as warm. The industry is Technology."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_003_002",
        "query_templated": "I get a new lead source from partner referral. The lead name is Maya Patel from GenePoint company. I just contacted her and I would rate her attitude as hot. The industry is Biotechnology.",
        "query": "Partner referral just came in: Maya Patel from GenePoint. I connected with her already\u2014rate her attitude as hot and tag the industry as Biotechnology.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "lead_name": "Maya Patel",
            "lead_source": "Partner Referral",
            "rating": "Hot",
            "company_name": "GenePoint"
        },
        "difficulty": "medium",
        "query_template_name": "create_lead",
        "query_template_metadata": {
            "template_id": "sales_003",
            "template_string": "{free_form_sentence_with_lead_description}",
            "prerequisites": {},
            "objects": [
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "free_form_sentence_with_lead_description": "I get a new lead source from partner referral. The lead name is Maya Patel from GenePoint company. I just contacted her and I would rate her attitude as hot. The industry is Biotechnology."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_003_003",
        "query_templated": "I got a new lead source from Other. The lead name is Kevin Tran from HealthSync Solutions company. I just contacted him and I would rate his attitude as cold. The industry is Healthcare.",
        "query": "New lead (source: Other) \u2014 Kevin Tran at HealthSync Solutions. Initial outreach done; attitude came across as cold. Industry should be Healthcare.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "lead_name": "Kevin Tran",
            "lead_source": "Other",
            "rating": "Cold",
            "company_name": "HealthSync Solutions"
        },
        "difficulty": "medium",
        "query_template_name": "create_lead",
        "query_template_metadata": {
            "template_id": "sales_003",
            "template_string": "{free_form_sentence_with_lead_description}",
            "prerequisites": {},
            "objects": [
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "free_form_sentence_with_lead_description": "I got a new lead source from Other. The lead name is Kevin Tran from HealthSync Solutions company. I just contacted him and I would rate his attitude as cold. The industry is Healthcare."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_003_004",
        "query_templated": "Met an interesting prospect at the trade show yesterday - David Rodriguez from Pinnacle Systems. He mentioned they're evaluating new vendors for their upcoming expansion and seemed very engaged during our conversation.",
        "query": "Met an interesting prospect at the trade show yesterday - David Rodriguez from Pinnacle Systems. He mentioned they're evaluating new vendors for their upcoming expansion and seemed very engaged during our conversation.",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "lead_name": "David Rodriguez",
            "lead_source": "Other",
            "rating": "Warm",
            "company_name": "Pinnacle Systems"
        },
        "difficulty": "medium",
        "query_template_name": "create_lead",
        "query_template_metadata": {
            "template_id": "sales_003",
            "template_string": "{free_form_sentence_with_lead_description}",
            "prerequisites": {},
            "objects": [
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "free_form_sentence_with_lead_description": "Met an interesting prospect at the trade show yesterday - David Rodriguez from Pinnacle Systems. He mentioned they're evaluating new vendors for their upcoming expansion and seemed very engaged during our conversation."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_003_005",
        "query_templated": "Received a cold email inquiry from Marcus Thompson at FutureTech Dynamics. He expressed strong interest in our solutions for their digital transformation project and requested a follow-up call next week.",
        "query": "Received a cold email inquiry from Marcus Thompson at FutureTech Dynamics. He expressed strong interest in our solutions for their digital transformation project and requested a follow-up call next week.",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "lead_name": "Marcus Thompson",
            "lead_source": "Other",
            "rating": "Hot",
            "company_name": "FutureTech Dynamics"
        },
        "difficulty": "medium",
        "query_template_name": "create_lead",
        "query_template_metadata": {
            "template_id": "sales_003",
            "template_string": "{free_form_sentence_with_lead_description}",
            "prerequisites": {},
            "objects": [
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "free_form_sentence_with_lead_description": "Received a cold email inquiry from Marcus Thompson at FutureTech Dynamics. He expressed strong interest in our solutions for their digital transformation project and requested a follow-up call next week."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_004_001",
        "query_templated": "Convert the lead with name Frank Knight to 'Closed - Converted'. If the lead's company matches an existing account, select that account; otherwise create a new account with the lead's company name. Create a new opportunity with name Knight LLC Opportunity.",
        "query": "Please convert Frank Knight\u2019s lead and mark it as 'Closed - Converted'. If his company already exists as an Account, link the conversion to that Account; if it doesn\u2019t, create a new Account using the lead\u2019s company name. Then create a new Opportunity named Knight LLC Opportunity.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "lead_name": "Frank Knight",
            "opportunity_name": "Knight LLC Opportunity"
        },
        "difficulty": "medium",
        "query_template_name": "convert_lead",
        "query_template_metadata": {
            "template_id": "sales_004",
            "template_string": "Convert the lead with name {lead_name} to 'Closed - Converted'. If the lead's company matches an existing account, select that account; otherwise create a new account with the lead's company name. Create a new opportunity with name {opportunity_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Lead"
                    ]
                }
            },
            "objects": [
                "Opportunity",
                "Account",
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "lead_name": "Frank Knight",
            "opportunity_name": "Knight LLC Opportunity"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_004_002",
        "query_templated": "Convert the lead with name Jane Smith to 'Closed - Converted'. If the lead's company matches an existing account, select that account; otherwise create a new account with the lead's company name. Create a new opportunity with name Tech Giants Opportunity.",
        "query": "Step 1: Convert Jane Smith\u2019s lead so the status is Closed - Converted. Step 2: During conversion, attach it to the existing Account if her company matches; if there\u2019s no match, create a new Account with the lead\u2019s company name. Step 3: Create an Opportunity titled Tech Giants Opportunity.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "lead_name": "Jane Smith",
            "opportunity_name": "Tech Giants Opportunity"
        },
        "difficulty": "medium",
        "query_template_name": "convert_lead",
        "query_template_metadata": {
            "template_id": "sales_004",
            "template_string": "Convert the lead with name {lead_name} to 'Closed - Converted'. If the lead's company matches an existing account, select that account; otherwise create a new account with the lead's company name. Create a new opportunity with name {opportunity_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Lead"
                    ]
                }
            },
            "objects": [
                "Opportunity",
                "Account",
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "lead_name": "Jane Smith",
            "opportunity_name": "Tech Giants Opportunity"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_004_003",
        "query_templated": "Convert the lead with name Alice Johnson to 'Closed - Converted'. If the lead's company matches an existing account, select that account; otherwise create a new account with the lead's company name. Create a new opportunity with name Innovate Ltd Opportunity.",
        "query": "Convert the lead for Alice Johnson to 'Closed - Converted'. If the company on her lead corresponds to an existing Account, select that Account; otherwise, create a new Account named exactly as the lead\u2019s company. After that, set up a new Opportunity called Innovate Ltd Opportunity.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "lead_name": "Alice Johnson",
            "opportunity_name": "Innovate Ltd Opportunity"
        },
        "difficulty": "medium",
        "query_template_name": "convert_lead",
        "query_template_metadata": {
            "template_id": "sales_004",
            "template_string": "Convert the lead with name {lead_name} to 'Closed - Converted'. If the lead's company matches an existing account, select that account; otherwise create a new account with the lead's company name. Create a new opportunity with name {opportunity_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Lead"
                    ]
                }
            },
            "objects": [
                "Opportunity",
                "Account",
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "lead_name": "Alice Johnson",
            "opportunity_name": "Innovate Ltd Opportunity"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_004_004",
        "query_templated": "Convert the lead with name David Lee to 'Closed - Converted'. If the lead's company matches an existing account, select that account; otherwise create a new account with the lead's company name. Create a new opportunity with name Lee Services Opportunity.",
        "query": "For David Lee \u2014 complete the lead conversion (status should be 'Closed - Converted'). Account handling: if the lead\u2019s company matches an existing Account, use it; if not, spin up a new Account using the company name from the lead. Then open an Opportunity named Lee Services Opportunity.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "lead_name": "David Lee",
            "opportunity_name": "Lee Services Opportunity"
        },
        "difficulty": "medium",
        "query_template_name": "convert_lead",
        "query_template_metadata": {
            "template_id": "sales_004",
            "template_string": "Convert the lead with name {lead_name} to 'Closed - Converted'. If the lead's company matches an existing account, select that account; otherwise create a new account with the lead's company name. Create a new opportunity with name {opportunity_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Lead"
                    ]
                }
            },
            "objects": [
                "Opportunity",
                "Account",
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "lead_name": "David Lee",
            "opportunity_name": "Lee Services Opportunity"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_004_005",
        "query_templated": "Convert the lead with name Grace King to 'Closed - Converted'. If the lead's company matches an existing account, select that account; otherwise create a new account with the lead's company name. Create a new opportunity with name King Innovations Opportunity.",
        "query": "Help me wrap up Grace King\u2019s lead: convert it and set the status to 'Closed - Converted'. If there\u2019s an Account with the same company name, associate the lead to that; otherwise create a new Account using the lead\u2019s company name. Finally, create a new Opportunity called King Innovations Opportunity.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "lead_name": "Grace King",
            "opportunity_name": "King Innovations Opportunity"
        },
        "difficulty": "medium",
        "query_template_name": "convert_lead",
        "query_template_metadata": {
            "template_id": "sales_004",
            "template_string": "Convert the lead with name {lead_name} to 'Closed - Converted'. If the lead's company matches an existing account, select that account; otherwise create a new account with the lead's company name. Create a new opportunity with name {opportunity_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Lead"
                    ]
                }
            },
            "objects": [
                "Opportunity",
                "Account",
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "lead_name": "Grace King",
            "opportunity_name": "King Innovations Opportunity"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_005_001",
        "query_templated": "For the opportunity Cloud Software Deal, Schedule an event for meeting with the client to discuss implementation timeline.. Update the opportunity stage to Value Proposition.",
        "query": "For the opportunity Cloud Software Deal, Schedule an event for meeting with the client to discuss implementation timeline. Update the opportunity stage to Value Proposition.",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "activity_type": "Event",
            "opportunity_name": "Cloud Software Deal",
            "activity_description": "Meeting with the client to discuss implementation timeline.",
            "stage_name": "Value Proposition"
        },
        "difficulty": "medium",
        "query_template_name": "update_opportunity_stage_and_activity",
        "query_template_metadata": {
            "template_id": "sales_005",
            "template_string": "For the opportunity {opportunity_name}, {activity_description}. Update the opportunity stage to {stage_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Opportunity"
                    ]
                }
            },
            "objects": [
                "Opportunity",
                "Task",
                "Event"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "opportunity_name": "Cloud Software Deal",
            "activity_description": "Schedule an event for meeting with the client to discuss implementation timeline.",
            "stage_name": "Value Proposition"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_005_002",
        "query_templated": "For the opportunity Enterprise Software Sale, Send a follow-up email to confirm the proposal details.. Update the opportunity stage to Perception Analysis.",
        "query": "For Enterprise Software Sale, could you send a quick follow-up email to Confirm the proposal details, and afterward set the opportunity stage to Perception Analysis?",
        "human_review_comment": "change to align with GT",
        "ground_truth_dict": {
            "activity_type": "Email",
            "opportunity_name": "Enterprise Software Sale",
            "activity_description": "Email: Confirm the proposal details",
            "stage_name": "Perception Analysis"
        },
        "difficulty": "medium",
        "query_template_name": "update_opportunity_stage_and_activity",
        "query_template_metadata": {
            "template_id": "sales_005",
            "template_string": "For the opportunity {opportunity_name}, {activity_description}. Update the opportunity stage to {stage_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Opportunity"
                    ]
                }
            },
            "objects": [
                "Opportunity",
                "Task",
                "Event"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "opportunity_name": "Enterprise Software Sale",
            "activity_description": "Send a follow-up email to confirm the proposal details.",
            "stage_name": "Perception Analysis"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_005_003",
        "query_templated": "For the opportunity Product Development, Log a call with the product team to review final requirements.. Update the opportunity stage to Negotiation/Review.",
        "query": "I just spoke with the product team to Review final requirements\u2014log that call under the Product Development opportunity and move the stage to Negotiation/Review.",
        "human_review_comment": "change to align with GT",
        "ground_truth_dict": {
            "activity_type": "Call",
            "opportunity_name": "Product Development",
            "activity_description": "Review final requirements",
            "stage_name": "Negotiation/Review"
        },
        "difficulty": "medium",
        "query_template_name": "update_opportunity_stage_and_activity",
        "query_template_metadata": {
            "template_id": "sales_005",
            "template_string": "For the opportunity {opportunity_name}, {activity_description}. Update the opportunity stage to {stage_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Opportunity"
                    ]
                }
            },
            "objects": [
                "Opportunity",
                "Task",
                "Event"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "opportunity_name": "Product Development",
            "activity_description": "Log a call with the product team to review final requirements.",
            "stage_name": "Negotiation/Review"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_005_004",
        "query_templated": "For the opportunity Consulting Service, Log the call summary \"He wants to know the price for the product A & B.\". Update the opportunity stage to Proposal/Price Quote.",
        "query": "First, under the Consulting Service opportunity, record this exact call summary: \"He wants to know the price for the product A & B.\" Next, change the stage to Proposal/Price Quote.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "activity_type": "Call",
            "opportunity_name": "Consulting Service",
            "activity_description": "He wants to know the price for the product A & B.",
            "stage_name": "Proposal/Price Quote"
        },
        "difficulty": "medium",
        "query_template_name": "update_opportunity_stage_and_activity",
        "query_template_metadata": {
            "template_id": "sales_005",
            "template_string": "For the opportunity {opportunity_name}, {activity_description}. Update the opportunity stage to {stage_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Opportunity"
                    ]
                }
            },
            "objects": [
                "Opportunity",
                "Task",
                "Event"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "opportunity_name": "Consulting Service",
            "activity_description": "Log the call summary \"He wants to know the price for the product A & B.\"",
            "stage_name": "Proposal/Price Quote"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Leads & Opportunities",
        "task_id": "sales_005_005",
        "query_templated": "For the opportunity Security Solutions, Add a new task with the subject text \"remind me search for the company's revenue\". Update the opportunity stage to Needs Analysis.",
        "query": "Create a new task on the Security Solutions opportunity with the subject line \"remind me search for the company's revenue,\" and update the stage to Needs Analysis.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "activity_type": "Task",
            "opportunity_name": "Security Solutions",
            "activity_description": "remind me search for the company's revenue",
            "stage_name": "Needs Analysis"
        },
        "difficulty": "medium",
        "query_template_name": "update_opportunity_stage_and_activity",
        "query_template_metadata": {
            "template_id": "sales_005",
            "template_string": "For the opportunity {opportunity_name}, {activity_description}. Update the opportunity stage to {stage_name}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Opportunity"
                    ]
                }
            },
            "objects": [
                "Opportunity",
                "Task",
                "Event"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "opportunity_name": "Security Solutions",
            "activity_description": "Add a new task with the subject text \"remind me search for the company's revenue\"",
            "stage_name": "Needs Analysis"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_006_001",
        "query_templated": "Our company R&D department announced a new Product Family for \"Running Shoes\". For this release, we have two products. The first product \"ChillRun\" with the product code \"CHILL-001\" is the \"best fit for lightweight exercise\"; and the second product \"MonsterRun\" with the product code \"MONS-001\" is \"designed for Marathon fans\". Help me to create the relevant info in the Product records.",
        "query": "Our company R&D department announced a new Product Family for \"Running Shoes\". For this release, we have two products. The first product \"ChillRun\" with the product code \"CHILL-001\" is the \"best fit for lightweight exercise\"; and the second product \"MonsterRun\" with the product code \"MONS-001\" is \"designed for Marathon fans\". Help me to create the relevant info in the Product records.",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "product_family_name": "Running Shoes",
            "product_1_name": "ChillRun",
            "product_1_description": "best fit for lightweight exercise",
            "product_2_name": "MonsterRun",
            "product_2_description": "designed for Marathon fans"
        },
        "difficulty": "medium",
        "query_template_name": "create_product_family_and_products",
        "query_template_metadata": {
            "template_id": "sales_006",
            "template_string": "{product_family_name_description}. {product_details}. Help me to create the relevant info in the Product records.",
            "prerequisites": {},
            "objects": [
                "Product2"
            ],
            "metadata_types": [
                "StandardValueSet"
            ]
        },
        "instance_dict": {
            "product_family_name_description": "Our company R&D department announced a new Product Family for \"Running Shoes\"",
            "product_details": "For this release, we have two products. The first product \"ChillRun\" with the product code \"CHILL-001\" is the \"best fit for lightweight exercise\"; and the second product \"MonsterRun\" with the product code \"MONS-001\" is \"designed for Marathon fans\""
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_006_002",
        "query_templated": "TechNova has introduced a new Product Family focused on \"Smart Home Lighting Solutions\". For this release, we have three products. The first product \"BrightEase\" with the product code \"BrightEase\" is a \"budget-friendly smart bulb for everyday use\"; the second product \"GlowSync\" with the product code \"BrightEase\" \"features customizable color schemes and app control\"; and the third product \"LuxEdge\" with the product code \"LuxEdge\" is \"designed for premium interiors with motion sensing and voice assistant integration\". Help me to create the relevant info in the Product records.",
        "query": "TechNova has introduced a new Product Family focused on \"Smart Home Lighting Solutions\". For this release, we have three products. The first product \"BrightEase\" with the product code \"BrightEase\" is a \"budget-friendly smart bulb for everyday use\"; the second product \"GlowSync\" with the product code \"BrightEase\" \"features customizable color schemes and app control\"; and the third product \"LuxEdge\" with the product code \"LuxEdge\" is \"designed for premium interiors with motion sensing and voice assistant integration\". Help me to create the relevant info in the Product records.",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "product_family_name": "Smart Home Lighting Solutions",
            "product_1_name": "BrightEase",
            "product_1_description": "budget-friendly smart bulb for everyday use",
            "product_2_name": "GlowSync",
            "product_2_description": "features customizable color schemes and app control",
            "product_3_name": "LuxEdge",
            "product_3_description": "designed for premium interiors with motion sensing and voice assistant integration"
        },
        "difficulty": "medium",
        "query_template_name": "create_product_family_and_products",
        "query_template_metadata": {
            "template_id": "sales_006",
            "template_string": "{product_family_name_description}. {product_details}. Help me to create the relevant info in the Product records.",
            "prerequisites": {},
            "objects": [
                "Product2"
            ],
            "metadata_types": [
                "StandardValueSet"
            ]
        },
        "instance_dict": {
            "product_family_name_description": "TechNova has introduced a new Product Family focused on \"Smart Home Lighting Solutions\"",
            "product_details": "For this release, we have three products. The first product \"BrightEase\" with the product code \"BrightEase\" is a \"budget-friendly smart bulb for everyday use\"; the second product \"GlowSync\" with the product code \"BrightEase\" \"features customizable color schemes and app control\"; and the third product \"LuxEdge\" with the product code \"LuxEdge\" is \"designed for premium interiors with motion sensing and voice assistant integration\""
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_006_003",
        "query_templated": "EcoMotion has launched a new Product Family in the \"Electric Bike\" category. For this release, we have one product. The product \"CityCruze\" with the product code \"CityCruze\" is \"designed for daily commuters, offering pedal assist, lightweight frame, and a 40-mile battery range\". Help me to create the relevant info in the Product records.",
        "query": "EcoMotion has launched a new Product Family in the \"Electric Bike\" category. For this release, we have one product. The product \"CityCruze\" with the product code \"CityCruze\" is \"designed for daily commuters, offering pedal assist, lightweight frame, and a 40-mile battery range\". Help me to create the relevant info in the Product records.",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "product_family_name": "Electric Bike",
            "product_1_name": "CityCruze",
            "product_1_description": "designed for daily commuters, offering pedal assist, lightweight frame, and a 40-mile battery range"
        },
        "difficulty": "medium",
        "query_template_name": "create_product_family_and_products",
        "query_template_metadata": {
            "template_id": "sales_006",
            "template_string": "{product_family_name_description}. {product_details}. Help me to create the relevant info in the Product records.",
            "prerequisites": {},
            "objects": [
                "Product2"
            ],
            "metadata_types": [
                "StandardValueSet"
            ]
        },
        "instance_dict": {
            "product_family_name_description": "EcoMotion has launched a new Product Family in the \"Electric Bike\" category",
            "product_details": "For this release, we have one product. The product \"CityCruze\" with the product code \"CityCruze\" is \"designed for daily commuters, offering pedal assist, lightweight frame, and a 40-mile battery range\""
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_006_004",
        "query_templated": "The Smart Home Security product family offers advanced solutions for home protection and monitoring.. SmartLock Pro for advanced door security, WatchCam 360 for comprehensive surveillance, and AlertSense for motion detection and alerts. Help me to create the relevant info in the Product records.",
        "query": "The Smart Home Security product family offers advanced solutions for home protection and monitoring.. SmartLock Pro for advanced door security, WatchCam 360 for comprehensive surveillance, and AlertSense for motion detection and alerts. Help me to create the relevant info in the Product records.",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "product_family_name": "Smart Home Security",
            "product_1_name": "SmartLock Pro",
            "product_1_description": "Advanced door security",
            "product_2_name": "WatchCam 360",
            "product_2_description": "Comprehensive surveillance",
            "product_3_name": "AlertSense",
            "product_3_description": "Motion detection and alerts"
        },
        "difficulty": "medium",
        "query_template_name": "create_product_family_and_products",
        "query_template_metadata": {
            "template_id": "sales_006",
            "template_string": "{product_family_name_description}. {product_details}. Help me to create the relevant info in the Product records.",
            "prerequisites": {},
            "objects": [
                "Product2"
            ],
            "metadata_types": [
                "StandardValueSet"
            ]
        },
        "instance_dict": {
            "product_family_name_description": "The Smart Home Security product family offers advanced solutions for home protection and monitoring.",
            "product_details": "SmartLock Pro for advanced door security, WatchCam 360 for comprehensive surveillance, and AlertSense for motion detection and alerts"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_006_005",
        "query_templated": "There is a new family of products focused on Professional Coffee Equipment, used for brewing, grinding, and maintaining coffee. It is designed for use in caf\u00e9s and specialty coffee shops.. BrewMaster Elite for commercial espresso brewing, GrindTech Pro for precision bean grinding, SteamForce for milk frothing, and CleanCycle for automated cleaning systems. Help me to create the relevant info in the Product records.",
        "query": "There is a new family of products focused on Professional Coffee Equipment, used for brewing, grinding, and maintaining coffee. It is designed for use in caf\u00e9s and specialty coffee shops.. BrewMaster Elite for commercial espresso brewing, GrindTech Pro for precision bean grinding, SteamForce for milk frothing, and CleanCycle for automated cleaning systems. Help me to create the relevant info in the Product records.",
        "human_review_comment": "reject; use the orginal",
        "ground_truth_dict": {
            "product_family_name": "Professional Coffee Equipment",
            "product_1_name": "BrewMaster Elite",
            "product_1_description": "Commercial espresso brewing",
            "product_2_name": "GrindTech Pro",
            "product_2_description": "Precision bean grinding",
            "product_3_name": "SteamForce",
            "product_3_description": "Milk frothing",
            "product_4_name": "CleanCycle",
            "product_4_description": "Automated cleaning systems"
        },
        "difficulty": "medium",
        "query_template_name": "create_product_family_and_products",
        "query_template_metadata": {
            "template_id": "sales_006",
            "template_string": "{product_family_name_description}. {product_details}. Help me to create the relevant info in the Product records.",
            "prerequisites": {},
            "objects": [
                "Product2"
            ],
            "metadata_types": [
                "StandardValueSet"
            ]
        },
        "instance_dict": {
            "product_family_name_description": "There is a new family of products focused on Professional Coffee Equipment, used for brewing, grinding, and maintaining coffee. It is designed for use in caf\u00e9s and specialty coffee shops.",
            "product_details": "BrewMaster Elite for commercial espresso brewing, GrindTech Pro for precision bean grinding, SteamForce for milk frothing, and CleanCycle for automated cleaning systems"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_007_001",
        "query_templated": "Create price books with the following details: Set up two price books for the product \"ThermalMax Pro\": one called \"Holiday Sale\" with a unit price of $150, and another called \"Year End Special\" with a unit price of $140.. Each price book should include the specified products with their respective unit prices.",
        "query": "Go ahead and set up two price books for the ThermalMax Pro\u2014one named Holiday Sale at $150 per unit and another named Year End Special at $140 per unit. Make sure the specified product is included in each book with those exact unit prices.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "product_name": "ThermalMax Pro",
            "price_book_name1": "Holiday Sale",
            "unit_price1": 150,
            "price_book_name2": "Year End Special",
            "unit_price2": 140
        },
        "difficulty": "medium",
        "query_template_name": "create_price_books",
        "query_template_metadata": {
            "template_id": "sales_007",
            "template_string": "Create price books with the following details: {price_book_details}. Each price book should include the specified products with their respective unit prices.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Product2",
                        "PricebookEntry"
                    ]
                }
            },
            "objects": [
                "PricebookEntry",
                "Pricebook2"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "price_book_details": "Set up two price books for the product \"ThermalMax Pro\": one called \"Holiday Sale\" with a unit price of $150, and another called \"Year End Special\" with a unit price of $140."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_007_002",
        "query_templated": "Create price books with the following details: Set up two price books for the product \"CoolBreeze Elite\": one called \"Summer Special\" with a unit price of $120, and another called \"Winter Deal\" with a unit price of $110.. Each price book should include the specified products with their respective unit prices.",
        "query": "Seasonal promos incoming\u2014please create price books for CoolBreeze Elite: Summer Special priced at $120 per unit and Winter Deal priced at $110 per unit. Include the specified product in both price books, using those unit prices.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "product_name": "CoolBreeze Elite",
            "price_book_name1": "Summer Special",
            "unit_price1": 120,
            "price_book_name2": "Winter Deal",
            "unit_price2": 110
        },
        "difficulty": "medium",
        "query_template_name": "create_price_books",
        "query_template_metadata": {
            "template_id": "sales_007",
            "template_string": "Create price books with the following details: {price_book_details}. Each price book should include the specified products with their respective unit prices.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Product2",
                        "PricebookEntry"
                    ]
                }
            },
            "objects": [
                "PricebookEntry",
                "Pricebook2"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "price_book_details": "Set up two price books for the product \"CoolBreeze Elite\": one called \"Summer Special\" with a unit price of $120, and another called \"Winter Deal\" with a unit price of $110."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_007_003",
        "query_templated": "Create price books with the following details: Set up two price books for the product \"Smart Fitness Tracker\": one called \"Fitness Promo\" with a unit price of $75, and another called \"Wellness Special\" with a unit price of $70.. Each price book should include the specified products with their respective unit prices.",
        "query": "Do two things for the Smart Fitness Tracker: 1) create a price book called Fitness Promo with a $75 unit price, and 2) create another called Wellness Special with a $70 unit price. Ensure the specified product is added to each price book at those unit prices.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "product_name": "Smart Fitness Tracker",
            "price_book_name1": "Fitness Promo",
            "unit_price1": 75,
            "price_book_name2": "Wellness Special",
            "unit_price2": 70
        },
        "difficulty": "medium",
        "query_template_name": "create_price_books",
        "query_template_metadata": {
            "template_id": "sales_007",
            "template_string": "Create price books with the following details: {price_book_details}. Each price book should include the specified products with their respective unit prices.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Product2",
                        "PricebookEntry"
                    ]
                }
            },
            "objects": [
                "PricebookEntry",
                "Pricebook2"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "price_book_details": "Set up two price books for the product \"Smart Fitness Tracker\": one called \"Fitness Promo\" with a unit price of $75, and another called \"Wellness Special\" with a unit price of $70."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_007_004",
        "query_templated": "Create price books with the following details: I want to build custom price books for customers with different membership level. For silver members, the unit price for the product \"Organic Skincare Set\" is $100 and for the golden members, the unit price is $80.. Each price book should include the specified products with their respective unit prices.",
        "query": "Set up member-tier price books: if it\u2019s for silver members, price the Organic Skincare Set at $100 per unit; if it\u2019s for golden members, set it to $80 per unit. Please include the specified product in each book with those unit prices.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "product_name": "Organic Skincare Set",
            "price_book_name1": "Silver Members",
            "unit_price1": 100,
            "price_book_name2": "Golden Members",
            "unit_price2": 80
        },
        "difficulty": "medium",
        "query_template_name": "create_price_books",
        "query_template_metadata": {
            "template_id": "sales_007",
            "template_string": "Create price books with the following details: {price_book_details}. Each price book should include the specified products with their respective unit prices.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Product2",
                        "PricebookEntry"
                    ]
                }
            },
            "objects": [
                "PricebookEntry",
                "Pricebook2"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "price_book_details": "I want to build custom price books for customers with different membership level. For silver members, the unit price for the product \"Organic Skincare Set\" is $100 and for the golden members, the unit price is $80."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_007_005",
        "query_templated": "Create price books with the following details: I want to have different pricing strategy based on purchase quantity. Therefore, I need to create two Price books. One is named \"Bulk Sale\" and the unit price for the Titanium Pro Laptop is $2,000; and the other is named \"Starter Sale\" and the unit price should be $3,000.. Each price book should include the specified products with their respective unit prices.",
        "query": "I\u2019m implementing quantity-based pricing for the Titanium Pro Laptop\u2014create two price books: Bulk Sale at $2,000 per unit and Starter Sale at $3,000 per unit. Include the specified product(s) in both price books at those unit prices.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "product_name": "Titanium Pro Laptop",
            "price_book_name1": "Bulk Sale",
            "unit_price1": 2000,
            "price_book_name2": "Starter Sale",
            "unit_price2": 3000
        },
        "difficulty": "medium",
        "query_template_name": "create_price_books",
        "query_template_metadata": {
            "template_id": "sales_007",
            "template_string": "Create price books with the following details: {price_book_details}. Each price book should include the specified products with their respective unit prices.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Product2",
                        "PricebookEntry"
                    ]
                }
            },
            "objects": [
                "PricebookEntry",
                "Pricebook2"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "price_book_details": "I want to have different pricing strategy based on purchase quantity. Therefore, I need to create two Price books. One is named \"Bulk Sale\" and the unit price for the Titanium Pro Laptop is $2,000; and the other is named \"Starter Sale\" and the unit price should be $3,000."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_008_001",
        "query_templated": "The client shows a great interest in the product 'ThermalMax Pro'. Create a quote with the name 'Holiday Sale' for the opportunity 'Product Development' which expires 10 days from today. Let's apply 10% discount on the list price to make it the final Sales price. To qualify this price, the quantity needs to be 10.",
        "query": "The prospect is really into ThermalMax Pro\u2014please spin up a quote titled \"Holiday Sale\" on the \"Product Development\" opportunity. Set it to expire 10 days from today. Make the final sales price equal to list price minus 10%, and only honor that pricing when the quantity is 10.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "product_name": "ThermalMax Pro",
            "quote_name": "Holiday Sale",
            "opportunity_name": "Product Development",
            "expiration_duration": "tendays",
            "discount_percentage": 10,
            "quantity": 10
        },
        "difficulty": "hard",
        "query_template_name": "create_quote",
        "query_template_metadata": {
            "template_id": "sales_008",
            "template_string": "The client shows a great interest in the product '{product_name}'. Create a quote with the name '{quote_name}' for the opportunity '{opportunity_name}' which expires {expiration_duration} from today. Let's apply {discount_percentage}% discount on the list price to make it the final Sales price. To qualify this price, the quantity needs to be {quantity}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Settings": [
                            "Quote"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "Product2",
                        "PricebookEntry",
                        "Opportunity"
                    ]
                }
            },
            "objects": [
                "Opportunity"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "product_name": "ThermalMax Pro",
            "quote_name": "Holiday Sale",
            "opportunity_name": "Product Development",
            "expiration_duration": "10 days",
            "discount_percentage": 10,
            "quantity": 10
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_008_002",
        "query_templated": "The client shows a great interest in the product 'CoolBreeze Elite'. Create a quote with the name 'Summer Special' for the opportunity 'Maintenance Contract' which expires 1 week from today. Let's apply 3.5% discount on the list price to make it the final Sales price. To qualify this price, the quantity needs to be 14.",
        "query": "The customer\u2019s excited about CoolBreeze Elite. Could you create a \"Summer Special\" quote tied to the \"Maintenance Contract\" opportunity that expires one week from today? Set the final sales price by taking 3.5% off the list price, with the discount applicable only if they order 14 units.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "product_name": "CoolBreeze Elite",
            "quote_name": "Summer Special",
            "opportunity_name": "Maintenance Contract",
            "expiration_duration": "oneweek",
            "discount_percentage": 3.5,
            "quantity": 14
        },
        "difficulty": "hard",
        "query_template_name": "create_quote",
        "query_template_metadata": {
            "template_id": "sales_008",
            "template_string": "The client shows a great interest in the product '{product_name}'. Create a quote with the name '{quote_name}' for the opportunity '{opportunity_name}' which expires {expiration_duration} from today. Let's apply {discount_percentage}% discount on the list price to make it the final Sales price. To qualify this price, the quantity needs to be {quantity}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Settings": [
                            "Quote"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "Product2",
                        "PricebookEntry",
                        "Opportunity"
                    ]
                }
            },
            "objects": [
                "Opportunity"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "product_name": "CoolBreeze Elite",
            "quote_name": "Summer Special",
            "opportunity_name": "Maintenance Contract",
            "expiration_duration": "1 week",
            "discount_percentage": 3.5,
            "quantity": 14
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_008_003",
        "query_templated": "The client shows a great interest in the product 'Smart Fitness Tracker'. Create a quote with the name 'Fitness Promo' for the opportunity 'IT Outsourcing' which expires 5 days from today. Let's apply 13.2% discount on the list price to make it the final Sales price. To qualify this price, the quantity needs to be 35.",
        "query": "Lots of buzz around the Smart Fitness Tracker. Draft a quote named \"Fitness Promo\" for the \"IT Outsourcing\" opportunity; have it expire 5 days from today. Final sales price should be list less 13.2%, and this rate should only qualify at a quantity of 35.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "product_name": "Smart Fitness Tracker",
            "quote_name": "Fitness Promo",
            "opportunity_name": "IT Outsourcing",
            "expiration_duration": "fivedays",
            "discount_percentage": 13.2,
            "quantity": 35
        },
        "difficulty": "hard",
        "query_template_name": "create_quote",
        "query_template_metadata": {
            "template_id": "sales_008",
            "template_string": "The client shows a great interest in the product '{product_name}'. Create a quote with the name '{quote_name}' for the opportunity '{opportunity_name}' which expires {expiration_duration} from today. Let's apply {discount_percentage}% discount on the list price to make it the final Sales price. To qualify this price, the quantity needs to be {quantity}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Settings": [
                            "Quote"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "Product2",
                        "PricebookEntry",
                        "Opportunity"
                    ]
                }
            },
            "objects": [
                "Opportunity"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "product_name": "Smart Fitness Tracker",
            "quote_name": "Fitness Promo",
            "opportunity_name": "IT Outsourcing",
            "expiration_duration": "5 days",
            "discount_percentage": 13.2,
            "quantity": 35
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_008_004",
        "query_templated": "The client shows a great interest in the product 'Organic Skincare Set'. Create a quote with the name 'Silver Members' for the opportunity 'Digital Marketing' which expires 2 weeks from today. Let's apply 15.4% discount on the list price to make it the final Sales price. To qualify this price, the quantity needs to be 20.",
        "query": "We\u2019ve got strong interest in the Organic Skincare Set. Please issue a quote called \"Silver Members\" linked to the \"Digital Marketing\" opportunity, expiring 2 weeks from today. Set the final sales price by applying a 15.4% discount to the list price, and require a purchase quantity of 20 to qualify.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "product_name": "Organic Skincare Set",
            "quote_name": "Silver Members",
            "opportunity_name": "Digital Marketing",
            "expiration_duration": "twoweeks",
            "discount_percentage": 15.4,
            "quantity": 20
        },
        "difficulty": "hard",
        "query_template_name": "create_quote",
        "query_template_metadata": {
            "template_id": "sales_008",
            "template_string": "The client shows a great interest in the product '{product_name}'. Create a quote with the name '{quote_name}' for the opportunity '{opportunity_name}' which expires {expiration_duration} from today. Let's apply {discount_percentage}% discount on the list price to make it the final Sales price. To qualify this price, the quantity needs to be {quantity}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Settings": [
                            "Quote"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "Product2",
                        "PricebookEntry",
                        "Opportunity"
                    ]
                }
            },
            "objects": [
                "Opportunity"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "product_name": "Organic Skincare Set",
            "quote_name": "Silver Members",
            "opportunity_name": "Digital Marketing",
            "expiration_duration": "2 weeks",
            "discount_percentage": 15.4,
            "quantity": 20
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_008_005",
        "query_templated": "The client shows a great interest in the product 'Titanium Pro Laptop'. Create a quote with the name 'Bulk Sale' for the opportunity 'Supply Chain Project' which expires 1 month from today. Let's apply 15% discount on the list price to make it the final Sales price. To qualify this price, the quantity needs to be 2.",
        "query": "The client is keen on the Titanium Pro Laptop. Prepare a \"Bulk Sale\" quote for the \"Supply Chain Project\" opportunity that\u2019s valid for 1 month from today. Final sales price = list price minus 15%, and make this pricing contingent on buying 2 units.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "product_name": "Titanium Pro Laptop",
            "quote_name": "Bulk Sale",
            "opportunity_name": "Supply Chain Project",
            "expiration_duration": "onemonth",
            "discount_percentage": 15,
            "quantity": 2
        },
        "difficulty": "hard",
        "query_template_name": "create_quote",
        "query_template_metadata": {
            "template_id": "sales_008",
            "template_string": "The client shows a great interest in the product '{product_name}'. Create a quote with the name '{quote_name}' for the opportunity '{opportunity_name}' which expires {expiration_duration} from today. Let's apply {discount_percentage}% discount on the list price to make it the final Sales price. To qualify this price, the quantity needs to be {quantity}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Settings": [
                            "Quote"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "Product2",
                        "PricebookEntry",
                        "Opportunity"
                    ]
                }
            },
            "objects": [
                "Opportunity"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "product_name": "Titanium Pro Laptop",
            "quote_name": "Bulk Sale",
            "opportunity_name": "Supply Chain Project",
            "expiration_duration": "1 month",
            "discount_percentage": 15,
            "quantity": 2
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_009_001",
        "query_templated": "Prepare a contract for the account Knight LLC. The start date is today. The contract term is 12 months. Then create an order based on this contract. The order start date should be the Friday following the contract start date.",
        "query": "Could you take care of the Knight LLC account for me? Build a 12\u2011month contract that begins today. After that\u2019s created, open an order from this contract and set its start date to be the next Friday after the contract\u2019s start date.",
        "human_review_comment": "modified multiple palces",
        "ground_truth_dict": {
            "account_name": "Knight LLC",
            "start_date": "today",
            "contract_term_months": 12,
            "order_start_date": "next friday"
        },
        "difficulty": "hard",
        "query_template_name": "create_contract_and_order",
        "query_template_metadata": {
            "template_id": "sales_009",
            "template_string": "Prepare a contract for the account {account_name}. The start date is {start_date}. The contract term is {contract_term_months} months. Then create an order based on this contract. The order start date should be {order_start_date}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Account"
                    ]
                }
            },
            "objects": [
                "Order",
                "Contract"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "account_name": "Knight LLC",
            "start_date": "today",
            "contract_term_months": 12,
            "order_start_date": "the Friday following the contract start date"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_009_002",
        "query_templated": "Prepare a contract for the account Lee Services. The start date is next week. The contract term is 24 months. Then create an order based on this contract. The order start date should be three weeks after contract date.",
        "query": "On the Lee Services account, set up a contract with a 24\u2011month term starting on the next week. Once it\u2019s in place, generate an order tied to that contract and have the order go live on three weeks after contract date.",
        "human_review_comment": "modified multiple palces",
        "ground_truth_dict": {
            "account_name": "Lee Services",
            "start_date": "1 week",
            "contract_term_months": 24,
            "order_start_date": "3 weeks"
        },
        "difficulty": "hard",
        "query_template_name": "create_contract_and_order",
        "query_template_metadata": {
            "template_id": "sales_009",
            "template_string": "Prepare a contract for the account {account_name}. The start date is {start_date}. The contract term is {contract_term_months} months. Then create an order based on this contract. The order start date should be {order_start_date}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Account"
                    ]
                }
            },
            "objects": [
                "Order",
                "Contract"
            ],
            "metadata_types": []
        },
        "instance_dict": "{'account_name': 'Lee Services', 'start_date': 'next week': '24', 'order_start_date': 'three weeks after contract start date'}",
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_009_003",
        "query_templated": "Prepare a contract for the account Green Solutions. The start date is next month. The contract term is 18 months. Then create an order based on this contract. The order start date should be a month after contract start date.",
        "query": "For the Green Solutions account, please: 1) Create a contract that starts in 1 month from today. 2) Make the term 18 months. 3) From that contract, create an associated order that begins on 1 month after the contract start date.",
        "human_review_comment": "modified multiple palces",
        "ground_truth_dict": {
            "account_name": "Green Solutions",
            "start_date": "1 month",
            "contract_term_months": 18,
            "order_start_date": "1 month"
        },
        "difficulty": "hard",
        "query_template_name": "create_contract_and_order",
        "query_template_metadata": {
            "template_id": "sales_009",
            "template_string": "Prepare a contract for the account {account_name}. The start date is {start_date}. The contract term is {contract_term_months} months. Then create an order based on this contract. The order start date should be {order_start_date}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Account"
                    ]
                }
            },
            "objects": [
                "Order",
                "Contract"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "account_name": "Green Solutions",
            "start_date": "next month",
            "contract_term_months": 18,
            "order_start_date": " a month after contract start date"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_009_004",
        "query_templated": "Prepare a contract for the account Tech Giants. The start date is three weeks from today. The contract term is 12 months. Then create an order based on this contract. The order start date should be one day after the Contract start date.",
        "query": "Prepare a contract for the account Tech Giants. The start date is three weeks from today. The contract term is 12 months. Then create an order based on this contract. The order start date should be one day after the Contract start date.",
        "human_review_comment": "modified multiple palces",
        "ground_truth_dict": {
            "account_name": "Tech Giants",
            "start_date": "3 weeks",
            "contract_term_months": 12,
            "order_start_date": "1 day"
        },
        "difficulty": "hard",
        "query_template_name": "create_contract_and_order",
        "query_template_metadata": {
            "template_id": "sales_009",
            "template_string": "Prepare a contract for the account {account_name}. The start date is {start_date}. The contract term is {contract_term_months} months. Then create an order based on this contract. The order start date should be {order_start_date}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Account"
                    ]
                }
            },
            "objects": [
                "Order",
                "Contract"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "account_name": "Tech Giants",
            "start_date": "three weeks from today",
            "contract_term_months": 12,
            "order_start_date": "one day after the Contract start date"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "CPQ",
        "task_id": "sales_009_005",
        "query_templated": "Prepare a contract for the account Black Enterprises. The start date is in four weeks. The contract term is 6 months. Then create an order based on this contract. The order start date should be two weeks after the Contract start date.",
        "query": "Let\u2019s handle the Black Enterprises account like this: set up a contract starting in 4 weeks with a 6\u2011month term. Then create an order from that contract and schedule it to begin two weeks after the contract start date.",
        "human_review_comment": null,
        "ground_truth_dict": {
            "account_name": "Black Enterprises",
            "start_date": "4 weeks",
            "contract_term_months": 6,
            "order_start_date": "2 weeks"
        },
        "difficulty": "hard",
        "query_template_name": "create_contract_and_order",
        "query_template_metadata": {
            "template_id": "sales_009",
            "template_string": "Prepare a contract for the account {account_name}. The start date is {start_date}. The contract term is {contract_term_months} months. Then create an order based on this contract. The order start date should be {order_start_date}.",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Account"
                    ]
                }
            },
            "objects": [
                "Order",
                "Contract"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "account_name": "Black Enterprises",
            "start_date": "in four weeks",
            "contract_term_months": 6,
            "order_start_date": "two weeks after the Contract start date"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Configuration",
        "task_id": "sales_010_001",
        "query_templated": "Create a new Sales Process named 'B2B' which only includes the following stages: Prospecting, Qualification, Closed Won, Closed Lost.",
        "query": "Go ahead and spin up a Sales Process called 'B2B' with exactly these stages\u2014and nothing else: Prospecting, Qualification, Closed Won, Closed Lost.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "sales_process_name": "B2B",
            "comma_separated_stages_list": "Prospecting, Qualification, Closed Won, Closed Lost"
        },
        "difficulty": "easy",
        "query_template_name": "create_sales_process",
        "query_template_metadata": {
            "template_id": "sales_010",
            "template_string": "Create a new Sales Process named '{sales_process_name}' which only includes the following stages: {comma_separated_stages_list}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "BusinessProcess"
            ]
        },
        "instance_dict": {
            "sales_process_name": "B2B",
            "comma_separated_stages_list": "Prospecting, Qualification, Closed Won, Closed Lost"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Configuration",
        "task_id": "sales_010_002",
        "query_templated": "Create a new Sales Process named 'SMB Sales' which only includes the following stages: Prospecting, Value Proposition, Negotiation/Review, Closed Won, Closed Lost.",
        "query": "Please configure a new Sales Process named 'SMB Sales' and restrict it solely to these stages: Prospecting, Value Proposition, Negotiation/Review, Closed Won, Closed Lost.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "sales_process_name": "SMB Sales",
            "comma_separated_stages_list": "Prospecting, Value Proposition, Negotiation%2FReview, Closed Won, Closed Lost"
        },
        "difficulty": "easy",
        "query_template_name": "create_sales_process",
        "query_template_metadata": {
            "template_id": "sales_010",
            "template_string": "Create a new Sales Process named '{sales_process_name}' which only includes the following stages: {comma_separated_stages_list}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "BusinessProcess"
            ]
        },
        "instance_dict": {
            "sales_process_name": "SMB Sales",
            "comma_separated_stages_list": "Prospecting, Value Proposition, Negotiation/Review, Closed Won, Closed Lost"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Configuration",
        "task_id": "sales_010_003",
        "query_templated": "Create a new Sales Process named 'B2C' which only includes the following stages: Needs Analysis, Proposal/Price Quote, Closed Won.",
        "query": "Let\u2019s keep this simple: create a Sales Process named 'B2C' that includes only three stages\u2014Needs Analysis, Proposal/Price Quote, and Closed Won.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "sales_process_name": "B2C",
            "comma_separated_stages_list": "Needs Analysis, Proposal%2FPrice Quote, Closed Won"
        },
        "difficulty": "easy",
        "query_template_name": "create_sales_process",
        "query_template_metadata": {
            "template_id": "sales_010",
            "template_string": "Create a new Sales Process named '{sales_process_name}' which only includes the following stages: {comma_separated_stages_list}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "BusinessProcess"
            ]
        },
        "instance_dict": {
            "sales_process_name": "B2C",
            "comma_separated_stages_list": "Needs Analysis, Proposal/Price Quote, Closed Won"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Configuration",
        "task_id": "sales_010_004",
        "query_templated": "Create a new Sales Process named 'Customer Journey Sales Process' which only includes the following stages: Prospecting, Value Proposition, Closed Won, Closed Lost.",
        "query": "Could you set up a Sales Process titled 'Customer Journey Sales Process' and make sure it contains just these stages, no others: Prospecting, Value Proposition, Closed Won, Closed Lost?",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "sales_process_name": "Customer Journey Sales Process",
            "comma_separated_stages_list": "Prospecting, Value Proposition, Closed Won, Closed Lost"
        },
        "difficulty": "easy",
        "query_template_name": "create_sales_process",
        "query_template_metadata": {
            "template_id": "sales_010",
            "template_string": "Create a new Sales Process named '{sales_process_name}' which only includes the following stages: {comma_separated_stages_list}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "BusinessProcess"
            ]
        },
        "instance_dict": {
            "sales_process_name": "Customer Journey Sales Process",
            "comma_separated_stages_list": "Prospecting, Value Proposition, Closed Won, Closed Lost"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Configuration",
        "task_id": "sales_010_005",
        "query_templated": "Create a new Sales Process named 'Rocket Launch Sales Methodology' which only includes the following stages: Proposal/Price Quote, Negotiation/Review, Closed Won, Closed Lost.",
        "query": "Kick off a new Sales Process called 'Rocket Launch Sales Methodology' and limit it to only these stages: Proposal/Price Quote, Negotiation/Review, Closed Won, Closed Lost.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "sales_process_name": "Rocket Launch Sales Methodology",
            "comma_separated_stages_list": "Proposal%2FPrice Quote, Negotiation%2FReview, Closed Won, Closed Lost"
        },
        "difficulty": "easy",
        "query_template_name": "create_sales_process",
        "query_template_metadata": {
            "template_id": "sales_010",
            "template_string": "Create a new Sales Process named '{sales_process_name}' which only includes the following stages: {comma_separated_stages_list}.",
            "prerequisites": {},
            "objects": [],
            "metadata_types": [
                "BusinessProcess"
            ]
        },
        "instance_dict": {
            "sales_process_name": "Rocket Launch Sales Methodology",
            "comma_separated_stages_list": "Proposal/Price Quote, Negotiation/Review, Closed Won, Closed Lost"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Configuration",
        "task_id": "sales_011_001",
        "query_templated": "Create a territory model named 'by revenue' with rule name 'annual revenue is USD'. Set the selection criteria as 'annual revenue is greater than 10,000'. Enable sales territory if not already enabled.",
        "query": "Spin up a new territory model called 'by revenue'. Give its rule the name 'annual revenue is USD'. Filter the selection to accounts where annual revenue is greater than 10,000. If sales territory isn\u2019t enabled yet, please enable it.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "territory_model_name": "by revenue",
            "rule_name": "annual revenue is USD",
            "filters": [
                [
                    "Account.AnnualRevenue",
                    "greaterThan",
                    10000
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_territory_model",
        "query_template_metadata": {
            "template_id": "sales_011",
            "template_string": "Create a territory model named '{territory_model_name}' with rule name '{rule_name}'. Set the selection criteria as '{selection_criteria}'. Enable sales territory if not already enabled.",
            "prerequisites": {},
            "objects": [
                "ObjectTerritory2AssignmentRuleItem",
                "ObjectTerritory2AssignmentRule",
                "Territory2Model"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "territory_model_name": "by revenue",
            "rule_name": "annual revenue is USD",
            "selection_criteria": "annual revenue is greater than 10,000"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Configuration",
        "task_id": "sales_011_002",
        "query_templated": "Create a territory model named 'by Employees' with rule name 'Number of Employees and Year'. Set the selection criteria as 'total employees is less than or equal to 50 and account year started is greater than or equal to 2020'. Enable sales territory if not already enabled.",
        "query": "Could you set up a territory model named 'by Employees' with the rule name 'Number of Employees and Year'? Apply this filter: total employees is less than or equal to 50 and account year started is greater than or equal to 2020. Also, make sure sales territory is turned on if it isn\u2019t already.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "territory_model_name": "by Employees",
            "rule_name": "Number of Employees and Year",
            "filters": [
                [
                    "Account.NumberOfEmployees",
                    "lessOrEqual",
                    50
                ],
                [
                    "Account.YearStarted",
                    "greaterOrEqual",
                    2020
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_territory_model",
        "query_template_metadata": {
            "template_id": "sales_011",
            "template_string": "Create a territory model named '{territory_model_name}' with rule name '{rule_name}'. Set the selection criteria as '{selection_criteria}'. Enable sales territory if not already enabled.",
            "prerequisites": {},
            "objects": [
                "ObjectTerritory2AssignmentRuleItem",
                "ObjectTerritory2AssignmentRule",
                "Territory2Model"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "territory_model_name": "by Employees",
            "rule_name": "Number of Employees and Year",
            "selection_criteria": "total employees is less than or equal to 50 and account year started is greater than or equal to 2020"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Configuration",
        "task_id": "sales_011_003",
        "query_templated": "Create a territory model named 'by Finance Industry' with rule name 'Industry, Active and Type'. Set the selection criteria as 'Industry equals Finance, Account equals Active, and Type is not equal to Channel/Partner Reseller or Installation Partner'. Enable sales territory if not already enabled.",
        "query": "Please ensure sales territory is enabled. Then create a territory model titled 'by Finance Industry' and assign the rule name 'Industry, Active and Type'. Configure the criteria so that Industry equals Finance, Account equals Active, and Type is not equal to Channel/Partner Reseller or Installation Partner.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "territory_model_name": "by Finance Industry",
            "rule_name": "Industry, Active and Type",
            "filters": [
                [
                    "Account.Industry",
                    "equals",
                    "Finance"
                ],
                [
                    "Account.Active__c",
                    "equals",
                    "true"
                ],
                [
                    "Account.Type",
                    "notEqual",
                    "Channel/Partner Reseller"
                ],
                [
                    "Account.Type",
                    "notEqual",
                    "Installation Partner"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_territory_model",
        "query_template_metadata": {
            "template_id": "sales_011",
            "template_string": "Create a territory model named '{territory_model_name}' with rule name '{rule_name}'. Set the selection criteria as '{selection_criteria}'. Enable sales territory if not already enabled.",
            "prerequisites": {},
            "objects": [
                "ObjectTerritory2AssignmentRuleItem",
                "ObjectTerritory2AssignmentRule",
                "Territory2Model"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "territory_model_name": "by Finance Industry",
            "rule_name": "Industry, Active and Type",
            "selection_criteria": "Industry equals Finance, Account equals Active, and Type is not equal to Channel/Partner Reseller or Installation Partner"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Configuration",
        "task_id": "sales_011_004",
        "query_templated": "Create a territory model named 'Global Sales Territory' with rule name 'Global Sales Territory'. Set the selection criteria as 'Customer Priority is High'. Enable sales territory if not already enabled.",
        "query": "If sales territory is disabled, enable it. After that, create a territory model named 'Global Sales Territory' with a rule also called 'Global Sales Territory'. Set the selection criteria to include only records where Customer Priority is High.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "territory_model_name": "Global Sales Territory",
            "rule_name": "Global Sales Territory",
            "filters": [
                [
                    "Account.CustomerPriority__c",
                    "equals",
                    "High"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_territory_model",
        "query_template_metadata": {
            "template_id": "sales_011",
            "template_string": "Create a territory model named '{territory_model_name}' with rule name '{rule_name}'. Set the selection criteria as '{selection_criteria}'. Enable sales territory if not already enabled.",
            "prerequisites": {},
            "objects": [
                "ObjectTerritory2AssignmentRuleItem",
                "ObjectTerritory2AssignmentRule",
                "Territory2Model"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "territory_model_name": "Global Sales Territory",
            "rule_name": "Global Sales Territory",
            "selection_criteria": "Customer Priority is High"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Campaign",
        "task_id": "sales_012_001",
        "query_templated": "Create a new campaign with following details - Name: Introduce the new shoes collections; type: Webinar; Start Date: two weeks from today; Budget: 10000; Expected Revenue in Campaign: 10 times the budget. Finally, invite the following leads to this campaign: Ali Alaba and Leo Messi",
        "query": "Please create a new campaign called \"Introduce the new shoes collections\" as a Webinar. Schedule it to start two weeks from today. Set the budget at 10,000 and aim for expected revenue equal to 10x the budget. Invite Ali Alaba and Leo Messi.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "campaign_name": "Introduce the new shoes collections",
            "campaign_type": "Webinar",
            "start_date": 2,
            "budget_amount": 10000,
            "expected_revenue": 100000,
            "leads": [
                "Ali Alaba",
                "Leo Messi"
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_campaign",
        "query_template_metadata": {
            "template_id": "sales_012",
            "template_string": "Create a new campaign with following details - Name: {campaign_name}; type: {campaign_type}; Start Date: {start_date}; Budget: {budget_amount}; Expected Revenue in Campaign: {expected_revenue}. Finally, invite the following leads to this campaign: {leads}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Lead"
                    ]
                }
            },
            "objects": [
                "Campaign"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "campaign_name": "Introduce the new shoes collections",
            "campaign_type": "Webinar",
            "start_date": "two weeks from today",
            "budget_amount": 10000,
            "expected_revenue": "10 times the budget",
            "leads": "Ali Alaba and Leo Messi"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Campaign",
        "task_id": "sales_012_002",
        "query_templated": "Create a new campaign with following details - Name: Autumn Trail Running Launch; type: Direct Mail; Start Date: four weeks from today; Budget: 10000; Expected Revenue in Campaign: 3 times the Budget. Finally, invite the following leads to this campaign: Amanda Klein",
        "query": "Set up a campaign with these details: - Name: Autumn Trail Running Launch - Type: Direct Mail - Start date: four weeks from today - Budget: 10,000 - Expected revenue: 3 times the budget Then invite Amanda Klein to the campaign.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "campaign_name": "Autumn Trail Running Launch",
            "campaign_type": "Direct Mail",
            "start_date": 4,
            "budget_amount": 10000,
            "expected_revenue": 30000,
            "leads": [
                "Amanda Klein"
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_campaign",
        "query_template_metadata": {
            "template_id": "sales_012",
            "template_string": "Create a new campaign with following details - Name: {campaign_name}; type: {campaign_type}; Start Date: {start_date}; Budget: {budget_amount}; Expected Revenue in Campaign: {expected_revenue}. Finally, invite the following leads to this campaign: {leads}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Lead"
                    ]
                }
            },
            "objects": [
                "Campaign"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "campaign_name": "Autumn Trail Running Launch",
            "campaign_type": "Direct Mail",
            "start_date": "four weeks from today",
            "budget_amount": 10000,
            "expected_revenue": "3 times the Budget",
            "leads": "Amanda Klein"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Campaign",
        "task_id": "sales_012_003",
        "query_templated": "Create a new campaign with following details - Name: Summer Yoga Webinar Series; type: Email; Start Date: one week from today; Budget: 9000; Expected Revenue in Campaign: 4 times the Budget plus 1,500. Finally, invite the following leads to this campaign: Priya Sharma, Lucas Chen, Jordan Hayes",
        "query": "Could you launch an Email campaign titled \"Summer Yoga Webinar Series\" starting one week from today? Budget it at 9,000, and set expected revenue to four times the budget plus 1,500. Please invite Priya Sharma, Lucas Chen, and Jordan Hayes.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "campaign_name": "Summer Yoga Webinar Series",
            "campaign_type": "Email",
            "start_date": 1,
            "budget_amount": 9000,
            "expected_revenue": 39500,
            "leads": [
                "Priya Sharma",
                "Lucas Chen",
                "Jordan Hayes"
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_campaign",
        "query_template_metadata": {
            "template_id": "sales_012",
            "template_string": "Create a new campaign with following details - Name: {campaign_name}; type: {campaign_type}; Start Date: {start_date}; Budget: {budget_amount}; Expected Revenue in Campaign: {expected_revenue}. Finally, invite the following leads to this campaign: {leads}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Lead"
                    ]
                }
            },
            "objects": [
                "Campaign"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "campaign_name": "Summer Yoga Webinar Series",
            "campaign_type": "Email",
            "start_date": "one week from today",
            "budget_amount": 9000,
            "expected_revenue": "4 times the Budget plus 1,500",
            "leads": "Priya Sharma, Lucas Chen, Jordan Hayes"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Campaign",
        "task_id": "sales_012_004",
        "query_templated": "Create a new campaign with following details - Name: Spring Sale Campaign; type: Conference; Start Date: three weeks from today; Budget: 5000; Expected Revenue in Campaign: triple the budget. Finally, invite the following leads to this campaign: Charlie Green and Emily White",
        "query": "Go ahead and create a campaign named \"Spring Sale Campaign\" as a Conference. Kickoff should be three weeks from today. Allocate a 5,000 budget and project expected revenue at triple the budget. Invite Charlie Green and Emily White.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "campaign_name": "Spring Sale Campaign",
            "campaign_type": "Conference",
            "start_date": 3,
            "budget_amount": 5000,
            "expected_revenue": 15000,
            "leads": [
                "Charlie Green",
                "Emily White"
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_campaign",
        "query_template_metadata": {
            "template_id": "sales_012",
            "template_string": "Create a new campaign with following details - Name: {campaign_name}; type: {campaign_type}; Start Date: {start_date}; Budget: {budget_amount}; Expected Revenue in Campaign: {expected_revenue}. Finally, invite the following leads to this campaign: {leads}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Lead"
                    ]
                }
            },
            "objects": [
                "Campaign"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "campaign_name": "Spring Sale Campaign",
            "campaign_type": "Conference",
            "start_date": "three weeks from today",
            "budget_amount": 5000,
            "expected_revenue": "triple the budget",
            "leads": "Charlie Green and Emily White"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "Campaign",
        "task_id": "sales_012_005",
        "query_templated": "Create a new campaign with following details - Name: Summer Tech Innovation Showcase; type: Trade Show; Start Date: eight weeks from today; Budget: 75000; Expected Revenue in Campaign: triple the investment. Finally, invite the following leads to this campaign: Grace King and Frank Knight",
        "query": "Let\u2019s go big\u2014set up a Trade Show campaign called \"Summer Tech Innovation Showcase\" that starts eight weeks from today. Budget is 75,000, and the expected revenue should be three times the investment. Add Grace King and Frank Knight to the invite list.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "campaign_name": "Summer Tech Innovation Showcase",
            "campaign_type": "Trade Show",
            "start_date": 8,
            "budget_amount": 75000,
            "expected_revenue": 225000,
            "leads": [
                "Grace King",
                "Frank Knight"
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_campaign",
        "query_template_metadata": {
            "template_id": "sales_012",
            "template_string": "Create a new campaign with following details - Name: {campaign_name}; type: {campaign_type}; Start Date: {start_date}; Budget: {budget_amount}; Expected Revenue in Campaign: {expected_revenue}. Finally, invite the following leads to this campaign: {leads}",
            "prerequisites": {
                "data": {
                    "objects": [
                        "Lead"
                    ]
                }
            },
            "objects": [
                "Campaign"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "campaign_name": "Summer Tech Innovation Showcase",
            "campaign_type": "Trade Show",
            "start_date": "eight weeks from today",
            "budget_amount": 75000,
            "expected_revenue": "triple the investment",
            "leads": "Grace King and Frank Knight"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_013_001",
        "query_templated": "Can the lead Ali Hussein be qualified based on the latest discussions? If the answer is no, which factor\u2014'Budget', 'Authority', 'Need', or 'Timeline'\u2014is responsible? Return only one factor that the lead qualification fails to meet (i.e. 'Budget', 'Authority', 'Need', 'Timeline'). If the lead is qualified, return \"Qualified\".",
        "query": "From the most recent VoiceCallTranscript record, can we qualify Ali Hussein as a lead? If not, reply with only one word\u2014'Budget', 'Authority', 'Need', or 'Timeline'\u2014to indicate the blocker. If yes, reply with \"Qualified\".",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "Authority"
        },
        "difficulty": "hard",
        "query_template_name": "qa_sales_001",
        "query_template_metadata": {
            "template_id": "sales_013",
            "template_string": "Can the lead {lead_name} be qualified based on the latest discussions? If the answer is no, which factor\u2014'Budget', 'Authority', 'Need', or 'Timeline'\u2014is responsible? Return only one factor that the lead qualification fails to meet (i.e. 'Budget', 'Authority', 'Need', 'Timeline'). If the lead is qualified, return \"Qualified\".",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "CustomTab": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ],
                        "Settings": [
                            "Knowledge"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "LeadCall"
                    ]
                }
            },
            "objects": [
                "VoiceCallTranscript__c",
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "lead_name": "Ali Hussein"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_013_002",
        "query_templated": "Can the lead Raj Patel be qualified based on the latest discussions? If the answer is no, which factor\u2014'Budget', 'Authority', 'Need', or 'Timeline'\u2014is responsible? Return only one factor that the lead qualification fails to meet (i.e. 'Budget', 'Authority', 'Need', 'Timeline'). If the lead is qualified, return \"Qualified\".",
        "query": "Looking at our latest VoiceCallTranscript record, would you green-light Raj Patel? If the answer is no, what single issue is blocking it\u2014'Budget', 'Authority', 'Need', or 'Timeline'? Respond with just that one word. If you would green-light, respond with \"Qualified\".",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "Budget"
        },
        "difficulty": "hard",
        "query_template_name": "qa_sales_001",
        "query_template_metadata": {
            "template_id": "sales_013",
            "template_string": "Can the lead {lead_name} be qualified based on the latest discussions? If the answer is no, which factor\u2014'Budget', 'Authority', 'Need', or 'Timeline'\u2014is responsible? Return only one factor that the lead qualification fails to meet (i.e. 'Budget', 'Authority', 'Need', 'Timeline'). If the lead is qualified, return \"Qualified\".",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "CustomTab": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ],
                        "Settings": [
                            "Knowledge"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "LeadCall"
                    ]
                }
            },
            "objects": [
                "VoiceCallTranscript__c",
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "lead_name": "Raj Patel"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_013_003",
        "query_templated": "Can the lead Wei Chen be qualified based on the latest discussions? If the answer is no, which factor\u2014'Budget', 'Authority', 'Need', or 'Timeline'\u2014is responsible? Return only one factor that the lead qualification fails to meet (i.e. 'Budget', 'Authority', 'Need', 'Timeline'). If the lead is qualified, return \"Qualified\".",
        "query": "For Wei Chen, check the newest VoiceCallTranscript record and give a single-word outcome. If they qualify, return \"Qualified\"; if not, return only the blocking factor: 'Budget', 'Authority', 'Need', or 'Timeline'.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "Qualified"
        },
        "difficulty": "hard",
        "query_template_name": "qa_sales_001",
        "query_template_metadata": {
            "template_id": "sales_013",
            "template_string": "Can the lead {lead_name} be qualified based on the latest discussions? If the answer is no, which factor\u2014'Budget', 'Authority', 'Need', or 'Timeline'\u2014is responsible? Return only one factor that the lead qualification fails to meet (i.e. 'Budget', 'Authority', 'Need', 'Timeline'). If the lead is qualified, return \"Qualified\".",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "CustomTab": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ],
                        "Settings": [
                            "Knowledge"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "LeadCall"
                    ]
                }
            },
            "objects": [
                "VoiceCallTranscript__c",
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "lead_name": "Wei Chen"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_013_004",
        "query_templated": "Can the lead Liam Chen be qualified based on the latest discussions? If the answer is no, which factor\u2014'Budget', 'Authority', 'Need', or 'Timeline'\u2014is responsible? Return only one factor that the lead qualification fails to meet (i.e. 'Budget', 'Authority', 'Need', 'Timeline'). If the lead is qualified, return \"Qualified\".",
        "query": "Run a BANT-style check on Liam Chen using the latest VoiceCallTranscript record. If some criterion prevents qualification, output only that criterion ('Budget', 'Authority', 'Need', or 'Timeline'). If none do, output \"Qualified\".",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "Timeline"
        },
        "difficulty": "hard",
        "query_template_name": "qa_sales_001",
        "query_template_metadata": {
            "template_id": "sales_013",
            "template_string": "Can the lead {lead_name} be qualified based on the latest discussions? If the answer is no, which factor\u2014'Budget', 'Authority', 'Need', or 'Timeline'\u2014is responsible? Return only one factor that the lead qualification fails to meet (i.e. 'Budget', 'Authority', 'Need', 'Timeline'). If the lead is qualified, return \"Qualified\".",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "CustomTab": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ],
                        "Settings": [
                            "Knowledge"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "LeadCall"
                    ]
                }
            },
            "objects": [
                "VoiceCallTranscript__c",
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "lead_name": "Liam Chen"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_013_005",
        "query_templated": "Can the lead Fatima Al-Mansouri be qualified based on the latest discussions? If the answer is no, which factor\u2014'Budget', 'Authority', 'Need', or 'Timeline'\u2014is responsible? Return only one factor that the lead qualification fails to meet (i.e. 'Budget', 'Authority', 'Need', 'Timeline'). If the lead is qualified, return \"Qualified\".",
        "query": "After reviewing the latest VoiceCallTranscript record, decide whether Fatima Al-Mansouri should be qualified. If she isn\u2019t, name just one culprit\u2014'Budget', 'Authority', 'Need', or 'Timeline'\u2014and return only that word. If she is, return \"Qualified\".",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "Need"
        },
        "difficulty": "hard",
        "query_template_name": "qa_sales_001",
        "query_template_metadata": {
            "template_id": "sales_013",
            "template_string": "Can the lead {lead_name} be qualified based on the latest discussions? If the answer is no, which factor\u2014'Budget', 'Authority', 'Need', or 'Timeline'\u2014is responsible? Return only one factor that the lead qualification fails to meet (i.e. 'Budget', 'Authority', 'Need', 'Timeline'). If the lead is qualified, return \"Qualified\".",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "CustomTab": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ],
                        "Settings": [
                            "Knowledge"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "LeadCall"
                    ]
                }
            },
            "objects": [
                "VoiceCallTranscript__c",
                "Lead"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "lead_name": "Fatima Al-Mansouri"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_014_001",
        "query_templated": "Is the current stage name accurately representing the activity for the opportunity QuantumLeap Integration Opportunity? If it isn't, what would be the appropriate stage name? Return only the correct stage label among ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). If the stage name is correct, return \"Correct\".",
        "query": "Could you sanity-check the pipeline stage on the opportunity \"QuantumLeap Integration Opportunity\"? Does the current stage label truly match what's happening in the deal? If not, pick the correct stage from this list and return only that label: ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). If it's already right, return \"Correct\".",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "Proposal/Price Quote"
        },
        "difficulty": "hard",
        "query_template_name": "qa_sales_002",
        "query_template_metadata": {
            "template_id": "sales_014",
            "template_string": "Is the current stage name accurately representing the activity for the opportunity {opportunity_name}? If it isn't, what would be the appropriate stage name? Return only the correct stage label among ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). If the stage name is correct, return \"Correct\".",
            "prerequisites": {
                "data": {
                    "objects": [
                        "OppTask"
                    ]
                }
            },
            "objects": [
                "Task",
                "Opportunity"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "opportunity_name": "QuantumLeap Integration Opportunity"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_014_002",
        "query_templated": "Is the current stage name accurately representing the activity for the opportunity Quantum Dynamics EDA Integration? If it isn't, what would be the appropriate stage name? Return only the correct stage label among ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). If the stage name is correct, return \"Correct\".",
        "query": "Review the opportunity \"Quantum Dynamics EDA Integration\" and verify whether its stage name reflects the actual activity. If there's a mismatch, output the proper stage chosen strictly from ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). If the current stage is accurate, output \"Correct\". Return only the single label or \"Correct\".",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "Negotiation/Review"
        },
        "difficulty": "hard",
        "query_template_name": "qa_sales_002",
        "query_template_metadata": {
            "template_id": "sales_014",
            "template_string": "Is the current stage name accurately representing the activity for the opportunity {opportunity_name}? If it isn't, what would be the appropriate stage name? Return only the correct stage label among ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). If the stage name is correct, return \"Correct\".",
            "prerequisites": {
                "data": {
                    "objects": [
                        "OppTask"
                    ]
                }
            },
            "objects": [
                "Task",
                "Opportunity"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "opportunity_name": "Quantum Dynamics EDA Integration"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_014_003",
        "query_templated": "Is the current stage name accurately representing the activity for the opportunity Innovative EDA Partnership with FutureTech? If it isn't, what would be the appropriate stage name? Return only the correct stage label among ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). If the stage name is correct, return \"Correct\".",
        "query": "I'm validating our opportunity for \"Innovative EDA Partnership with FutureTech\". Is the current stage name aligned with the work underway? If you'd move it, which stage would you switch it to from this set: ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost')? Reply with only the chosen stage label, or \"Correct\" if no change is needed.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "Needs Analysis"
        },
        "difficulty": "hard",
        "query_template_name": "qa_sales_002",
        "query_template_metadata": {
            "template_id": "sales_014",
            "template_string": "Is the current stage name accurately representing the activity for the opportunity {opportunity_name}? If it isn't, what would be the appropriate stage name? Return only the correct stage label among ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). If the stage name is correct, return \"Correct\".",
            "prerequisites": {
                "data": {
                    "objects": [
                        "OppTask"
                    ]
                }
            },
            "objects": [
                "Task",
                "Opportunity"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "opportunity_name": "Innovative EDA Partnership with FutureTech"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_014_004",
        "query_templated": "Is the current stage name accurately representing the activity for the opportunity EcoEnergy Solutions - Advanced EDA Integration? If it isn't, what would be the appropriate stage name? Return only the correct stage label among ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). If the stage name is correct, return \"Correct\".",
        "query": "Please audit the stage for the opportunity \"EcoEnergy Solutions - Advanced EDA Integration\" to ensure it matches the deal's activity. When it's wrong, map it to the appropriate stage from ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). If it's already correct, return \"Correct\". Only return the single stage label or \"Correct\".",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "Closed Won"
        },
        "difficulty": "hard",
        "query_template_name": "qa_sales_002",
        "query_template_metadata": {
            "template_id": "sales_014",
            "template_string": "Is the current stage name accurately representing the activity for the opportunity {opportunity_name}? If it isn't, what would be the appropriate stage name? Return only the correct stage label among ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). If the stage name is correct, return \"Correct\".",
            "prerequisites": {
                "data": {
                    "objects": [
                        "OppTask"
                    ]
                }
            },
            "objects": [
                "Task",
                "Opportunity"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "opportunity_name": "EcoEnergy Solutions - Advanced EDA Integration"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_014_005",
        "query_templated": "Is the current stage name accurately representing the activity for the opportunity DigitalWave-TechPulse Strategic Partnership? If it isn't, what would be the appropriate stage name? Return only the correct stage label among ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). If the stage name is correct, return \"Correct\".",
        "query": "Quick gut check on the opportunity \"DigitalWave-TechPulse Strategic Partnership\": is the current stage actually the right fit? If not, select the best-matching stage from ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). Respond with just that label; if the existing stage is fine, return \"Correct\".",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "Correct"
        },
        "difficulty": "hard",
        "query_template_name": "qa_sales_002",
        "query_template_metadata": {
            "template_id": "sales_014",
            "template_string": "Is the current stage name accurately representing the activity for the opportunity {opportunity_name}? If it isn't, what would be the appropriate stage name? Return only the correct stage label among ('Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'). If the stage name is correct, return \"Correct\".",
            "prerequisites": {
                "data": {
                    "objects": [
                        "OppTask"
                    ]
                }
            },
            "objects": [
                "Task",
                "Opportunity"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "opportunity_name": "DigitalWave-TechPulse Strategic Partnership"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_015_001",
        "query_templated": "I'm reviewing the call transcripts to extract useful information. Please examine the call between Carlos Nunez and Hiro Tanaka, and determine how many years the warranty lasts for the product that Carlos offers Hiro. Respond with the number only.",
        "query": "Quick favor\u2014scan the VoiceCallTranscript record between Carlos Nunez and Hiro Tanaka and tell me how many years the warranty lasts on the product Carlos offers Hiro. Reply with the number only.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "2"
        },
        "difficulty": "easy",
        "query_template_name": "qa_sales_003",
        "query_template_metadata": {
            "template_id": "sales_015",
            "template_string": "I'm reviewing the call transcripts to extract useful information. Please examine the call between {caller1} and {caller2}, and {action}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "CustomTab": [
                            "VoiceCallTranscript__c"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ],
                        "Settings": [
                            "Knowledge"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "VoiceCallTranscript__c"
                    ]
                }
            },
            "objects": [
                "VoiceCallTranscript__c"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "caller1": "Carlos Nunez",
            "caller2": "Hiro Tanaka",
            "action": "determine how many years the warranty lasts for the product that Carlos offers Hiro. Respond with the number only"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_015_002",
        "query_templated": "I'm reviewing the call transcripts to extract useful information. Please examine the call between Carlos Fernandez and Rajesh Kumar, and find out what is the price that Carlos offers Rajesh for one unit of the AutoLayout Master. Respond with the number with the currency symbol only.",
        "query": "In the VoiceCallTranscript record for Carlos Fernandez and Rajesh Kumar, what price does Carlos quote Rajesh for one unit of AutoLayout Master? Respond with the number plus the currency symbol only.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "$530"
        },
        "difficulty": "easy",
        "query_template_name": "qa_sales_003",
        "query_template_metadata": {
            "template_id": "sales_015",
            "template_string": "I'm reviewing the call transcripts to extract useful information. Please examine the call between {caller1} and {caller2}, and {action}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "CustomTab": [
                            "VoiceCallTranscript__c"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ],
                        "Settings": [
                            "Knowledge"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "VoiceCallTranscript__c"
                    ]
                }
            },
            "objects": [
                "VoiceCallTranscript__c"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "caller1": "Carlos Fernandez",
            "caller2": "Rajesh Kumar",
            "action": "find out what is the price that Carlos offers Rajesh for one unit of the AutoLayout Master. Respond with the number with the currency symbol only"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_015_003",
        "query_templated": "I'm reviewing the call transcripts to extract useful information. Please examine the call between Emmanuel Okonkwo and Rajesh Kumar, and tell me within how many days does the customer Rajesh wish to have the installation done. Respond with the number only.",
        "query": "From the VoiceCallTranscript record between Emmanuel Okonkwo and Rajesh Kumar, within how many days does Rajesh want the installation completed? Answer with the number only.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "3"
        },
        "difficulty": "easy",
        "query_template_name": "qa_sales_003",
        "query_template_metadata": {
            "template_id": "sales_015",
            "template_string": "I'm reviewing the call transcripts to extract useful information. Please examine the call between {caller1} and {caller2}, and {action}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "CustomTab": [
                            "VoiceCallTranscript__c"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ],
                        "Settings": [
                            "Knowledge"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "VoiceCallTranscript__c"
                    ]
                }
            },
            "objects": [
                "VoiceCallTranscript__c"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "caller1": "Emmanuel Okonkwo",
            "caller2": "Rajesh Kumar",
            "action": "tell me within how many days does the customer Rajesh wish to have the installation done. Respond with the number only"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_015_004",
        "query_templated": "I'm reviewing the call transcripts to extract useful information. Please examine the call between Fatima Al-Masri and Xia Li, and tell me what is the limit of Xia's budget for the purchase. Respond with the number with the currency symbol only.",
        "query": "Please review the VoiceCallTranscript record between Fatima Al-Masri and Xia Li and identify Xia\u2019s maximum budget for the purchase. Return the amount only, including the currency symbol.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "$2,155"
        },
        "difficulty": "easy",
        "query_template_name": "qa_sales_003",
        "query_template_metadata": {
            "template_id": "sales_015",
            "template_string": "I'm reviewing the call transcripts to extract useful information. Please examine the call between {caller1} and {caller2}, and {action}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "CustomTab": [
                            "VoiceCallTranscript__c"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ],
                        "Settings": [
                            "Knowledge"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "VoiceCallTranscript__c"
                    ]
                }
            },
            "objects": [
                "VoiceCallTranscript__c"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "caller1": "Fatima Al-Masri",
            "caller2": "Xia Li",
            "action": "tell me what is the limit of Xia's budget for the purchase. Respond with the number with the currency symbol only"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "sales",
        "subcategory": "qa",
        "task_id": "sales_015_005",
        "query_templated": "I'm reviewing the call transcripts to extract useful information. Please examine the call between Monique Dubois and Olga Sokolova, and tell me which product Monique is offering to Olga as a solution to the need of testing and optimizing the configurations in a virtual environment. Respond with the product name only.",
        "query": "Looking at the VoiceCallTranscript record between Monique Dubois and Olga Sokolova, which product does Monique propose to address testing and optimization of configurations in a virtual environment? Provide the precise product name only.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "UnitySim"
        },
        "difficulty": "easy",
        "query_template_name": "qa_sales_003",
        "query_template_metadata": {
            "template_id": "sales_015",
            "template_string": "I'm reviewing the call transcripts to extract useful information. Please examine the call between {caller1} and {caller2}, and {action}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "CustomObject": [
                            "VoiceCallTranscript__c",
                            "Knowledge__kav"
                        ],
                        "CustomTab": [
                            "VoiceCallTranscript__c"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ],
                        "Settings": [
                            "Knowledge"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "VoiceCallTranscript__c"
                    ]
                }
            },
            "objects": [
                "VoiceCallTranscript__c"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "caller1": "Monique Dubois",
            "caller2": "Olga Sokolova",
            "action": "tell me which product Monique is offering to Olga as a solution to the need of testing and optimizing the configurations in a virtual environment. Respond with the product name only"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_001_001",
        "query_templated": "Create a queue with name \"Shoe Case Support\". Only send email to members under the distribution list \"support.shoe@papaltd.com\". Add the Object \"Customer\". Include \"Role: Customer Support, North America\" as the Member.",
        "query": "Create a queue named \"Shoe Case Support.\" Limit notification emails so they go only to the \"support.shoe@papaltd.com\" distribution list. Add the Customer object, and add the role \"Customer Support, North America\" as a member.",
        "human_review_comment": "tweak a bit",
        "ground_truth_dict": {
            "queue_name": "shoe_case_support",
            "group_type": "Customer",
            "email_address": "support.shoe@papaltd.com",
            "role_members": [
                "Customer Support, North America"
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_queue_with_members",
        "query_template_metadata": {
            "template_id": "service_001",
            "template_string": "Create a queue with name {queue_name}. {email_instruction}. Include {role_users} as the member.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "User": [
                            "User.json"
                        ]
                    }
                }
            },
            "objects": [
                "QueueSobject",
                "Queue"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "queue_name": "Shoe Case Support",
            "email_instruction": "Only send email to members under the distribution list \"support.shoe@papaltd.com\". Add the Object \"Customer\"",
            "role_users": "Role: Customer Support, North America"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_001_002",
        "query_templated": "Create a queue with name \"VIP Support\". Add the Object \"Buyer Group\". Include \"Role: SVP, Customer Service & Support\" and \"Role: Customer Support, International\" as the Members.",
        "query": "Create a queue with name \"VIP Support\". Add the Object \"Buyer Group\". Include \"Role: SVP, Customer Service & Support\" and \"Role: Customer Support, International\" as the Members.",
        "human_review_comment": "reject; use the original",
        "ground_truth_dict": {
            "queue_name": "vip_support",
            "group_type": "BuyerGroup",
            "email_address": "",
            "role_members": [
                "SVP, Customer Service & Support",
                "Customer Support, International"
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_queue_with_members",
        "query_template_metadata": {
            "template_id": "service_001",
            "template_string": "Create a queue with name {queue_name}. {email_instruction}. Include {role_users} as the member.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "User": [
                            "User.json"
                        ]
                    }
                }
            },
            "objects": [
                "QueueSobject",
                "Queue"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "queue_name": "VIP Support",
            "email_instruction": "Add the Object \"Buyer Group\"",
            "role_users": "Role: SVP, Customer Service & Support\" and \"Role: Customer Support, International"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_001_003",
        "query_templated": "Create a queue with name \"Marketing Support\". Only send emails to members under the distribution list \"marketing.support@business.com\". Add the Object \"Attribute Picklist\". Include \"User: Integration User\" and \"Role: Marketing Team\" as the Members.",
        "query": "Please create a queue titled \"Marketing Support,\" and configure email alerts to be sent exclusively to the \"marketing.support@business.com\" distribution list. Link it to the Attribute Picklist object, and add the \"User: Integration User\" plus the role \"Role: Marketing Team\" as members.",
        "human_review_comment": "tweak a bit",
        "ground_truth_dict": {
            "queue_name": "Marketing_Support",
            "group_type": "AttributePicklist",
            "email_address": "marketing.support@business.com",
            "role_members": [
                "Integration User",
                "Marketing Team"
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_queue_with_members",
        "query_template_metadata": {
            "template_id": "service_001",
            "template_string": "Create a queue with name {queue_name}. {email_instruction}. Include {role_users} as the member.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "User": [
                            "User.json"
                        ]
                    }
                }
            },
            "objects": [
                "QueueSobject",
                "Queue"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "queue_name": "Marketing Support",
            "email_instruction": "Only send emails to members under the distribution list \"marketing.support@business.com\". Add the Object \"Attribute Picklist\"",
            "role_users": "User: Integration User\" and \"Role: Marketing Team"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_001_004",
        "query_templated": "Create a queue with name tech support specialists. Send email notifications to members under the distribution list tech.support@innovatetech.com. Include Object \"Case\". Include Alice Bob as the member.",
        "query": "I need a queue named \"tech support specialists\": send notification emails to members of the tech.support@innovatetech.com distribution list, attach the Case object, and add Alice Bob as a member.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "queue_name": "tech_support_specialists",
            "group_type": "Case",
            "email_address": "tech.support@innovatetech.com",
            "role_members": [
                "Alice Bob"
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_queue_with_members",
        "query_template_metadata": {
            "template_id": "service_001",
            "template_string": "Create a queue with name {queue_name}. {email_instruction}. Include {role_users} as the member.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "User": [
                            "User.json"
                        ]
                    }
                }
            },
            "objects": [
                "QueueSobject",
                "Queue"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "queue_name": "tech support specialists",
            "email_instruction": "Send email notifications to members under the distribution list tech.support@innovatetech.com. Include Object \"Case\".",
            "role_users": "Alice Bob"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_001_005",
        "query_templated": "Create a queue with name enterprise client support. Include Object \"Case\". Include Alice Bob and Sofia Bennett as the member.",
        "query": "Set up a queue called \"enterprise client support,\" associate it with the Case object, and include Alice Bob and Sofia Bennett as members.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "queue_name": "enterprise_client_support",
            "group_type": "Case",
            "email_address": "",
            "role_members": [
                "Alice Bob",
                "Sofia Bennett"
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_queue_with_members",
        "query_template_metadata": {
            "template_id": "service_001",
            "template_string": "Create a queue with name {queue_name}. {email_instruction}. Include {role_users} as the member.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "User": [
                            "User.json"
                        ]
                    }
                }
            },
            "objects": [
                "QueueSobject",
                "Queue"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "queue_name": "enterprise client support",
            "email_instruction": "Include Object \"Case\".",
            "role_users": "Alice Bob and Sofia Bennett"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_002_001",
        "query_templated": "Help me with creating a case assignment rule named 'Billing Cases Assignment Rule' by assigning cases whose description contains the keyword 'billing' or whose case number starts with 5 to billing support queue. The first condition has higher priority to be evaluated.",
        "query": "Please set up a case assignment rule called Billing Cases Assignment Rule. Route any case to the billing support queue if the description mentions \u201cbilling\u201d or if the case number begins with 5. Give the description condition higher precedence, so it\u2019s evaluated first.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "rule_name": "Billing Cases Assignment Rule",
            "entry_conditions": [
                [
                    "Case.Description",
                    "contains",
                    "billing"
                ],
                [
                    "Case.CaseNumber",
                    "startsWith",
                    "5"
                ]
            ],
            "logic_operator": "OR",
            "assignee": "billing_support_queue",
            "assignee_type": "Queue",
            "sort_order": 1
        },
        "difficulty": "hard",
        "query_template_name": "create_case_assignment_rule",
        "query_template_metadata": {
            "template_id": "service_002",
            "template_string": "Help me with creating a case assignment rule named '{rule_name}' by assigning {entry_conditions} to {assignee}. {sort_order_description}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Queue": [
                            "fruit_case_support_queue",
                            "billing_support_queue",
                            "network_support_queue",
                            "shoe_case_support_queue"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "AssignmentRules"
            ]
        },
        "instance_dict": {
            "rule_name": "Billing Cases Assignment Rule",
            "entry_conditions": "cases whose description contains the keyword 'billing' or whose case number starts with 5",
            "assignee": "billing support queue",
            "sort_order_description": "The first condition has higher priority to be evaluated"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_002_002",
        "query_templated": "Help me with creating a case assignment rule named 'Network Cases Assignment Rule' by assigning cases whose description contains the keyword 'network' and whose case number starts with 7 to network support queue. .",
        "query": "Configure a rule named Network Cases Assignment Rule that sends cases to the network support queue only when both are true: the description contains \u201cnetwork\u201d and the case number starts with 7.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "rule_name": "Network Cases Assignment Rule",
            "entry_conditions": [
                [
                    "Case.Description",
                    "contains",
                    "network"
                ],
                [
                    "Case.CaseNumber",
                    "startsWith",
                    "7"
                ]
            ],
            "logic_operator": "AND",
            "assignee": "network_support_queue",
            "assignee_type": "Queue",
            "sort_order": 1
        },
        "difficulty": "hard",
        "query_template_name": "create_case_assignment_rule",
        "query_template_metadata": {
            "template_id": "service_002",
            "template_string": "Help me with creating a case assignment rule named '{rule_name}' by assigning {entry_conditions} to {assignee}. {sort_order_description}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Queue": [
                            "fruit_case_support_queue",
                            "billing_support_queue",
                            "network_support_queue",
                            "shoe_case_support_queue"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "AssignmentRules"
            ]
        },
        "instance_dict": {
            "rule_name": "Network Cases Assignment Rule",
            "entry_conditions": "cases whose description contains the keyword 'network' and whose case number starts with 7",
            "assignee": "network support queue",
            "sort_order_description": ""
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_002_003",
        "query_templated": "Help me with creating a case assignment rule named 'Shoes' by assigning [cases whose description contains the keyword \"shoe\" or whose case number starts with 2] to [shoe case support queue]. [The first condition has higher priority to be evaluated.]",
        "query": "Create a rule called Shoes. If either condition matches\u2014description includes \u201cshoe\u201d or the case number starts with 2\u2014send the case to the shoe case support queue. Make sure the description check is evaluated first (higher priority).",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "rule_name": "Shoes",
            "entry_conditions": [
                [
                    "Case.Description",
                    "contains",
                    "shoe"
                ],
                [
                    "Case.CaseNumber",
                    "startsWith",
                    "2"
                ]
            ],
            "logic_operator": "OR",
            "assignee": "shoe_case_support_queue",
            "assignee_type": "Queue",
            "sort_order": 1
        },
        "difficulty": "hard",
        "query_template_name": "create_case_assignment_rule",
        "query_template_metadata": {
            "template_id": "service_002",
            "template_string": "Help me with creating a case assignment rule named '{rule_name}' by assigning {entry_conditions} to {assignee}. {sort_order_description}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Queue": [
                            "fruit_case_support_queue",
                            "billing_support_queue",
                            "network_support_queue",
                            "shoe_case_support_queue"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "AssignmentRules"
            ]
        },
        "instance_dict": {
            "rule_name": "Shoes",
            "entry_conditions": "cases whose description contains the keyword \"shoe\" or whose case number starts with 2",
            "assignee": "shoe case support queue",
            "sort_order_description": "The first condition has higher priority to be evaluated."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_002_004",
        "query_templated": "Help me with creating a case assignment rule named 'ratings' by assigning [accounts with ratings not equal to Cold] to [Security User]. Set the sort order to [1].",
        "query": "Add an assignment rule named ratings that assigns accounts whose Rating is anything other than Cold to Security User. Set its sort order to 1.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "rule_name": "ratings",
            "entry_conditions": [
                [
                    "Account.Rating",
                    "notEqual",
                    "Cold"
                ]
            ],
            "logic_operator": "",
            "assignee": "security_user",
            "assignee_type": "User",
            "sort_order": 1
        },
        "difficulty": "hard",
        "query_template_name": "create_case_assignment_rule",
        "query_template_metadata": {
            "template_id": "service_002",
            "template_string": "Help me with creating a case assignment rule named '{rule_name}' by assigning {entry_conditions} to {assignee}. {sort_order_description}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Queue": [
                            "fruit_case_support_queue",
                            "billing_support_queue",
                            "network_support_queue",
                            "shoe_case_support_queue"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "AssignmentRules"
            ]
        },
        "instance_dict": {
            "rule_name": "ratings",
            "entry_conditions": "accounts with ratings not equal to Cold",
            "assignee": "insightssecurity@",
            "sort_order_description": "Set the sort order to [1]"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_002_005",
        "query_templated": "Help me with creating a case assignment rule named 'Apples' by assigning [cases whose description contains the keyword \"apple\" and whose case number starts with 3] to [fruit case support queue]. Make the sort order [1].",
        "query": "Set up a case assignment rule titled Apples. Route cases to the fruit case support queue when both conditions are met: the description contains \u201capple\u201d and the case number starts with 3. Place this rule at sort order 1.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "rule_name": "Apples",
            "entry_conditions": [
                [
                    "Case.Description",
                    "contains",
                    "apple"
                ],
                [
                    "Case.CaseNumber",
                    "startsWith",
                    "3"
                ]
            ],
            "logic_operator": "AND",
            "assignee_type": "Queue",
            "assignee": "fruit_case_support_queue",
            "sort_order": 1
        },
        "difficulty": "hard",
        "query_template_name": "create_case_assignment_rule",
        "query_template_metadata": {
            "template_id": "service_002",
            "template_string": "Help me with creating a case assignment rule named '{rule_name}' by assigning {entry_conditions} to {assignee}. {sort_order_description}.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Queue": [
                            "fruit_case_support_queue",
                            "billing_support_queue",
                            "network_support_queue",
                            "shoe_case_support_queue"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "AssignmentRules"
            ]
        },
        "instance_dict": {
            "rule_name": "Apples",
            "entry_conditions": "cases whose description contains the keyword \"apple\" and whose case number starts with 3",
            "assignee": "fruit case support queue",
            "sort_order_description": "Make the sort order [1]"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_003_001",
        "query_templated": "Please create a case record for David Kim about a hardware malfunction. The case status should be 'Escalated' and the case originated from a phone call. Set the priority to High, type to 'Mechanical', case reasoning to 'Equipment Design', subject to 'Hardware Malfunction - Warranty Replacement'.",
        "query": "Hey, can you make a case for David Kim about a hardware malfunction? Set the status to 'Escalated', mark the origin as a phone call, set priority to High, type to 'Mechanical', case reasoning to 'Equipment Design', and use the subject 'Hardware Malfunction - Warranty Replacement'.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "contact_name": "David Kim",
            "case_status": "Escalated",
            "case_origin": "Phone",
            "priority": "High",
            "case_type": "Mechanical",
            "case_reasoning": "Equipment Design",
            "subject": "Hardware Malfunction - Warranty Replacement"
        },
        "difficulty": "medium",
        "query_template_name": "create_case_context_setup",
        "query_template_metadata": {
            "template_id": "service_003",
            "template_string": "{case_context_setup}",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Contact": [
                            "Contact.json"
                        ]
                    }
                }
            },
            "objects": [
                "Case"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "case_context_setup": "Please create a case record for David Kim about a hardware malfunction. The case status should be 'Escalated' and the case originated from a phone call. Set the priority to High, type to 'Mechanical', case reasoning to 'Equipment Design', subject to 'Hardware Malfunction - Warranty Replacement'."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_003_002",
        "query_templated": "We need to create a case record for Ronny Chen regarding his software licensing issue. The case status should be 'New' and the case originated from a web form submission. Set the priority to Medium, type to 'Electronic', case reasoning to 'Performance', subject to 'Software License Key Activation Required'.",
        "query": "Please log a case for Ronny Chen about a software licensing issue with the following settings: - Status: 'New' - Origin: web form submission - Priority: Medium - Type: 'Electronic' - Case Reasoning: 'Performance' - Subject: 'Software License Key Activation Required'",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "contact_name": "Ronny Chen",
            "case_status": "New",
            "case_origin": "Web",
            "priority": "Medium",
            "case_type": "Electronic",
            "case_reasoning": "Performance",
            "subject": "Software License Key Activation Required"
        },
        "difficulty": "medium",
        "query_template_name": "create_case_context_setup",
        "query_template_metadata": {
            "template_id": "service_003",
            "template_string": "{case_context_setup}",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Contact": [
                            "Contact.json"
                        ]
                    }
                }
            },
            "objects": [
                "Case"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "case_context_setup": "We need to create a case record for Ronny Chen regarding his software licensing issue. The case status should be 'New' and the case originated from a web form submission. Set the priority to Medium, type to 'Electronic', case reasoning to 'Performance', subject to 'Software License Key Activation Required'."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_003_003",
        "query_templated": "We need to create a case record for Alice Bob regarding her account access issue. The case status should be 'Working' and the case originated from an email. Set the priority to High, type to 'Other', case reasoning to 'Equipment Design', subject to 'Account Access Denied - Password Reset Required'.",
        "query": "For Alice Bob, set up a case for her account access issue. Put the case in 'Working' status, note that it originated from an email, set the priority to High, choose type 'Other', set case reasoning to 'Equipment Design', and use the subject 'Account Access Denied - Password Reset Required'.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "contact_name": "Alice Bob",
            "case_status": "Working",
            "case_origin": "Email",
            "priority": "High",
            "case_type": "Other",
            "case_reasoning": "Equipment Design",
            "subject": "Account Access Denied - Password Reset Required"
        },
        "difficulty": "medium",
        "query_template_name": "create_case_context_setup",
        "query_template_metadata": {
            "template_id": "service_003",
            "template_string": "{case_context_setup}",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Contact": [
                            "Contact.json"
                        ]
                    }
                }
            },
            "objects": [
                "Case"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "case_context_setup": "We need to create a case record for Alice Bob regarding her account access issue. The case status should be 'Working' and the case originated from an email. Set the priority to High, type to 'Other', case reasoning to 'Equipment Design', subject to 'Account Access Denied - Password Reset Required'."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_003_004",
        "query_templated": "Please create a case record for Ethan Parker about a network connectivity problem. The case status should be 'New' and the case originated from a phone call. Set the priority to Medium, type to 'Electrical', case reasoning to 'Installation', subject to 'Network Connectivity Issues - Router Configuration'.",
        "query": "I just got off the phone with Ethan Parker about a network connectivity problem\u2014please file a case. Make the status 'New', priority Medium, type 'Electrical', and case reasoning 'Installation'. The subject should read 'Network Connectivity Issues - Router Configuration'.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "contact_name": "Ethan Parker",
            "case_status": "New",
            "case_origin": "Phone",
            "priority": "Medium",
            "case_type": "Electrical",
            "case_reasoning": "Installation",
            "subject": "Network Connectivity Issues - Router Configuration"
        },
        "difficulty": "medium",
        "query_template_name": "create_case_context_setup",
        "query_template_metadata": {
            "template_id": "service_003",
            "template_string": "{case_context_setup}",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Contact": [
                            "Contact.json"
                        ]
                    }
                }
            },
            "objects": [
                "Case"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "case_context_setup": "Please create a case record for Ethan Parker about a network connectivity problem. The case status should be 'New' and the case originated from a phone call. Set the priority to Medium, type to 'Electrical', case reasoning to 'Installation', subject to 'Network Connectivity Issues - Router Configuration'."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_003_005",
        "query_templated": "We need to create a case record for Emily Johnson regarding her system performance issue. The case status should be 'Working' and the case originated from a web form submission. Set the priority to Low, type to 'Structural', case reasoning to 'Feedback', subject to 'System Performance Degradation - Memory Upgrade Needed'.",
        "query": "Open a case for Emily Johnson regarding a system performance issue. Keep the status at 'Working', set the origin to a web form submission, priority to Low, type to 'Structural', case reasoning to 'Feedback', and the subject to 'System Performance Degradation - Memory Upgrade Needed'.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "contact_name": "Emily Johnson",
            "case_status": "Working",
            "case_origin": "Web",
            "priority": "Low",
            "case_type": "Structural",
            "case_reasoning": "Feedback",
            "subject": "System Performance Degradation - Memory Upgrade Needed"
        },
        "difficulty": "medium",
        "query_template_name": "create_case_context_setup",
        "query_template_metadata": {
            "template_id": "service_003",
            "template_string": "{case_context_setup}",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Contact": [
                            "Contact.json"
                        ]
                    }
                }
            },
            "objects": [
                "Case"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "case_context_setup": "We need to create a case record for Emily Johnson regarding her system performance issue. The case status should be 'Working' and the case originated from a web form submission. Set the priority to Low, type to 'Structural', case reasoning to 'Feedback', subject to 'System Performance Degradation - Memory Upgrade Needed'."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_004_001",
        "query_templated": "The case with subject 'Login Issues with Mobile Application' involves enterprise contract terms that require management approval. I need to change its status to working and Potential Liability to Yes.",
        "query": "For the case titled 'Login Issues with Mobile Application'\u2014since it falls under enterprise contract terms that need management sign-off\u2014please switch the status to working and set Potential Liability to Yes.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "case_subject": "Login Issues with Mobile Application",
            "new_status": "Working",
            "other_updates": {
                "PotentialLiability__c": "Yes"
            }
        },
        "difficulty": "easy",
        "query_template_name": "escalate_case_change_owner",
        "query_template_metadata": {
            "template_id": "service_004",
            "template_string": "The case {case_number} {case_context}. I need to change its status to escalated and change its owner to {user_profile}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Case": [
                            "Case.json"
                        ],
                        "User": [
                            "User.json"
                        ]
                    }
                }
            },
            "objects": [
                "Case"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "case_number": "00001002",
            "case_context": "involves enterprise contract terms that require management approval",
            "user_profile": "Sofia Bennett"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_004_002",
        "query_templated": "The case with Subject 'Feature Request: Dark Mode Support' requires specialized database expertise that exceeds my current skill level. I need to change its status to pending and SLA Violation to Yes.",
        "query": "The case with Subject 'Feature Request: Dark Mode Support' requires specialized database expertise that exceeds my current skill level. I need to change its status to pending and SLA Violation to Yes.",
        "human_review_comment": "reject; use the original",
        "ground_truth_dict": {
            "case_subject": "Feature Request: Dark Mode Support",
            "new_status": "Pending",
            "other_updates": {
                "SLAViolation__c": "Yes"
            }
        },
        "difficulty": "easy",
        "query_template_name": "escalate_case_change_owner",
        "query_template_metadata": {
            "template_id": "service_004",
            "template_string": "The case {case_number} {case_context}. I need to change its status to escalated and change its owner to {user_profile}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Case": [
                            "Case.json"
                        ],
                        "User": [
                            "User.json"
                        ]
                    }
                }
            },
            "objects": [
                "Case"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "case_number": "00001003",
            "case_context": "requires specialized database expertise that exceeds my current skill level",
            "user_profile": "Michael Johnson"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_004_003",
        "query_templated": "The case with subject 'Payment Processing Error' involves security compliance issues that require specialized security expertise. I need to change its status to Working and Potential Liability to Yes.",
        "query": "The 'Payment Processing Error' case has security compliance implications that call for a security specialist. Please update it to status Working and turn Potential Liability to Yes.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "case_subject": "Payment Processing Error",
            "new_status": "Working",
            "other_updates": {
                "PotentialLiability__c": "Yes"
            }
        },
        "difficulty": "easy",
        "query_template_name": "escalate_case_change_owner",
        "query_template_metadata": {
            "template_id": "service_004",
            "template_string": "The case {case_number} {case_context}. I need to change its status to escalated and change its owner to {user_profile}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Case": [
                            "Case.json"
                        ],
                        "User": [
                            "User.json"
                        ]
                    }
                }
            },
            "objects": [
                "Case"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "case_number": "00001005",
            "case_context": "involves security compliance issues that require specialized security expertise",
            "user_profile": "Maria Rodriguez"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_004_004",
        "query_templated": "The case with subject 'Data Synchronization Issue' involves complex integration requirements that require senior developer review. I need to change its status to escalated and set the priority to High.",
        "query": "Escalate the 'Data Synchronization Issue' case, as it\u2019s a complex integration that should be reviewed by a senior developer, and bump the priority to High.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "case_subject": "Data Synchronization Issue",
            "new_status": "Escalated",
            "other_updates": {
                "Priority": "High"
            }
        },
        "difficulty": "easy",
        "query_template_name": "escalate_case_change_owner",
        "query_template_metadata": {
            "template_id": "service_004",
            "template_string": "The case {case_number} {case_context}. I need to change its status to escalated and change its owner to {user_profile}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Case": [
                            "Case.json"
                        ],
                        "User": [
                            "User.json"
                        ]
                    }
                }
            },
            "objects": [
                "Case"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "case_number": "00001004",
            "case_context": "involves complex integration requirements that require senior developer review",
            "user_profile": "John Doe"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Case Management",
        "task_id": "service_004_005",
        "query_templated": "The case with subject 'Account Billing Discrepancy' requires specialized technical expertise that exceeds my current skill level. I need to change its status to escalated and mark SLA Violation as Yes, modifying the Priority to High.",
        "query": "I\u2019m out of my depth on the case 'Account Billing Discrepancy.' Please move it to escalated, flag SLA Violation as Yes, and raise the Priority to High.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "case_subject": "Account Billing Discrepancy",
            "new_status": "Escalated",
            "other_updates": {
                "Priority": "High",
                "SLAViolation__c": "Yes"
            }
        },
        "difficulty": "easy",
        "query_template_name": "escalate_case_change_owner",
        "query_template_metadata": {
            "template_id": "service_004",
            "template_string": "The case {case_number} {case_context}. I need to change its status to escalated and change its owner to {user_profile}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Case": [
                            "Case.json"
                        ],
                        "User": [
                            "User.json"
                        ]
                    }
                }
            },
            "objects": [
                "Case"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "case_number": "00001001",
            "case_context": "requires specialized technical expertise that exceeds my current skill level",
            "user_profile": "Alice Bob"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_005_001",
        "query_templated": "According to the service level agreement (SLA), the Old Balance account has the Phone Support entitlement, which starts a week from today and expires in 1 year. Create an entitlement record named Standard Phone Support for me.",
        "query": "Per our SLA, Old Balance is eligible for Phone Support that kicks in one week from today and runs for a full year. Please create an entitlement record for that account called Standard Phone Support.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "account_name": "Old Balance",
            "entitlement_name": "Standard Phone Support",
            "support_type": "Phone Support",
            "start_date_relative": "1 week",
            "end_date_relative": "1 year"
        },
        "difficulty": "easy",
        "query_template_name": "create_entitlement_record",
        "query_template_metadata": {
            "template_id": "service_005",
            "template_string": "According to the service level agreement (SLA), the {account_name} account has the {support_type} entitlement, which {date_description}. Create an entitlement record named {entitlement_name} for me.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Account": [
                            "Account.json"
                        ]
                    }
                }
            },
            "objects": [
                "Entitlement"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "account_name": "Old Balance",
            "support_type": "Phone Support",
            "date_description": "starts a week from today and expires in 1 year",
            "entitlement_name": "Standard Phone Support"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_005_002",
        "query_templated": "According to the service level agreement (SLA), the Greentrail Logistics account has the Web Support entitlement, which starts two weeks from today and expires in 18 months. Create an entitlement record named Standard Web Support for me.",
        "query": "As outlined in the SLA, Greentrail Logistics should have Web Support starting two weeks from now and continuing for 18 months. Go ahead and create an entitlement record named Standard Web Support.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "account_name": "Greentrail Logistics",
            "entitlement_name": "Standard Web Support",
            "support_type": "Web Support",
            "start_date_relative": "2 weeks",
            "end_date_relative": "18 months"
        },
        "difficulty": "easy",
        "query_template_name": "create_entitlement_record",
        "query_template_metadata": {
            "template_id": "service_005",
            "template_string": "According to the service level agreement (SLA), the {account_name} account has the {support_type} entitlement, which {date_description}. Create an entitlement record named {entitlement_name} for me.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Account": [
                            "Account.json"
                        ]
                    }
                }
            },
            "objects": [
                "Entitlement"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "account_name": "Greentrail Logistics",
            "support_type": "Web Support",
            "date_description": "starts two weeks from today and expires in 18 months",
            "entitlement_name": "Standard Web Support"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_005_003",
        "query_templated": "According to the service level agreement (SLA), the Next Horizon Technologies account has the Phone Support entitlement, which starts three days from today and expires in 1 year and 30 days. Create an entitlement record named Premium Phone Support for me.",
        "query": "I checked the SLA for Next Horizon Technologies\u2014Phone Support begins in three days and remains active for 1 year plus 30 days. Please add an entitlement record titled Premium Phone Support.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "account_name": "Next Horizon Technologies",
            "entitlement_name": "Premium Phone Support",
            "support_type": "Phone Support",
            "start_date_relative": "3 days",
            "end_date_relative": "1 year 30 days"
        },
        "difficulty": "easy",
        "query_template_name": "create_entitlement_record",
        "query_template_metadata": {
            "template_id": "service_005",
            "template_string": "According to the service level agreement (SLA), the {account_name} account has the {support_type} entitlement, which {date_description}. Create an entitlement record named {entitlement_name} for me.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Account": [
                            "Account.json"
                        ]
                    }
                }
            },
            "objects": [
                "Entitlement"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "account_name": "Next Horizon Technologies",
            "support_type": "Phone Support",
            "date_description": "starts three days from today and expires in 1 year and 30 days",
            "entitlement_name": "Premium Phone Support"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_005_004",
        "query_templated": "According to the service level agreement (SLA), the White Industries account has the Web Support entitlement, which starts in two weeks and expires in 6 months from today. Create an entitlement record named Enterprise Chat Support for me.",
        "query": "Per the SLA, White Industries account gets Web Support starting in two weeks from todayt and expiring six months later. Create an entitlement record named Enterprise Chat Support.",
        "human_review_comment": "edit multiple places",
        "ground_truth_dict": {
            "account_name": "White Industries",
            "entitlement_name": "Enterprise Chat Support",
            "support_type": "Web Support",
            "start_date_relative": "2 weeks",
            "end_date_relative": "6 months"
        },
        "difficulty": "easy",
        "query_template_name": "create_entitlement_record",
        "query_template_metadata": {
            "template_id": "service_005",
            "template_string": "According to the service level agreement (SLA), the {account_name} account has the {support_type} entitlement, which {date_description}. Create an entitlement record named {entitlement_name} for me.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Account": [
                            "Account.json"
                        ]
                    }
                }
            },
            "objects": [
                "Entitlement"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "account_name": "White Industries",
            "support_type": "Web Support",
            "date_description": "starts in two weeks and expires in 6 months from today",
            "entitlement_name": "Enterprise Chat Support"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_005_005",
        "query_templated": "According to the service level agreement (SLA), the Innovate Ltd account has the phone support type entitlement, which starts in one week from today and expires in 18 months. Create an entitlement record named Premium Email Support Package for me.",
        "query": "According to the service level agreement (SLA), the Innovate Ltd account has the phone support type entitlement, which starts in one week from today and expires in 18 months. Create an entitlement record named Premium Email Support Package for me.",
        "human_review_comment": "edit multiple places",
        "ground_truth_dict": {
            "account_name": "Innovate Ltd",
            "entitlement_name": "Premium Email Support Package",
            "support_type": "Phone Support",
            "start_date_relative": "1 week",
            "end_date_relative": "18 months"
        },
        "difficulty": "easy",
        "query_template_name": "create_entitlement_record",
        "query_template_metadata": {
            "template_id": "service_005",
            "template_string": "According to the service level agreement (SLA), the {account_name} account has the {support_type} entitlement, which {date_description}. Create an entitlement record named {entitlement_name} for me.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Account": [
                            "Account.json"
                        ]
                    }
                }
            },
            "objects": [
                "Entitlement"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "account_name": "Innovate Ltd",
            "support_type": "phone support type",
            "date_description": "starts in one week from today and expires in 18 months",
            "entitlement_name": "Premium Email Support Package"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_006_001",
        "query_templated": "To improve the customer service quality, we defined a new entitlement process with four milestones. The first milestone named 'acknowledgment' should be non-recurring and tracks initial acknowledgment time. The second milestone named 'analysis' is sequential-recurring and tracks problem analysis time. The third milestone named 'solution' is non-recurring and tracks solution development time. The fourth milestone named 'verification' is independent-recurring and tracks solution verification time.",
        "query": "Please create a new entitlement process to boost our support standards. It needs four milestones: - \"acknowledgment\" \u2014 set this to non-recurring and measure the time until we first acknowledge the case. - \"analysis\" \u2014 configure as sequential-recurring and track the time spent analyzing the problem. - \"solution\" \u2014 make this non-recurring and capture the time it takes to develop the solution. - \"verification\" \u2014 set as independent-recurring and monitor the time required to verify the solution.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "milestone_count": 4,
            "milestone_name_type_list": [
                [
                    "acknowledgment",
                    "none"
                ],
                [
                    "analysis",
                    "recursChained"
                ],
                [
                    "solution",
                    "none"
                ],
                [
                    "verification",
                    "recursIndependently"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_milestone",
        "query_template_metadata": {
            "template_id": "service_006",
            "template_string": "To improve the customer service quality, we defined a new entitlement process with {milestone_count} milestones. {milestone_descriptions}.",
            "prerequisites": {},
            "objects": [
                "MilestoneType"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "milestone_count": "four",
            "milestone_descriptions": "The first milestone named 'acknowledgment' should be non-recurring and tracks initial acknowledgment time. The second milestone named 'analysis' is sequential-recurring and tracks problem analysis time. The third milestone named 'solution' is non-recurring and tracks solution development time. The fourth milestone named 'verification' is independent-recurring and tracks solution verification time"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_006_002",
        "query_templated": "To improve the customer service quality, we defined a new entitlement process with two milestones. The first milestone named 'assessment' should be independent-recurring and tracks initial assessment time. The second milestone named 'delivery' is non-recurring and tracks final delivery time.",
        "query": "Can you create a fresh entitlement process with two milestones for service quality? First, add \"assessment\" as independent-recurring to track the initial assessment time. Then add \"delivery\" as non-recurring to measure the final delivery time.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "milestone_count": 2,
            "milestone_name_type_list": [
                [
                    "assessment",
                    "recursIndependently"
                ],
                [
                    "delivery",
                    "none"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_milestone",
        "query_template_metadata": {
            "template_id": "service_006",
            "template_string": "To improve the customer service quality, we defined a new entitlement process with {milestone_count} milestones. {milestone_descriptions}.",
            "prerequisites": {},
            "objects": [
                "MilestoneType"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "milestone_count": "two",
            "milestone_descriptions": "The first milestone named 'assessment' should be independent-recurring and tracks initial assessment time. The second milestone named 'delivery' is non-recurring and tracks final delivery time"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_006_003",
        "query_templated": "To improve the customer service quality, we defined a new entitlement process with three milestones. The first milestone named 'first response' should be non-recurring and tracks initial response time. The second milestone named 'escalation review' is sequential-recurring and tracks supervisor review time. The third milestone named 'resolution time' is independent-recurring and tracks final resolution time.",
        "query": "To improve the customer service quality, we defined a new entitlement process with three milestones. The first milestone named 'first response' should be non-recurring and tracks initial response time. The second milestone named 'escalation review' is sequential-recurring and tracks supervisor review time. The third milestone named 'resolution time' is independent-recurring and tracks final resolution time.",
        "human_review_comment": "reject; use original",
        "ground_truth_dict": {
            "milestone_count": 3,
            "milestone_name_type_list": [
                [
                    "first response",
                    "none"
                ],
                [
                    "escalation review",
                    "recursChained"
                ],
                [
                    "resolution time",
                    "recursIndependently"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_milestone",
        "query_template_metadata": {
            "template_id": "service_006",
            "template_string": "To improve the customer service quality, we defined a new entitlement process with {milestone_count} milestones. {milestone_descriptions}.",
            "prerequisites": {},
            "objects": [
                "MilestoneType"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "milestone_count": "three",
            "milestone_descriptions": "The first milestone named 'first response' should be non-recurring and tracks initial response time. The second milestone named 'escalation review' is sequential-recurring and tracks supervisor review time. The third milestone named 'resolution time' is independent-recurring and tracks final resolution time"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_006_004",
        "query_templated": "To improve the customer service quality, we defined a new entitlement process with one milestone. The milestone named 'completion' should be sequential-recurring and tracks final completion time.",
        "query": "Set up an entitlement process that has just one milestone: call it \"completion.\" It must be sequential-recurring and should track the final completion time.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "milestone_count": 1,
            "milestone_name_type_list": [
                [
                    "completion",
                    "recursChained"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_milestone",
        "query_template_metadata": {
            "template_id": "service_006",
            "template_string": "To improve the customer service quality, we defined a new entitlement process with {milestone_count} milestones. {milestone_descriptions}.",
            "prerequisites": {},
            "objects": [
                "MilestoneType"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "milestone_count": "one",
            "milestone_descriptions": "The milestone named 'completion' should be sequential-recurring and tracks final completion time"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_006_005",
        "query_templated": "To improve the customer service quality, we defined a new entitlement process with two milestones. The first milestone named 'initial response' should be sequential-recurring and it tracks the time given to provide the first response to a customer inquiry. The second non-recurring milestone named 'case closure' aims to track the maximum time allowed to fully resolve and close a customer case.",
        "query": "Please build a new entitlement process with two milestones. Start with \"initial response\" configured as sequential-recurring to time how long we have to provide the first reply to a customer inquiry. Then add \"case closure\" as a non-recurring milestone to track the maximum time allowed to fully resolve and close the case.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "milestone_count": 2,
            "milestone_name_type_list": [
                [
                    "initial response",
                    "recursChained"
                ],
                [
                    "case closure",
                    "none"
                ]
            ]
        },
        "difficulty": "easy",
        "query_template_name": "create_milestone",
        "query_template_metadata": {
            "template_id": "service_006",
            "template_string": "To improve the customer service quality, we defined a new entitlement process with {milestone_count} milestones. {milestone_descriptions}.",
            "prerequisites": {},
            "objects": [
                "MilestoneType"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "milestone_count": "two",
            "milestone_descriptions": "The first milestone named 'initial response' should be sequential-recurring and it tracks the time given to provide the first response to a customer inquiry. The second non-recurring milestone named 'case closure' aims to track the maximum time allowed to fully resolve and close a customer case"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_007_001",
        "query_templated": "Create an entitlement process with the name Priority Customer Support for the Case records. The case should enter this process based on case created date and exit when it is closed. Include the milestone 'first response to priority customers', which gives the agent 30 mins to provide first response to priority customers.",
        "query": "Please set up an entitlement process called \u201cPriority Customer Support\u201d for Case records. Start the process based on the Case Created Date and have it end when the case is closed. Add a milestone named \u201cfirst response to priority customers\u201d that gives agents 30 minutes to send the first response to priority customers.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "process_name": "Priority Customer Support",
            "record_type": "Case",
            "milestones": [
                {
                    "milestoneName": "first response to priority customers"
                }
            ],
            "milestone_time_trigger": 30
        },
        "difficulty": "hard",
        "query_template_name": "create_entitlement_process",
        "query_template_metadata": {
            "template_id": "service_007",
            "template_string": "Create an entitlement process with the name {process_name} for the {record_type} records. The {entry_condition}. Include {milestone_details}. {violation_action}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "MilestoneType": [
                            "MilestoneType.json"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "EntitlementProcess"
            ]
        },
        "instance_dict": {
            "process_name": "Priority Customer Support",
            "record_type": "Case",
            "entry_condition": "case should enter this process based on case created date and exist when it is closed",
            "milestone_details": "the milestone 'first response to priority customers', which gives the agent 30 mins to provide first response to priority customers",
            "violation_action": "Add the warning action to set time trigger 5 minutes before first response to priority customers"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_007_002",
        "query_templated": "Create an entitlement process with the name Premium Support Process for the Case records. The case should enter this process based on case created date and exist when it is closed. Include the milestone 'first response to priority customers', which gives the agent 15 mins to provide initial response to premium customers.",
        "query": "Create an entitlement process with the name Premium Support Process for the Case records. The case should enter this process based on case created date and exist when it is closed. Include the milestone 'first response to priority customers', which gives the agent 15 mins to provide initial response to premium customers.",
        "human_review_comment": "reject; use original",
        "ground_truth_dict": {
            "process_name": "Premium Support Process",
            "record_type": "Case",
            "milestones": [
                {
                    "milestoneName": "first response to priority customers"
                }
            ],
            "milestone_time_trigger": 15
        },
        "difficulty": "hard",
        "query_template_name": "create_entitlement_process",
        "query_template_metadata": {
            "template_id": "service_007",
            "template_string": "Create an entitlement process with the name {process_name} for the {record_type} records. The {entry_condition}. Include {milestone_details}. {violation_action}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "MilestoneType": [
                            "MilestoneType.json"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "EntitlementProcess"
            ]
        },
        "instance_dict": {
            "process_name": "Premium Support Process",
            "record_type": "Case",
            "entry_condition": "case should enter this process based on case created date and exist when it is closed",
            "milestone_details": "the milestone 'first response to priority customers', which gives the agent 60 mins to provide initial response to premium customers",
            "violation_action": "Add the warning action for the 'first response to priority customers' milestone to send email alert 15 minutes before deadline. Use 'first_response_to_premium_customers' as the email name, and email template 'Support: Case Response', with recipient user Alice Bob."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_007_003",
        "query_templated": "Create an entitlement process with the name case email for the Case records. The case should enter this process based on case created date and exit when it is closed. Include the milestone 'Escalate case' which checks if the Case Contact Email contains salesforce. Set the time trigger to 1 minute.",
        "query": "I need an entitlement process called \u201ccase email\u201d for Case records. Kick it off using the Case Created Date and wrap it up when the case closes. Add the \u201cEscalate case\u201d milestone that checks whether the Case Contact Email contains \u201csalesforce,\u201d and set its time trigger to 1 minute.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "process_name": "case email",
            "record_type": "Case",
            "milestones": [
                {
                    "milestoneName": "Escalate case",
                    "criteria": [
                        [
                            "Contact.Email",
                            "contains",
                            "salesforce"
                        ]
                    ]
                }
            ],
            "milestone_time_trigger": 1
        },
        "difficulty": "hard",
        "query_template_name": "create_entitlement_process",
        "query_template_metadata": {
            "template_id": "service_007",
            "template_string": "Create an entitlement process with the name {process_name} for the {record_type} records. The {entry_condition}. Include {milestone_details}. {violation_action}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "MilestoneType": [
                            "MilestoneType.json"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "EntitlementProcess"
            ]
        },
        "instance_dict": {
            "process_name": "case email",
            "record_type": "Case",
            "entry_condition": "type [Case] called [case email] with [one] milestone",
            "milestone_details": "The milestone name should be [Escalate case] and checks if the [Case: Contact Email contains salesforce]",
            "violation_action": "Set the time trigger to [1] minute"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_007_004",
        "query_templated": "Create an entitlement process with the name priority incident for the Incident records. The incident should enter this process based on incident created date and exit when it is closed. Include the milestones 'close case' that checks if the [Incident: Incident closed equals True] and 'first response to priority customers' which checks if [current user: about me does not contain manager] and [incident: priority not equal to High]. Set the time trigger to 1 minute for each milestone.",
        "query": "Create an entitlement process with the name priority incident for the Incident records. The incident should enter this process based on incident created date and exit when it is closed. Include the milestones 'close case' that checks if the [Incident: Incident closed equals True] and 'first response to priority customers' which checks if [current user: about me does not contain manager] and [incident: priority not equal to High]. Set the time trigger to 1 minute for each milestone.",
        "human_review_comment": "reject; use original",
        "ground_truth_dict": {
            "process_name": "priority incident",
            "record_type": "Incident",
            "milestones": [
                {
                    "milestoneName": "close case",
                    "criteria": [
                        [
                            "Incident.IsClosed",
                            "equals",
                            "true"
                        ]
                    ]
                },
                {
                    "milestoneName": "first response to priority customers",
                    "criteria": [
                        [
                            "User.AboutMe",
                            "notContain",
                            "manager"
                        ],
                        [
                            "Incident.Priority",
                            "notEqual",
                            "High"
                        ]
                    ]
                }
            ],
            "milestone_time_trigger": 1
        },
        "difficulty": "hard",
        "query_template_name": "create_entitlement_process",
        "query_template_metadata": {
            "template_id": "service_007",
            "template_string": "Create an entitlement process with the name {process_name} for the {record_type} records. The {entry_condition}. Include {milestone_details}. {violation_action}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "MilestoneType": [
                            "MilestoneType.json"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "EntitlementProcess"
            ]
        },
        "instance_dict": {
            "process_name": "priority incident",
            "record_type": "Incident",
            "entry_condition": "type [Incident] called [priority incident] with [two] milestones",
            "milestone_details": "The first milestone name should be [close case] and checks if the [Incident: Incident closed equals True]. Set the order to 1. The second milestone name should be [first response to customer] and checks if [current user: about me does not contain manager] and [incident: priority not equal to High]",
            "violation_action": "Set the time trigger to [1] minute for each"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Entitlements",
        "task_id": "service_007_005",
        "query_templated": "Create an entitlement process with the name order amount for the Work Order records. The work order should enter this process based on work order created date and exit when it is closed. Include the milestone 'Escalate case' which checks if the [work order: total price greater than 5000] and [work order: tax less than 400] and [current user: country starts with U]. Set the time trigger to 1 minute.",
        "query": "Configure an entitlement process called \u201corder amount\u201d for Work Order records. Begin tracking from the Work Order Created Date and end the process at closure. Add a milestone named \u201cEscalate case\u201d with conditions [work order: total price greater than 5000], [work order: tax less than 400], and [current user: country starts with U], and set its time trigger to 1 minute.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "process_name": "order amount",
            "record_type": "WorkOrder",
            "milestones": [
                {
                    "milestoneName": "Escalate Case",
                    "criteria": [
                        [
                            "WorkOrder.TotalPrice",
                            "greaterThan",
                            "5000"
                        ],
                        [
                            "WorkOrder.Tax",
                            "lessThan",
                            "400"
                        ],
                        [
                            "User.Country",
                            "startsWith",
                            "U"
                        ]
                    ]
                }
            ],
            "milestone_time_trigger": 1
        },
        "difficulty": "hard",
        "query_template_name": "create_entitlement_process",
        "query_template_metadata": {
            "template_id": "service_007",
            "template_string": "Create an entitlement process with the name {process_name} for the {record_type} records. The {entry_condition}. Include {milestone_details}. {violation_action}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "MilestoneType": [
                            "MilestoneType.json"
                        ]
                    }
                }
            },
            "objects": [],
            "metadata_types": [
                "EntitlementProcess"
            ]
        },
        "instance_dict": {
            "process_name": "order amount",
            "record_type": "Work Order",
            "entry_condition": "type [Work Order] called [order amount] with [one] milestones",
            "milestone_details": "The milestone name should be [Escalate case] and checks if the [work order: total price greater than 5000] and [work order: tax less than 400] and [current user: country starts with U]",
            "violation_action": "Set the time trigger to [1] minute"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Knowledge Article",
        "task_id": "service_010_001",
        "query_templated": "Create a knowledge article and publish it. The title should be Headlight Replacement with the question description be \"How can I safely replace a malfunctioning car headlight on my own, including steps for removal, installation, and precautions to avoid damage?\". The answer should be \"To replace a malfunctioning car headlight, first park your vehicle on level ground, turn off the ignition, and open the hood. Locate the headlight housing behind the light assembly. Disconnect the power connector by gently pulling it off, then remove the dust cover if present. Release the bulb by undoing the retaining clip or turning it counterclockwise. Avoid touching the glass of the new bulb with bare fingers, as oils may shorten its lifespan; hold it by the base instead. Insert the new bulb securely, reattach the clip and cover, then reconnect the wiring. Finally, turn on the headlights to confirm proper operation.\".",
        "query": "Create a knowledge article and publish it. The title should be Headlight Replacement with the question description be \"How can I safely replace a malfunctioning car headlight on my own, including steps for removal, installation, and precautions to avoid damage?\". The answer should be \"To replace a malfunctioning car headlight, first park your vehicle on level ground, turn off the ignition, and open the hood. Locate the headlight housing behind the light assembly. Disconnect the power connector by gently pulling it off, then remove the dust cover if present. Release the bulb by undoing the retaining clip or turning it counterclockwise. Avoid touching the glass of the new bulb with bare fingers, as oils may shorten its lifespan; hold it by the base instead. Insert the new bulb securely, reattach the clip and cover, then reconnect the wiring. Finally, turn on the headlights to confirm proper operation.\".",
        "human_review_comment": "reject; use original",
        "ground_truth_dict": {
            "article_title": "Headlight Replacement",
            "article_published": "Online",
            "question_desc": "How can I safely replace a malfunctioning car headlight on my own, including steps for removal, installation, and precautions to avoid damage?",
            "answer_desc": "To replace a malfunctioning car headlight, first park your vehicle on level ground, turn off the ignition, and open the hood. Locate the headlight housing behind the light assembly. Disconnect the power connector by gently pulling it off, then remove the dust cover if present. Release the bulb by undoing the retaining clip or turning it counterclockwise. Avoid touching the glass of the new bulb with bare fingers, as oils may shorten its lifespan; hold it by the base instead. Insert the new bulb securely, reattach the clip and cover, then reconnect the wiring. Finally, turn on the headlights to confirm proper operation."
        },
        "difficulty": "easy",
        "query_template_name": "create_knowledge_article",
        "query_template_metadata": {
            "template_id": "service_010",
            "template_string": "Create a knowledge article and publish it. The title should be {article_title} with the question description be \"{question_desc}\". The answer should be \"{answer_desc}\".",
            "prerequisites": {},
            "objects": [
                "Knowledge__ka"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "article_title": "Headlight Replacement",
            "question_desc": "How can I safely replace a malfunctioning car headlight on my own, including steps for removal, installation, and precautions to avoid damage?",
            "answer_desc": "To replace a malfunctioning car headlight, first park your vehicle on level ground, turn off the ignition, and open the hood. Locate the headlight housing behind the light assembly. Disconnect the power connector by gently pulling it off, then remove the dust cover if present. Release the bulb by undoing the retaining clip or turning it counterclockwise. Avoid touching the glass of the new bulb with bare fingers, as oils may shorten its lifespan; hold it by the base instead. Insert the new bulb securely, reattach the clip and cover, then reconnect the wiring. Finally, turn on the headlights to confirm proper operation."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Knowledge Article",
        "task_id": "service_010_002",
        "query_templated": "Create a knowledge article and publish it. The title should be \"The Science Behind Sleep and Productivity\" with the question description be \"How does sleep quality impact workplace productivity and cognitive function?\". The answer should be \"Research shows that quality sleep improves memory, decision-making, and creativity. Lack of sleep reduces focus and increases errors. Understanding sleep cycles can help optimize work schedules. Employers can support better sleep habits to boost employee performance and wellbeing.\"",
        "query": "Create a knowledge article and publish it. The title should be \"The Science Behind Sleep and Productivity\" with the question description be \"How does sleep quality impact workplace productivity and cognitive function?\". The answer should be \"Research shows that quality sleep improves memory, decision-making, and creativity. Lack of sleep reduces focus and increases errors. Understanding sleep cycles can help optimize work schedules. Employers can support better sleep habits to boost employee performance and wellbeing.\"",
        "human_review_comment": "reject; use original",
        "ground_truth_dict": {
            "article_title": "The Science Behind Sleep and Productivity",
            "article_published": "Online",
            "question_desc": "How does sleep quality impact workplace productivity and cognitive function?",
            "answer_desc": "Research shows that quality sleep improves memory, decision-making, and creativity. Lack of sleep reduces focus and increases errors. Understanding sleep cycles can help optimize work schedules. Employers can support better sleep habits to boost employee performance and wellbeing."
        },
        "difficulty": "easy",
        "query_template_name": "create_knowledge_article",
        "query_template_metadata": {
            "template_id": "service_010",
            "template_string": "Create a knowledge article and publish it. The title should be {article_title} with the question description be \"{question_desc}\". The answer should be \"{answer_desc}\".",
            "prerequisites": {},
            "objects": [
                "Knowledge__ka"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "article_title": "The Science Behind Sleep and Productivity",
            "question_desc": "How does sleep quality impact workplace productivity and cognitive function?",
            "answer_desc": "Research shows that quality sleep improves memory, decision-making, and creativity. Lack of sleep reduces focus and increases errors. Understanding sleep cycles can help optimize work schedules. Employers can support better sleep habits to boost employee performance and wellbeing."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Knowledge Article",
        "task_id": "service_010_003",
        "query_templated": "Create a knowledge article and publish it. The title should be \"Best Practices for Remote Team Collaboration\" with the question description be \"What strategies help remote teams stay productive and connected?\". The answer should be \"Effective communication using video calls and instant messaging is key. Setting clear goals and deadlines keeps teams aligned. Regular check-ins foster accountability and morale. Using shared digital tools ensures everyone has access to the latest information. Prioritizing work-life balance prevents burnout.\"",
        "query": "Create a knowledge article and publish it. The title should be \"Best Practices for Remote Team Collaboration\" with the question description be \"What strategies help remote teams stay productive and connected?\". The answer should be \"Effective communication using video calls and instant messaging is key. Setting clear goals and deadlines keeps teams aligned. Regular check-ins foster accountability and morale. Using shared digital tools ensures everyone has access to the latest information. Prioritizing work-life balance prevents burnout.\"",
        "human_review_comment": "reject; use original",
        "ground_truth_dict": {
            "article_title": "Best Practices for Remote Team Collaboration",
            "article_published": "Online",
            "question_desc": "What strategies help remote teams stay productive and connected?",
            "answer_desc": "Effective communication using video calls and instant messaging is key. Setting clear goals and deadlines keeps teams aligned. Regular check-ins foster accountability and morale. Using shared digital tools ensures everyone has access to the latest information. Prioritizing work-life balance prevents burnout."
        },
        "difficulty": "easy",
        "query_template_name": "create_knowledge_article",
        "query_template_metadata": {
            "template_id": "service_010",
            "template_string": "Create a knowledge article and publish it. The title should be {article_title} with the question description be \"{question_desc}\". The answer should be \"{answer_desc}\".",
            "prerequisites": {},
            "objects": [
                "Knowledge__ka"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "article_title": "Best Practices for Remote Team Collaboration",
            "question_desc": "What strategies help remote teams stay productive and connected?",
            "answer_desc": "Effective communication using video calls and instant messaging is key. Setting clear goals and deadlines keeps teams aligned. Regular check-ins foster accountability and morale. Using shared digital tools ensures everyone has access to the latest information. Prioritizing work-life balance prevents burnout."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Knowledge Article",
        "task_id": "service_010_004",
        "query_templated": "Create a knowledge article and publish it. The title should be \"How to Reset Your Password\" with the question description be \"How can I reset my password if I forgot it?\". The answer should be \"To reset your password, go to the login page and click 'Forgot Password'. Enter your email address and follow the instructions sent to your email. The reset link expires in 24 hours for security purposes.\"",
        "query": "Create a knowledge article and publish it. The title should be \"How to Reset Your Password\" with the question description be \"How can I reset my password if I forgot it?\". The answer should be \"To reset your password, go to the login page and click 'Forgot Password'. Enter your email address and follow the instructions sent to your email. The reset link expires in 24 hours for security purposes.\"",
        "human_review_comment": "reject; use original",
        "ground_truth_dict": {
            "article_title": "How to Reset Your Password",
            "article_published": "Online",
            "question_desc": "How can I reset my password if I forgot it?",
            "answer_desc": "To reset your password, go to the login page and click 'Forgot Password'. Enter your email address and follow the instructions sent to your email. The reset link expires in 24 hours for security purposes."
        },
        "difficulty": "easy",
        "query_template_name": "create_knowledge_article",
        "query_template_metadata": {
            "template_id": "service_010",
            "template_string": "Create a knowledge article and publish it. The title should be {article_title} with the question description be \"{question_desc}\". The answer should be \"{answer_desc}\".",
            "prerequisites": {},
            "objects": [
                "Knowledge__ka"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "article_title": "How to Reset Your Password",
            "question_desc": "How can I reset my password if I forgot it?",
            "answer_desc": "To reset your password, go to the login page and click 'Forgot Password'. Enter your email address and follow the instructions sent to your email. The reset link expires in 24 hours for security purposes."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Knowledge Article",
        "task_id": "service_010_005",
        "query_templated": "Create a knowledge article and publish it. The title should be \"Troubleshooting Network Connectivity Issues\" with the question description be \"What should I do if I'm experiencing network connectivity problems?\". The answer should be \"If you're experiencing network connectivity issues, first check your cable connections. Restart your router and modem. If the problem persists, contact your internet service provider. Document any error messages you see.\"",
        "query": "Create a knowledge article and publish it. The title should be \"Troubleshooting Network Connectivity Issues\" with the question description be \"What should I do if I'm experiencing network connectivity problems?\". The answer should be \"If you're experiencing network connectivity issues, first check your cable connections. Restart your router and modem. If the problem persists, contact your internet service provider. Document any error messages you see.\"",
        "human_review_comment": "reject; use original",
        "ground_truth_dict": {
            "article_title": "Troubleshooting Network Connectivity Issues",
            "article_published": "Online",
            "question_desc": "What should I do if I'm experiencing network connectivity problems?",
            "answer_desc": "If you're experiencing network connectivity issues, first check your cable connections. Restart your router and modem. If the problem persists, contact your internet service provider. Document any error messages you see."
        },
        "difficulty": "easy",
        "query_template_name": "create_knowledge_article",
        "query_template_metadata": {
            "template_id": "service_010",
            "template_string": "Create a knowledge article and publish it. The title should be {article_title} with the question description be \"{question_desc}\". The answer should be \"{answer_desc}\".",
            "prerequisites": {},
            "objects": [
                "Knowledge__ka"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "article_title": "Troubleshooting Network Connectivity Issues",
            "question_desc": "What should I do if I'm experiencing network connectivity problems?",
            "answer_desc": "If you're experiencing network connectivity issues, first check your cable connections. Restart your router and modem. If the problem persists, contact your internet service provider. Document any error messages you see."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "qa",
        "task_id": "service_011_001",
        "query_templated": "A customer called in to complain that he cannot place an order on CollabDesign Studio with 35 units.. Grounded on the knowledge article, draft a short reply to explain the reason.",
        "query": "A customer just called saying he can\u2019t get an order through for 35 units of CollabDesign Studio. Using the knowledge article, write a brief, customer-ready note that explains what\u2019s preventing the order.  Note: The knowledge article does exist, but you may need to switch between different list views to find it.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "Each order is limited to 25 units."
        },
        "difficulty": "medium",
        "query_template_name": "qa_service_001",
        "query_template_metadata": {
            "template_id": "service_011",
            "template_string": "{one_line_issue}. Grounded on the knowledge article, draft a short reply to explain the reason.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Settings": [
                            "Knowledge"
                        ],
                        "CustomObject": [
                            "Knowledge__kav",
                            "VoiceCallTranscript__c"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "Knowledge__kav"
                    ]
                }
            },
            "objects": [
                "Knowledge__kav"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "one_line_issue": "A customer called in to complain that he cannot place an order on CollabDesign Studio with 35 units."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "qa",
        "task_id": "service_011_002",
        "query_templated": "A customer wants to place an order on the AIOptics Vision product. However, at the checkout page, the customer realized that Workflow Genius and AI DesignShift are automatically added to the order. The customer is confused and wants to know why.. Grounded on the knowledge article, draft a short reply to explain the reason.",
        "query": "While trying to buy AIOptics Vision, the customer saw that Workflow Genius and AI DesignShift were automatically added at checkout and got confused. Please use the knowledge article to provide a short, clear explanation for why those items are auto-added.  Note: The knowledge article does exist, but you may need to switch between different list views to find it.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "AIOptics Vision requires the Workflow Genius and AI DesignShift as part of its package."
        },
        "difficulty": "medium",
        "query_template_name": "qa_service_001",
        "query_template_metadata": {
            "template_id": "service_011",
            "template_string": "{one_line_issue}. Grounded on the knowledge article, draft a short reply to explain the reason.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Settings": [
                            "Knowledge"
                        ],
                        "CustomObject": [
                            "Knowledge__kav",
                            "VoiceCallTranscript__c"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "Knowledge__kav"
                    ]
                }
            },
            "objects": [
                "Knowledge__kav"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "one_line_issue": "A customer wants to place an order on the AIOptics Vision product. However, at the checkout page, the customer realized that Workflow Genius and AI DesignShift are automatically added to the order. The customer is confused and wants to know why."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "qa",
        "task_id": "service_011_003",
        "query_templated": "The Sales Rep wants to apply 15% discount to the quote whose purchase is $18. However, the quote was rejected by his manager. The Sales Rep is confused and wants to know why.. Grounded on the knowledge article, draft a short reply to explain the reason.",
        "query": "A Sales Rep tried to apply a 15% discount to a quote totaling $18, but the manager rejected it. Reference the knowledge article and compose a concise reply that explains the reason for the rejection.  Note: The knowledge article does exist, but you may need to switch between different list views to find it.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "15% Discount is for Purchases Over $20."
        },
        "difficulty": "medium",
        "query_template_name": "qa_service_001",
        "query_template_metadata": {
            "template_id": "service_011",
            "template_string": "{one_line_issue}. Grounded on the knowledge article, draft a short reply to explain the reason.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Settings": [
                            "Knowledge"
                        ],
                        "CustomObject": [
                            "Knowledge__kav",
                            "VoiceCallTranscript__c"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "Knowledge__kav"
                    ]
                }
            },
            "objects": [
                "Knowledge__kav"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "one_line_issue": "The Sales Rep wants to apply 15% discount to the quote whose purchase is $18. However, the quote was rejected by his manager. The Sales Rep is confused and wants to know why."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "qa",
        "task_id": "service_011_004",
        "query_templated": "A customer called in to complain that he cannot request a refund on an order placed 15 days ago.. Grounded on the knowledge article, draft a short reply to explain the reason.",
        "query": "A customer is upset because they can\u2019t request a refund on an order placed 15 days ago. Based on the knowledge article, draft a short message clarifying why a refund isn\u2019t available now.  Note: The knowledge article does exist, but you may need to switch between different list views to find it.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "answer": "Refunds are only available for orders placed within the last 7 days."
        },
        "difficulty": "medium",
        "query_template_name": "qa_service_001",
        "query_template_metadata": {
            "template_id": "service_011",
            "template_string": "{one_line_issue}. Grounded on the knowledge article, draft a short reply to explain the reason.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Settings": [
                            "Knowledge"
                        ],
                        "CustomObject": [
                            "Knowledge__kav",
                            "VoiceCallTranscript__c"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "Knowledge__kav"
                    ]
                }
            },
            "objects": [
                "Knowledge__kav"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "one_line_issue": "A customer called in to complain that he cannot request a refund on an order placed 15 days ago."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "qa",
        "task_id": "service_011_005",
        "query_templated": "A customer called in to request additional discount since he has a competing offer from another vendor. The customer wants to know if the discount can be applied.. Grounded on the knowledge article, draft a short reply to explain the reason.",
        "query": "A customer asked for an additional discount, saying they have a competing offer from another vendor. Per the knowledge article, send a brief reply with only \"Yes\" or \"No\".  Note: The knowledge article does exist, but you may need to switch between different list views to find it.",
        "human_review_comment": "modifed to align with GT",
        "ground_truth_dict": {
            "answer": "Yes"
        },
        "difficulty": "medium",
        "query_template_name": "qa_service_001",
        "query_template_metadata": {
            "template_id": "service_011",
            "template_string": "{one_line_issue}. Grounded on the knowledge article, draft a short reply to explain the reason.",
            "prerequisites": {
                "metadata": {
                    "types_and_members": {
                        "Settings": [
                            "Knowledge"
                        ],
                        "CustomObject": [
                            "Knowledge__kav",
                            "VoiceCallTranscript__c"
                        ],
                        "Layout": [
                            "VoiceCallTranscript__c-VoiceCallTranscript Layout"
                        ],
                        "Profile": [
                            "Admin"
                        ]
                    }
                },
                "data": {
                    "objects": [
                        "Knowledge__kav"
                    ]
                }
            },
            "objects": [
                "Knowledge__kav"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "one_line_issue": "A customer called in to request additional discount since he has a competing offer from another vendor. The customer wants to know if the discount can be applied."
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Incident Management",
        "task_id": "service_013_001",
        "query_templated": "Multiple customers have reported battery drain issues with the PowerCell X1 and EnergyBoost Max portable chargers, affecting their daily operations. This is causing partially business blocking impact to product PowerCell X1 but no blocking impact to EnergyBoost Max as some functions remain operational. Create an incident record with the following details: Subject: battery performance degradation in portable charging devices; Urgency: medium; Impact: low; Priority: medium.",
        "query": "Can you open an incident for widespread battery drain on our portable chargers? Multiple customers are seeing the PowerCell X1 and EnergyBoost Max losing charge quickly, disrupting daily operations. Note: PowerCell X1 is partially business blocking, while EnergyBoost Max isn\u2019t blocking since some functions still work. Use these fields\u2014Subject: battery performance degradation in portable charging devices; Urgency: medium; Impact: low; Priority: medium.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "incident_subject": "battery performance degradation in portable charging devices",
            "urgency": "Medium",
            "impact": "Low",
            "priority": "Moderate",
            "products": [
                "PowerCell X1",
                "EnergyBoost Max"
            ],
            "product_impact_type": [
                "Partially Business-Blocking",
                "Not Business-Blocking"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_incident_record",
        "query_template_metadata": {
            "template_id": "service_013",
            "template_string": "{incident_context}. Create an incident record with the following details: {incident_details}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Product2": [
                            "Product2.json"
                        ]
                    }
                }
            },
            "objects": [
                "Incident"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "incident_context": "Multiple customers have reported battery drain issues with the PowerCell X1 and EnergyBoost Max portable chargers, affecting their daily operations. This is causing partially business blocking impact to product PowerCell X1 but no blocking impact to EnergyBoost Max as some functions remain operational",
            "incident_details": "Subject: battery performance degradation in portable charging devices; Urgency: medium; Impact: low; Priority: medium"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Incident Management",
        "task_id": "service_013_002",
        "query_templated": "There are 12 new cases complaining about data corruption issues with the StorageMax Pro system, our primary data storage product. This is causing business blocking impact for customers' data operations. Create an incident record with the following details: Subject: data corruption in storage systems; Urgency: high; Impact: high; Priority: high.",
        "query": "There are 12 new cases complaining about data corruption issues with the StorageMax Pro system, our primary data storage product. This is causing business blocking impact for customers' data operations. Create an incident record with the following details: Subject: data corruption in storage systems; Urgency: high; Impact: high; Priority: high.",
        "human_review_comment": "reject; use original",
        "ground_truth_dict": {
            "incident_subject": "data corruption in storage systems",
            "urgency": "High",
            "impact": "High",
            "priority": "High",
            "products": [
                "StorageMax Pro"
            ],
            "product_impact_type": [
                "Business-Blocking"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_incident_record",
        "query_template_metadata": {
            "template_id": "service_013",
            "template_string": "{incident_context}. Create an incident record with the following details: {incident_details}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Product2": [
                            "Product2.json"
                        ]
                    }
                }
            },
            "objects": [
                "Incident"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "incident_context": "There are 12 new cases complaining about data corruption issues with the StorageMax Pro system, our primary data storage product. This is causing business blocking impact for customers' data operations",
            "incident_details": "Subject: data corruption in storage systems; Urgency: high; Impact: high; Priority: high"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Incident Management",
        "task_id": "service_013_003",
        "query_templated": "There are 5 new cases complaining about login failures with the SecureAuth Pro and AccessGuard systems, our authentication products. This is causing partially business blocking impact for customers' security operations. Create an incident record with the following details: Subject: authentication failures in security systems; Urgency: medium; Impact: medium; Priority: medium.",
        "query": "Heads up\u2014there are 5 new cases about users failing to log in on SecureAuth Pro and AccessGuard, our authentication products. Customers say it\u2019s partially business blocking for their security workflows. Create an incident with these details\u2014Subject: authentication failures in security systems; Urgency: medium; Impact: medium; Priority: medium.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "incident_subject": "authentication failures in security systems",
            "urgency": "Medium",
            "impact": "Medium",
            "priority": "Moderate",
            "products": [
                "SecureAuth Pro",
                "AccessGuard"
            ],
            "product_impact_type": [
                "Partially Business-Blocking",
                "Partially Business-Blocking"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_incident_record",
        "query_template_metadata": {
            "template_id": "service_013",
            "template_string": "{incident_context}. Create an incident record with the following details: {incident_details}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Product2": [
                            "Product2.json"
                        ]
                    }
                }
            },
            "objects": [
                "Incident"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "incident_context": "There are 5 new cases complaining about login failures with the SecureAuth Pro and AccessGuard systems, our authentication products. This is causing partially business blocking impact for customers' security operations",
            "incident_details": "Subject: authentication failures in security systems; Urgency: medium; Impact: medium; Priority: medium"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Incident Management",
        "task_id": "service_013_004",
        "query_templated": "Multiple customers have reported slow response times with the DataFlow X2 and ProcessEngine Max workflow systems, affecting their operational efficiency. This is causing not business blocking impact to both products as workarounds are available. Create an incident record with the following details: Subject: performance degradation in workflow systems; Urgency: low; Impact: low; Priority: low.",
        "query": "Multiple customers have reported slow response times with the DataFlow X2 and ProcessEngine Max workflow systems, affecting their operational efficiency. This is causing not business blocking impact to both products as workarounds are available. Create an incident record with the following details: Subject: performance degradation in workflow systems; Urgency: low; Impact: low; Priority: low.",
        "human_review_comment": "reject; use original",
        "ground_truth_dict": {
            "incident_subject": "performance degradation in workflow systems",
            "urgency": "Low",
            "impact": "Low",
            "priority": "Low",
            "products": [
                "DataFlow X2",
                "ProcessEngine Max"
            ],
            "product_impact_type": [
                "Not Business-Blocking",
                "Not Business-Blocking"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_incident_record",
        "query_template_metadata": {
            "template_id": "service_013",
            "template_string": "{incident_context}. Create an incident record with the following details: {incident_details}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Product2": [
                            "Product2.json"
                        ]
                    }
                }
            },
            "objects": [
                "Incident"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "incident_context": "Multiple customers have reported slow response times with the DataFlow X2 and ProcessEngine Max workflow systems, affecting their operational efficiency. This is causing not business blocking impact to both products as workarounds are available",
            "incident_details": "Subject: performance degradation in workflow systems; Urgency: low; Impact: low; Priority: low"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Incident Management",
        "task_id": "service_013_005",
        "query_templated": "There are 8 new cases complaining about overheating issues with the ThermalMax Pro and CoolBreeze Elite cooling systems, our latest HVAC products. This is causing business blocking impact for customers' facility operations. Create an incident record with the following details: Subject: overheating defects in HVAC cooling systems; Urgency: high; Impact: high; Priority: high.",
        "query": "Urgent request: there are 8 new cases of overheating on the ThermalMax Pro and CoolBreeze Elite systems\u2014our latest HVAC line\u2014and it\u2019s blocking facility operations for customers. Raise an incident with\u2014Subject: overheating defects in HVAC cooling systems; Urgency: high; Impact: high; Priority: high.",
        "human_review_comment": "accept",
        "ground_truth_dict": {
            "incident_subject": "overheating defects in HVAC cooling systems",
            "urgency": "High",
            "impact": "High",
            "priority": "High",
            "products": [
                "ThermalMax Pro",
                "CoolBreeze Elite"
            ],
            "product_impact_type": [
                "Business-Blocking",
                "Business-Blocking"
            ]
        },
        "difficulty": "medium",
        "query_template_name": "create_incident_record",
        "query_template_metadata": {
            "template_id": "service_013",
            "template_string": "{incident_context}. Create an incident record with the following details: {incident_details}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Product2": [
                            "Product2.json"
                        ]
                    }
                }
            },
            "objects": [
                "Incident",
                "IncidentRelatedItem"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "incident_context": "There are 8 new cases complaining about overheating issues with the ThermalMax Pro and CoolBreeze Elite cooling systems, our latest HVAC products. This is causing business blocking impact for customers' facility operations",
            "incident_details": "Subject: overheating defects in HVAC cooling systems; Urgency: high; Impact: high; Priority: high"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Incident management",
        "task_id": "service_014_001",
        "query_templated": "After an intensive investigation, the root cause for the incident 'authentication service outage affecting enterprise applications' is found. We need to create a change request with the following details. Subject: upgrade authentication infrastructure, Description: implement redundant authentication servers to prevent future service outages, Priority: High, Impact: Medium, Risk Level: Low. Link this change request to the incident case and update the incident status to in progress.",
        "query": "After an intensive investigation, the root cause for the incident 'authentication service outage affecting enterprise applications' is found. We need to create a change request with the following details. Subject: upgrade authentication infrastructure, Description: implement redundant authentication servers to prevent future service outages, Priority: High, Impact: Medium, Risk Level: Low. Link this change request to the incident case and update the incident status to in progress.",
        "human_review_comment": "reject; use original",
        "ground_truth_dict": {
            "incident_subject": "authentication service outage affecting enterprise applications",
            "change_request_subject": "upgrade authentication infrastructure",
            "change_request_priority": "High",
            "change_request_impact": "Medium",
            "change_request_risk_level": "Low",
            "incident_new_status": "In Progress"
        },
        "difficulty": "medium",
        "query_template_name": "create_change_request_link_incident",
        "query_template_metadata": {
            "template_id": "service_014",
            "template_string": "After an intensive investigation, the root cause for the incident '{incident_subject}' is found. We need to create a change request with the following details. {change_request_details}. Link this change request to the incident case and update the incident status to {new_status}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Incident": [
                            "Incident.json"
                        ]
                    }
                }
            },
            "objects": [
                "ChangeRequest",
                "ChangeRequestRelatedIssue",
                "Incident"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "incident_subject": "authentication service outage affecting enterprise applications",
            "change_request_details": "Subject: upgrade authentication infrastructure, Description: implement redundant authentication servers to prevent future service outages, Priority: High, Impact: Medium, Risk Level: Low",
            "new_status": "in progress"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Incident management",
        "task_id": "service_014_002",
        "query_templated": "After an intensive investigation, the root cause for the incident 'data sync service disruption across mobile and web platforms' is found. We need to create a change request with the following details. Subject: implement data synchronization monitoring, Description: deploy real-time sync monitoring tools to detect and prevent data inconsistencies, Priority: Medium, Impact: High, Risk Level: Medium. Link this change request to the incident case and update the incident status to open.",
        "query": "The root cause for the incident \u201cdata sync service disruption across mobile and web platforms\u201d is confirmed. Go ahead and raise a change request titled \u201cimplement data synchronization monitoring\u201d with this description: deploy real-time sync monitoring tools to detect and prevent data inconsistencies. Set Priority to Medium, Impact to High, and Risk Level to Medium. Associate the CR with the incident ticket and set the incident\u2019s status to open.",
        "human_review_comment": "tweak",
        "ground_truth_dict": {
            "incident_subject": "data sync service disruption across mobile and web platforms",
            "change_request_subject": "implement data synchronization monitoring",
            "change_request_priority": "Moderate",
            "change_request_impact": "High",
            "change_request_risk_level": "Medium",
            "incident_new_status": "Open"
        },
        "difficulty": "medium",
        "query_template_name": "create_change_request_link_incident",
        "query_template_metadata": {
            "template_id": "service_014",
            "template_string": "After an intensive investigation, the root cause for the incident '{incident_subject}' is found. We need to create a change request with the following details. {change_request_details}. Link this change request to the incident case and update the incident status to {new_status}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Incident": [
                            "Incident.json"
                        ]
                    }
                }
            },
            "objects": [
                "ChangeRequest",
                "ChangeRequestRelatedIssue",
                "Incident"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "incident_subject": "data sync service disruption across mobile and web platforms",
            "change_request_details": "Subject: implement data synchronization monitoring, Description: deploy real-time sync monitoring tools to detect and prevent data inconsistencies, Priority: Medium, Impact: High, Risk Level: Medium",
            "new_status": "open"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": false,
        "has_annotation": false,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Incident management",
        "task_id": "service_014_003",
        "query_templated": "After an intensive investigation, the root cause for the incident 'network connectivity failures across regional offices' is found. We need to create a change request with the following details. Subject: upgrade network infrastructure, Description: implement redundant network connections to prevent future connectivity issues, Priority: High, Impact: Low, Risk Level: Medium. Link this change request to the incident case and update the incident status to in progress.",
        "query": "We\u2019ve identified what caused the \u201cnetwork connectivity failures across regional offices\u201d incident. Create a change request now: Subject\u2014upgrade network infrastructure; Description\u2014implement redundant network connections to prevent future connectivity issues; Priority\u2014High; Impact\u2014Low; Risk Level\u2014Medium. Link the CR back to the incident and update the incident status to in progress.",
        "human_review_comment": "tweak",
        "ground_truth_dict": {
            "incident_subject": "network connectivity failures across regional offices",
            "change_request_subject": "upgrade network infrastructure",
            "change_request_priority": "High",
            "change_request_impact": "Low",
            "change_request_risk_level": "Medium",
            "incident_new_status": "In Progress"
        },
        "difficulty": "medium",
        "query_template_name": "create_change_request_link_incident",
        "query_template_metadata": {
            "template_id": "service_014",
            "template_string": "After an intensive investigation, the root cause for the incident '{incident_subject}' is found. We need to create a change request with the following details. {change_request_details}. Link this change request to the incident case and update the incident status to {new_status}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Incident": [
                            "Incident.json"
                        ]
                    }
                }
            },
            "objects": [
                "ChangeRequest",
                "ChangeRequestRelatedIssue",
                "Incident"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "incident_subject": "network connectivity failures across regional offices",
            "change_request_details": "Subject: upgrade network infrastructure, Description: implement redundant network connections to prevent future connectivity issues, Priority: High, Impact: Low, Risk Level: Medium",
            "new_status": "in progress"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Incident management",
        "task_id": "service_014_004",
        "query_templated": "After an intensive investigation, the root cause for the incident 'security breach in user authentication system' is found. We need to create a change request with the following details. Subject: enhance security protocols, Description: implement multi-factor authentication and security monitoring tools, Priority: Medium, Impact: Medium, Risk Level: Low. Link this change request to the incident case and update the incident status to closed.",
        "query": "Root cause nailed down for the \u201csecurity breach in user authentication system\u201d incident. Please do the following: 1) Create a change request with Subject: enhance security protocols. 2) Description: implement multi-factor authentication and security monitoring tools. 3) Set Priority: Medium, Impact: Medium, Risk Level: Low. 4) Link the change to the incident record and update the incident status to closed.",
        "human_review_comment": "tweak",
        "ground_truth_dict": {
            "incident_subject": "security breach in user authentication system",
            "change_request_subject": "enhance security protocols",
            "change_request_priority": "Moderate",
            "change_request_impact": "Medium",
            "change_request_risk_level": "Low",
            "incident_new_status": "Closed"
        },
        "difficulty": "medium",
        "query_template_name": "create_change_request_link_incident",
        "query_template_metadata": {
            "template_id": "service_014",
            "template_string": "After an intensive investigation, the root cause for the incident '{incident_subject}' is found. We need to create a change request with the following details. {change_request_details}. Link this change request to the incident case and update the incident status to {new_status}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Incident": [
                            "Incident.json"
                        ]
                    }
                }
            },
            "objects": [
                "ChangeRequest",
                "ChangeRequestRelatedIssue",
                "Incident"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "incident_subject": "security breach in user authentication system",
            "change_request_details": "Subject: enhance security protocols, Description: implement multi-factor authentication and security monitoring tools, Priority: Medium, Impact: Medium, Risk Level: Low",
            "new_status": "closed"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    },
    {
        "category": "service",
        "subcategory": "Incident management",
        "task_id": "service_014_005",
        "query_templated": "After an intensive investigation, the root cause for the incident 'database performance degradation in reporting systems' is found. We need to create a change request with the following details. Subject: optimize database performance, Description: implement database indexing and query optimization to improve reporting speed, Priority: Low, Impact: High, Risk Level: High. Link this change request to the incident case and update the incident status to in progress.",
        "query": "Good news\u2014we\u2019ve pinned down the cause behind the \u201cdatabase performance degradation in reporting systems\u201d incident. Log a change request with Subject: optimize database performance and Description: implement database indexing and query optimization to improve reporting speed. Set Priority: Low, Impact: High, and Risk Level: High. Tie this change to the incident case and switch the incident status to in progress.",
        "human_review_comment": "tweak",
        "ground_truth_dict": {
            "incident_subject": "database performance degradation in reporting systems",
            "change_request_subject": "optimize database performance",
            "change_request_priority": "Low",
            "change_request_impact": "High",
            "change_request_risk_level": "High",
            "incident_new_status": "In Progress"
        },
        "difficulty": "medium",
        "query_template_name": "create_change_request_link_incident",
        "query_template_metadata": {
            "template_id": "service_014",
            "template_string": "After an intensive investigation, the root cause for the incident '{incident_subject}' is found. We need to create a change request with the following details. {change_request_details}. Link this change request to the incident case and update the incident status to {new_status}.",
            "prerequisites": {
                "data": {
                    "objects": {
                        "Incident": [
                            "Incident.json"
                        ]
                    }
                }
            },
            "objects": [
                "ChangeRequest",
                "ChangeRequestRelatedIssue",
                "Incident"
            ],
            "metadata_types": []
        },
        "instance_dict": {
            "incident_subject": "database performance degradation in reporting systems",
            "change_request_details": "Subject: optimize database performance, Description: implement database indexing and query optimization to improve reporting speed, Priority: Low, Impact: High, Risk Level: High",
            "new_status": "in progress"
        },
        "on_start": null,
        "on_finish": null,
        "in_domain": true,
        "has_annotation": true,
        "additional_info": null
    }
]
